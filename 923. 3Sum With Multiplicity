Given an integer array A, and an integer target, return the number of tuples i, j, k  such that i < j < k and A[i] + A[j] + A[k] == target.

As the answer can be very large, return it modulo 10^9 + 7.

 

Example 1:

Input: A = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Explanation: 
Enumerating by the values (A[i], A[j], A[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.
Example 2:

Input: A = [1,1,2,2,2,2], target = 5
Output: 12
Explanation: 
A[i] = 1, A[j] = A[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.
 

Note:

3 <= A.length <= 3000
0 <= A[i] <= 100
0 <= target <= 300



O(n^2) time, O(n) space
class Solution(object):
    def threeSumMulti(self, A, target):
        """
        :type A: List[int]
        :type target: int
        :rtype: int
        """
        
        counter = collections.Counter(A)
        
        nums = counter.keys()
        nums.sort()
        res = 0
        
        for i in range(len(nums)):
            for j in range(i, len(nums)):
                leftover = target-nums[i]-nums[j]
                if leftover < nums[j]:
                    break
                
                if leftover not in counter:
                    continue
                
                if nums[i] == nums[j] == leftover:
                    count = counter[nums[i]]
                    if count >= 3:
                        res += count*(count-1)*(count-2)/6
                elif nums[i] == nums[j] < leftover:
                    if counter[nums[i]] > 1:
                        res += counter[nums[i]]*(counter[nums[j]]-1)/2*counter[leftover]
                elif nums[i] < nums[j] == leftover:
                    if counter[nums[j]] > 1:
                        res += counter[nums[i]]*(counter[nums[j]]*(counter[nums[j]]-1)/2)
                elif nums[i] < nums[j] < leftover:
                    res += counter[nums[i]]*counter[nums[j]]*counter[leftover]
        
        return res%(10**9+7)
