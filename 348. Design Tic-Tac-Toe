class TicTacToe(object):

    def __init__(self, n):
        """
        Initialize your data structure here.
        :type n: int
        """
        
        self.n = n
        
        self.p1_row = [set([_ for _ in range(n)]) for _ in range(n)]
        self.p1_col = [set([_ for _ in range(n)]) for _ in range(n)]
        self.p1_diag1 = set([_ for _ in range(n)])
        self.p1_diag2 = set([_ for _ in range(n)])
        
        self.p2_row = [set([_ for _ in range(n)]) for _ in range(n)]
        self.p2_col = [set([_ for _ in range(n)]) for _ in range(n)]
        self.p2_diag1 = set([_ for _ in range(n)])
        self.p2_diag2 = set([_ for _ in range(n)])
        
    def move(self, row, col, player):
        """
        Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins.
        :type row: int
        :type col: int
        :type player: int
        :rtype: int
        """
        
        if player == 1:
            self.p1_row[row].remove(col)
            self.p1_col[col].remove(row)
            if row == col:
                self.p1_diag1.remove(row)
            
            if row+col == self.n-1:
                self.p1_diag2.remove(row)
            
            if not self.p1_row[row] or not self.p1_col[col] or not self.p1_diag1 or not self.p1_diag2:
                return 1
        else:
            self.p2_row[row].remove(col)
            self.p2_col[col].remove(row)
            if row == col:
                self.p2_diag1.remove(row)
            
            if row+col == self.n-1:
                self.p2_diag2.remove(row)
            
            if not self.p2_row[row] or not self.p2_col[col] or not self.p2_diag1 or not self.p2_diag2:
                return 2
        
        return 0

# Your TicTacToe object will be instantiated and called as such:
# obj = TicTacToe(n)
# param_1 = obj.move(row,col,player)


class TicTacToe(object):

    def __init__(self, n):
        """
        Initialize your data structure here.
        :type n: int
        """
        
        self.n = n
        
        self.p1_row = [0]*n
        self.p1_col = [0]*n
        self.p1_diag1 = 0
        self.p1_diag2 = 0
        
        self.p2_row = [0]*n
        self.p2_col = [0]*n
        self.p2_diag1 = 0
        self.p2_diag2 = 0
        
    def move(self, row, col, player):
        """
        Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins.
        :type row: int
        :type col: int
        :type player: int
        :rtype: int
        """
        
        if player == 1:
            self.p1_row[row] += 1
            self.p1_col[col] += 1
            if row == col: self.p1_diag1 += 1
            if row+col == self.n-1: self.p1_diag2 += 1

            if self.p1_row[row] == self.n or self.p1_col[col] == self.n or self.p1_diag1 == self.n or self.p1_diag2 == self.n:
                return 1
        else:
            self.p2_row[row] += 1
            self.p2_col[col] += 1
            if row == col: self.p2_diag1 += 1
            if row+col == self.n-1: self.p2_diag2 += 1

            if self.p2_row[row] == self.n or self.p2_col[col] == self.n or self.p2_diag1 == self.n or self.p2_diag2 == self.n:
                return 2
        
        return 0

# Your TicTacToe object will be instantiated and called as such:
# obj = TicTacToe(n)
# param_1 = obj.move(row,col,player)
