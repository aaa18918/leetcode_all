amortize O(lgn) time, worst O(n) time, amortize O(lgn) space, worst O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def upsideDownBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        
        if not root:
            return None
        
        node, my_stack = root, []
        while node:
            my_stack.append(node)
            node = node.left
        
        new_root = my_stack[-1]
        while my_stack:
            p = my_stack.pop()
            if my_stack:
                p.left = my_stack[-1].right
                if p.left:
                    p.left.left, p.left.right = None, None
                
                p.right = my_stack[-1]
                p = p.right
        
        p.left, p.right = None, None
        return new_root


还有个O(1) space的解法需要花点时间才能理解。
