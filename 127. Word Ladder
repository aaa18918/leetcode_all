import string

class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        
        wordSet = set(wordList)
        queue = [(beginWord, 1)]
        
        while queue:
            curWord, curDistance = queue.pop(0)
            if curWord == endWord:
                return curDistance
            
            charList = string.ascii_lowercase
            for index in range(len(curWord)):
                for char in charList:
                    if char != curWord[index]:
                        newWord = curWord[:index]+char+curWord[index+1:]
                        if newWord in wordSet:
                            queue.append((newWord, curDistance+1))
                            wordSet.remove(newWord)
        
        return 0


class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        
        myQueue, wordSet, lowerCaseLetter = collections.deque([(beginWord, 1)]), set(wordList), string.ascii_lowercase
        while myQueue:
            curWord, count = myQueue.popleft()
            for i in range(len(curWord)):
                for c in lowerCaseLetter:
                    if c != curWord[i]:
                        newWord = curWord[:i]+c+curWord[i+1:]
                        if newWord in wordSet:
                            if newWord == endWord:
                                return count+1
                            else:
                                myQueue.append((newWord, count+1))
                                wordSet.remove(newWord)
        return 0


class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        
        wordSet = set(wordList)
        
        if endWord not in wordSet: return 0
        
        myQueue, lowercaseLetters = collections.deque([(beginWord, 1)]), string.ascii_lowercase
        
        while myQueue and wordSet:
            word, t = myQueue.popleft()
            for i in range(len(word)):
                for c in lowercaseLetters:
                    newWord = word[:i]+c+word[i+1:]
                    if word == newWord: continue
                    if newWord == endWord: return t+1
                    if newWord in wordSet:
                        myQueue.append((newWord, t+1))
                        wordSet.remove(newWord)
        return 0


class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        
        wordSet = set(wordList)
        
        if endWord not in wordSet: return 0
        
        myQueue, lowercaseLetters = collections.deque([(beginWord, 1)]), string.ascii_lowercase
        
        while myQueue and wordSet:
            word, t = myQueue.popleft()
            for i in range(len(word)):
                for c in lowercaseLetters:
                    if c == word[i]: continue
                    newWord = word[:i]+c+word[i+1:]
                    if newWord == endWord: return t+1
                    if newWord in wordSet:
                        myQueue.append((newWord, t+1))
                        wordSet.remove(newWord)
        return 0

不太清楚为什么，方法有点慢，下次需要再看下别的方法都是怎么做的啊。

