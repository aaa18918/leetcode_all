class SnakeGame(object):

    def __init__(self, width,height,food):
        """
        Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].
        :type width: int
        :type height: int
        :type food: List[List[int]]
        """
        
        self.food_queue = food
        self.width = width
        self.height = height
        self.snack_position = collections.deque([(0, 0)])
        self.snack_length = 1

    def move(self, direction):
        """
        Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body.
        :type direction: str
        :rtype: int
        """
        
        x, y = self.snack_position[0]
        if direction == 'U':
            next_x, next_y = x-1, y
        elif direction == 'L':
            next_x, next_y = x, y-1
        elif direction == 'R':
            next_x, next_y = x, y+1
        else:
            next_x, next_y = x+1, y
        
        if next_x < 0 or next_x >= self.height or next_y < 0 or next_y >= self.width or self.isBiteItsBody(next_x, next_y):
            return -1
        
        if self.food_queue and [next_x, next_y] == self.food_queue[0]:
            self.snack_length += 1
            self.food_queue.pop(0)
        else:
            self.snack_position.pop()
        
        self.snack_position.appendleft((next_x, next_y))
        return self.snack_length-1
        
    def isBiteItsBody(self, x, y):
        if (x, y) in itertools.islice(self.snack_position, 0, self.snack_length-1):
            return True
        
        return False


# Your SnakeGame object will be instantiated and called as such:
# obj = SnakeGame(width, height, food)
# param_1 = obj.move(direction)
