O(C(len(candidates), target)) time, O(???) space
class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        res = []
        
        candidates.sort()
        
        def myHelp(idx, target, cur):
            for i in range(idx, len(candidates)):
                if i == idx or candidates[i] != candidates[i-1]:
                    if candidates[i] == target:
                        res.append(cur+[candidates[i]])
                    elif candidates[i] < target:
                        myHelp(i+1, target-candidates[i], cur+[candidates[i]])
                    else:
                        return
        
        myHelp(0, target, [])
        
        return res


O(mn) time, O(mn) space:
class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        candidates.sort()
        dp = [set() for _ in range(target+1)]
        dp[0].add(())
        
        for num in candidates:
            for idx in range(target, num-1, -1):
                for prev in dp[idx-num]:
                    dp[idx].add(prev+(num,))
        return list(dp[target])


O(???) time, O(???) space
class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """

        candidates.sort()
        dp = [[] for _ in range(target+1)]

        for idx, num in enumerate(candidates):
            if idx > 0 and candidates[idx] == candidates[idx-1]:
                continue

            if num <= target:
                dp[num].append([idx+1, num])

        for i in range(target):
            if dp[i]:
                for p in dp[i]:
                    for j in range(p[0], len(candidates)):
                        if j > p[0] and candidates[j] == candidates[j-1]:
                            continue

                        num = candidates[j]

                        if i+num <= target:
                            tmp = [elem for elem in p]
                            tmp[0] = j+1
                            dp[i+num].append(tmp+[num])

        return [p[1:] for p in dp[target]]
