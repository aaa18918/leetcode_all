Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

 

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.


O(n) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        dummy_head = ListNode(0)
        dummy_head.next = head
        
        p = dummy_head
        while p.next and p.next.next:
            tmp = p.next.next
            p.next.next = p.next.next.next
            tmp.next = p.next
            p.next = tmp
            p = p.next.next
        
        return dummy_head.next


O(n) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        dummy_head = ListNode(0)
        dummy_head.next = head
        
        p = dummy_head
        while p.next and p.next.next:
            tmp = p.next.next.next
            p.next.next.next = p.next
            p.next = p.next.next
            p.next.next.next = tmp
            
            p = p.next.next
        
        return dummy_head.next
