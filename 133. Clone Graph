O(n) time, O(???) space
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node:
            return None
        
        hash_table = {}
        
        def myDFS(node, new_node):
            hash_table[node.label] = new_node
            
            for neighbor in node.neighbors:
                if neighbor.label in hash_table:
                    new_node.neighbors.append(hash_table[neighbor.label])
                else:
                    new_neighbor = UndirectedGraphNode(neighbor.label)
                    new_node.neighbors.append(new_neighbor)
                    myDFS(neighbor, new_neighbor)
        
        new_node = UndirectedGraphNode(node.label)
        myDFS(node, new_node)
        return new_node


average O(n) time, worst O(n^2) time, O(n) space
# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node: return None
        
        res_node = UndirectedGraphNode(node.label)
        my_queue = collections.deque([node])
        hash_table = {node: res_node}
        visited = set()
        
        while my_queue:
            cur_node = my_queue.popleft()
            if cur_node in visited:
                continue
            
            corresponding_node = hash_table[cur_node]
            for node in cur_node.neighbors:
                if node in hash_table:
                    corresponding_node.neighbors.append(hash_table[node])
                else:
                    new_node = UndirectedGraphNode(node.label)
                    hash_table[node] = new_node
                    my_queue.append(node)
                    corresponding_node.neighbors.append(new_node)
            
            visited.add(cur_node)
        
        return res_node
