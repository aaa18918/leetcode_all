Given a string, find the length of the longest substring T that contains at most k distinct characters.

Example 1:

Input: s = "eceba", k = 2
Output: 3
Explanation: T is "ece" which its length is 3.
Example 2:

Input: s = "aa", k = 1
Output: 2
Explanation: T is "aa" which its length is 2.


O(n) time, O(n) space
class Solution(object):
    def lengthOfLongestSubstringKDistinct(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        
        left, count, t, res = 0, collections.defaultdict(int), k, 0
        for idx, char in enumerate(s):
            if count[char] == 0:
                t -= 1
                
                if t == -1:
                    res = max(res, idx-left)
                    
                    while left < idx:
                        count[s[left]] -= 1
                        if count[s[left]] == 0:
                            t += 1
                            if t == 0:
                                break
                        left += 1
                    left += 1
            
            count[char] += 1

        return max(res, len(s)-left) if k > 0 else 0
