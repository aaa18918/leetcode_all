Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false


O(lgm+lgn) time, O(1) space
class Solution(object):
def searchMatrix(self, matrix, target):
    """
    :type matrix: List[List[int]]
    :type target: int
    :rtype: bool
    """
    
    if not matrix: return False
    
    m, n = len(matrix), len(matrix[0])
    left, right = 0, m*n-1
    while left <= right:
        mid = (left+right)/2
        if matrix[mid/n][mid%n] == target:
            return True
        elif matrix[mid/n][mid%n] < target:
            left = mid+1
        else:
            right = mid-1
    return False


0(m+n) time, O(1) space
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        
        if not matrix:
            return False
        
        i, j = 0, len(matrix[0])-1
        while 0 <= i < len(matrix) and 0 <= j < len(matrix[0]):
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] < target:
                i += 1
            else:
                j -= 1
        
        return False
