Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

Example 1:

Input: n = 12
Output: 3 
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


O(n^2) time, O(1) space
class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        upper = int(math.sqrt(n))
        
        if upper**2 == n:
            return 1
        
        res = 4
        for a in range(1, upper+1):
            for b in range(a, min(upper, int(math.sqrt(n-a**2)))+1):
                if a**2+b**2 == n:
                    return 2
                
                c = int(math.sqrt(n-a**2-b**2))
                
                if a**2+b**2+c**2 == n:
                    res = 3
        
        return res


有一个更简单的公式，没看懂。
