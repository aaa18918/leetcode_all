The n-queens puzzle is the problem of placing n queens on an nÃ—n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

Example:

Input: 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown below.
[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]


O(???) time, O(???) space
class Solution(object):
    def totalNQueens(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        self.res = 0
        
        def pickUpValidPositions(m, board):
            valid_positions = []
            
            for j in range(n):
                conflict = False
                for i in range(m):
                    if board[i][j] == 'Q' or j-(m-i) >= 0 and board[i][j-(m-i)] == 'Q' or j+(m-i) < n and board[i][j+(m-i)] == 'Q':
                        conflict = True
                        break
                
                if not conflict:
                    valid_positions.append([m, j])
            
            return valid_positions
        
        def myDFS(m, board):
            valid_positions = pickUpValidPositions(m, board)
            
            for x, y in valid_positions:
                board[x][y] = 'Q'
                
                if m == n-1:
                    self.res += 1
                    return
                
                myDFS(m+1, board)
                
                board[x][y] = '.'
        
        myDFS(0, [['.']*n for _ in range(n)])
        
        return self.res


O(???) time, O(???) space
class Solution(object):
    def totalNQueens(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        set_addition, set_minus = set(), set()
        col_record = [False for _ in range(n)]
        
        def myDFS(x, n):
            count = 0
            for y in range(n):
                if not col_record[y] and x+1+y not in set_addition and x+1-y not in set_minus:
                    if x+1 == n-1:
                        count += 1
                    else:
                        col_record[y] = True
                        set_addition.add(x+1+y)
                        set_minus.add(x+1-y)
                        
                        count += myDFS(x+1, n)
                        
                        col_record[y] = False
                        set_addition.remove(x+1+y)
                        set_minus.remove(x+1-y)
                        
            return count
        
        return myDFS(-1, n)
