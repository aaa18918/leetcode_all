class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        
        all_nums = [i for i in range(1, n+1)]
        total_combinations = reduce(lambda x, y: x*y, all_nums)
        
        res, k = "", k-1
        for i in range(n, 1, -1):
            d = total_combinations/i
            cur_num = all_nums[k/d]
            res += str(cur_num)
            all_nums.remove(cur_num)
            total_combinations = d
            k = k%d
        
        return res+str(all_nums[0])


class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        
        all_nums = [i for i in range(1, n+1)]
        d = reduce(lambda x, y: x*y, all_nums)
        
        res = ""
        k -= 1
        for i in range(n, 1, -1):
            d /= i
            num = all_nums[k/d]
            res += str(num)
            all_nums.remove(num)
            k %= d
        
        return res+str(all_nums[0])


class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        
        all_nums = [i for i in range(1, n+1)]
        d = reduce(lambda x, y: x*y, all_nums)
        
        res = ""
        k -= 1
        for i in range(n, 0, -1):
            d /= i
            num = all_nums[k/d]
            res += str(num)
            all_nums.remove(num)
            k %= d
        
        return res
