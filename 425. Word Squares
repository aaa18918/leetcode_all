Given a set of words (without duplicates), find all word squares you can build from them.

A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numRows, numColumns).

For example, the word sequence ["ball","area","lead","lady"] forms a word square because each word reads the same both horizontally and vertically.

b a l l
a r e a
l e a d
l a d y
Note:
There are at least 1 and at most 1000 words.
All words will have the exact same length.
Word length is at least 1 and at most 5.
Each word contains only lowercase English alphabet a-z.
Example 1:

Input:
["area","lead","wall","lady","ball"]

Output:
[
  [ "wall",
    "area",
    "lead",
    "lady"
  ],
  [ "ball",
    "area",
    "lead",
    "lady"
  ]
]

Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).
Example 2:

Input:
["abat","baba","atan","atal"]

Output:
[
  [ "baba",
    "abat",
    "baba",
    "atan"
  ],
  [ "baba",
    "abat",
    "baba",
    "atal"
  ]
]

Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).


O(???) time, O(???) space
class Solution(object):
    def wordSquares(self, words):
        """
        :type words: List[str]
        :rtype: List[List[str]]
        """
        
        trie = {}
        for word in words:
            t = trie
            for char in word:
                if char not in t:
                    t[char] = {}
                t = t[char]
            t['#'] = {word:{}}
        
        def searchPrefix(prefix, trie, words):
            if '#' in trie:
                words += trie['#'].keys()
                return
            
            t = trie
            for char in prefix:
                if char not in t:
                    return
                
                t = t[char]
            
            if '#' in t:
                words.append(t['#'].keys())
            
            for char in t:
                searchPrefix('', t[char], words)
        
        res, size = [], len(words[0])
        def search(cur, idx):
            if idx == size:
                res.append(cur)
                return
            
            prefix = [cur[i][idx] for i in range(len(cur))]
            prefix_words = []
            searchPrefix(prefix, trie, prefix_words)
            
            for word in prefix_words:
                search(cur+[word],  idx+1)
        
        for word in words:
            search([word], 1)
        
        return res


别的解法大致看了一下，没全部仔细看。
