O(n^2) time, O(n) space
class Solution(object):
    def threeSumMulti(self, A, target):
        """
        :type A: List[int]
        :type target: int
        :rtype: int
        """
        
        counter = collections.Counter(A)
        
        nums = counter.keys()
        nums.sort()
        res = 0
        
        for i in range(len(nums)):
            for j in range(i, len(nums)):
                leftover = target-nums[i]-nums[j]
                if leftover < nums[i]:
                    break
                
                if leftover not in counter:
                    continue
                
                if nums[i] == nums[j] == leftover:
                    count = counter[nums[i]]
                    if count >= 3:
                        res += count*(count-1)*(count-2)/6
                elif nums[i] == nums[j] < leftover:
                    if counter[nums[i]] > 1:
                        res += counter[nums[i]]*(counter[nums[j]]-1)/2*counter[leftover]
                elif nums[i] < nums[j] == leftover:
                    if counter[nums[j]] > 1:
                        res += counter[nums[i]]*(counter[nums[j]]*(counter[nums[j]]-1)/2)
                elif nums[i] < nums[j] < leftover:
                    res += counter[nums[i]]*counter[nums[j]]*counter[leftover]
        
        return res%(10**9+7)
