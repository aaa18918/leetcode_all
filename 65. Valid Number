Validate if a given string can be interpreted as a decimal number.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false

Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:

Numbers 0-9
Exponent - "e"
Positive/negative sign - "+"/"-"
Decimal point - "."
Of course, the context of these characters also matters in the input.

Update (2015-02-10):
The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button to reset your code definition.


O(n) time, O(1) space
class Solution(object):
    def isNumber(self, s):
        """
        :type s: str
        :rtype: bool
        """
        
        s = s.strip()
        
        if not s:
            return False
        
        splitted_s = s.split('e')
        if len(splitted_s) > 2:
            return False
        
        for item in splitted_s:
            if not item:
                return False
        
        def isValidNumWithoutPower(string):
            start = 0 if string[0] not in '+-' else 1
            string = string[start:]
            
            if not string:
                return False
            
            splitted_string = string.split('.')
            
            if len(splitted_string) > 2 or len(splitted_string) == 2 and not splitted_string[0] and not splitted_string[1]:
                return False
            
            if splitted_string[0]:
                for char in splitted_string[0]:
                    if char < '0' or char > '9':
                        return False
            
            if len(splitted_string) == 2:
                for char in splitted_string[1]:
                    if char < '0' or char > '9':
                        return False
            
            return True
        
        def isValidPower(string):
            start = 0 if string[0] not in '+-' else 1
            string = string[start:]
            
            if not string:
                return False
            
            for char in string:
                if char < '0' or char > '9':
                    return False
            
            return True
        
        if not isValidNumWithoutPower(splitted_s[0]):
            return False
        
        if len(splitted_s) == 2:
            if not isValidPower(splitted_s[1]):
                return False
        
        return True

别的解都没有看。
