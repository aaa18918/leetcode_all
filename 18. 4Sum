Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]


O(n^3) time, O(res) space
class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        nums.sort()
        size = len(nums)
        res = []
        for i in range(size):
            if nums[i] >= 0 and nums[i] > target: return res
            if i > 0 and nums[i] == nums[i-1]: continue
            for j in range(i+1, size):
                if j > i+1 and nums[j] == nums[j-1]: continue
                left, right = j+1, size-1
                while left < right:
                    cur_sum = nums[i]+nums[j]+nums[left]+nums[right]
                    if cur_sum == target:
                        res.append([nums[i], nums[j], nums[left], nums[right]])
                        left, right = left+1, right-1
                        while left < right and nums[left] == nums[left-1]:
                            left += 1
                        
                        while left < right and nums[right] == nums[right+1]:
                            right -= 1
                    elif cur_sum < target:
                        left += 1
                        while left < right and nums[left] == nums[left-1]:
                            left += 1
                    else:
                        right -= 1
                        while left < right and nums[right] == nums[right+1]:
                            right -= 1
        return res
