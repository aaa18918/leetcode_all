O(lgn) time, O(1) space
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        
        def findKthSmallest(k, nums1, nums2):
            size1, size2 = len(nums1), len(nums2)
            if size1 < size2:
                nums1, nums2, size1, size2 = nums2, nums1, size2, size1
            
            if not size2:
                return nums1[k-1]
            
            if k == 1:
                return min(nums1[0], nums2[0])
            
            mid = k/2
            right = mid if size2 >= mid else size2
            left = right
            if nums1[left-1] < nums2[right-1]:
                return findKthSmallest(k-left, nums1[left:], nums2)
            else:
                return findKthSmallest(k-right, nums1, nums2[right:])
        
        total = len(nums1)+len(nums2)
        return findKthSmallest(total/2+1, nums1, nums2) if total%2 == 1 else (findKthSmallest(total/2, nums1, nums2)+findKthSmallest(total/2+1, nums1, nums2))/2.0


Iterative:
https://discuss.leetcode.com/topic/3367/share-my-iterative-solution-with-o-log-min-n-m/2
