O(n) time, O(1) space
class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        res = len(nums)
        for idx in range(len(nums)):
            res ^= idx^nums[idx]
        
        return res


O(n) time, O(n) space
class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        idx = 0
        while idx < len(nums):
            if nums[idx]== len(nums) or nums[idx] == idx:
                idx += 1
            else:
                nums[nums[idx]], nums[idx] = nums[idx], nums[nums[idx]]
        
        for idx in range(len(nums)):
            if idx != nums[idx]:
                return idx
        
        return len(nums)
