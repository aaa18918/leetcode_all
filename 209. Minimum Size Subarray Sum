Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 


O(n) time, O(1) space
class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        
        left, cur_sum, res = 0, 0, sys.maxint
        
        for i in range(len(nums)):
            cur_sum += nums[i]
            while cur_sum >= s:
                res = min(res, i-left+1)
                cur_sum -= nums[left]
                left += 1
        
        return res if res < sys.maxint else 0


O(nlgn) time, O(n) space
class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        
        if not nums:
            return 0
        
        nums_sum = [0]
        
        for idx in range(len(nums)):
            nums_sum.append(nums_sum[-1]+nums[idx])
        
        def binarySearch(idx):
            target = s+nums_sum[idx]
            
            left, right = idx, len(nums_sum)-1
            while left < right:
                mid = (left+right)/2
                if nums_sum[mid] == target:
                    return mid
                elif nums_sum[mid] > target:
                    right = mid
                else:
                    left = mid+1
            
            return right if nums_sum[right] >= target else -1
        
        res = 0
        for idx in range(len(nums_sum)):
            right = binarySearch(idx)
            if right != -1 and (not res or res > right-idx):
                res = right-idx
        
        return res
