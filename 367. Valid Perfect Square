O(log2(n)) time, O(1) space
class Solution(object):
    def isPerfectSquare(self, num):
        """
        :type num: int
        :rtype: bool
        """
        
        cur_sum, i = 1, 3
        while cur_sum < num:
            cur_sum += i
            i += 2
        return cur_sum == num


O(lgn) time, O(1) space
class Solution(object):
    def isPerfectSquare(self, num):
        """
        :type num: int
        :rtype: bool
        """
        
        left, right = 0, num/2+1
        while left <= right:
            mid = (left+right)/2
            cur = mid**2
            if cur == num:
                return True
            elif cur < num:
                left = mid+1
            else:
                right = mid-1
        
        return False


approximately O(lgn) time, accurately depends on the convergence time, O(1) space
class Solution(object):
    def isPerfectSquare(self, num):
        """
        :type num: int
        :rtype: bool
        """
        
        x = 1
        d = (x*x-num)*1.0/(2*x)
        
        while abs(d) >= 0.5:
            x = x-d
            d = (x*x-num)*1.0/(2*x)
        
        x = int(x)
        for y in (x-1, x, x+1):
            if y*y == num:
                return True
        
        return False
