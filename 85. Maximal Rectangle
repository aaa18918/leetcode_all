O(m*n^2) time, O(n) space
class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        
        if not matrix or not matrix[0]:
            return 0
        
        def largestRectangleArea(heights):
            my_stack = [-1]
            heights.append(0)
            res = 0
            for idx in range(len(heights)):
                while heights[idx] < heights[my_stack[-1]]:
                    cur_h = heights[my_stack.pop()]
                    res = max(res, cur_h*(idx-my_stack[-1]-1))
                
                my_stack.append(idx)
            
            heights.pop()
            return res
        
        heights = [0 for _ in range(len(matrix[0]))]
        
        res = 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == '1':
                    heights[j] += 1
                else:
                    heights[j] = 0
            
            res = max(res, largestRectangleArea(heights))
        
        return res
            
