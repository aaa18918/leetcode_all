A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example:

Input: 

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 6 

Explanation: Given three people living at (0,0), (0,4), and (2,2):
             The point (0,2) is an ideal meeting point, as the total travel distance 
             of 2+2+2=6 is minimal. So return 6.


O(nm) time, O(n+m) space
class Solution(object):
    def minTotalDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        
        m, n = len(grid), len(grid[0])
        x_labels, y_labels = [], []
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    x_labels.append(i)
                    y_labels.append(j)

        def minDistance(l):
            i, j, res, l = 0, len(l)-1, 0, sorted(l)
            while i < j:
                res += l[j]-l[i]
                i, j = i+1, j-1
            return res

        return minDistance(x_labels)+minDistance(y_labels)


O(nm) time, O(n+m) space
class Solution(object):
    def minTotalDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        
        if not grid: return 0
        
        m, n, x_labels, y_labels = len(grid), len(grid[0]), [], []
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    x_labels.append(i)
                    y_labels.append(j)
        
        def getMinDistance(labels):
            res, i, j, labels = 0, 0, len(labels)-1, sorted(labels)
            while i < j:
                res += labels[j]-labels[i]
                i, j = i+1, j-1
            return res
        
        return getMinDistance(x_labels)+getMinDistance(y_labels)


O(nm) time, O(n+m) space
class Solution(object):
    def minTotalDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        
        if not grid: return 0
        
        row_total = map(sum, grid)
        col_total = map(sum, zip(*grid))
        
        def getMinDistance(l):
            left, right, i, j, res = l[0], l[-1], 0, len(l)-1, 0
            while i < j:
                if left < right:
                    res += left
                    i += 1
                    left += l[i]
                else:
                    res += right
                    j -= 1
                    right += l[j]
            return res
        
        return getMinDistance(row_total)+getMinDistance(col_total)


O(nm) time, O(n+m) space
class Solution(object):
    def minTotalDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        
        if not grid:
            return 0
        
        row_total = map(sum, grid)
        col_total = map(sum, zip(*grid))
        
        def getMinDistance(the_list):
            i, j, left, right, res = 0, len(the_list)-1, the_list[0], the_list[-1], 0
            while i < j:
                if left < right:
                    res += left
                    i += 1
                    left += the_list[i]
                else:
                    res += right
                    j -= 1
                    right += the_list[j]
            return res
        
        return getMinDistance(row_total)+getMinDistance(col_total)
