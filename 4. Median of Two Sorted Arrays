O(lgn) time, O(1) space
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        
        m, n = len(nums1), len(nums2)
        if m > n:
            return self.findMedianSortedArrays(nums2, nums1)
        
        k = (m+n+1)/2
        left, right = 0, m
        while left < right:
            mid = (left+right)/2
            if nums1[mid] >= nums2[k-mid-1]:
                right = mid
            else:
                left = mid+1
        
        nums1_candidate = nums1[left-1] if left > 0 else -sys.maxint-1
        nums2_candidate = nums2[k-left-1] if k-left > 0 else -sys.maxint-1
        
        if (m+n)%2 == 1:
            return max(nums1_candidate, nums2_candidate)
        
        res = max(nums1_candidate, nums2_candidate)
        nums1_candidate = nums1[left] if left < m else sys.maxint
        nums2_candidate = nums2[k-left] if k-left < n else sys.maxint
        
        res += min(nums1_candidate, nums2_candidate)
        
        return res*0.5


O(lgn) time, O(???) space
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        
        size1, size2 = len(nums1), len(nums2)
        
        def findKthSmallest(k, l1, l2):
            if l1 == size1:
                return nums2[k-1+l2]
            
            if l2 == size2:
                return nums1[k-1+l1]
            
            if k == 1:
                return min(nums1[l1], nums2[l2])
            
            if size1-l1 < size2-l2:
                left = k/2+l1 if k/2+l1 < size1 else size1
                right = k-(left-l1)+l2
            else:
                right = k/2+l2 if k/2+l2 < size2 else size2
                left = k-(right-l2)+l1
            
            if nums1[left-1] < nums2[right-1]:
                return findKthSmallest(k-(left-l1), left, l2)
            else:
                return findKthSmallest(k-(right-l2), l1, right)
        
        total = size1+size2
        
        return findKthSmallest(total/2+1, 0, 0) if total%2 == 1 else (findKthSmallest(total/2, 0, 0)+findKthSmallest(total/2+1, 0, 0))/2.0
