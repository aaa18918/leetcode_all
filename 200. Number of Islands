O(mn) time, O(???) space
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        if not grid:
            return 0
        
        diff = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        def myDFS(i, j):
            grid[i][j] = '0'
            
            for d in diff:
                if 0 <= i+d[0] < len(grid) and 0 <= j+d[1] < len(grid[0]) and grid[i+d[0]][j+d[1]] == '1':
                    myDFS(i+d[0], j+d[1])
        
        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    res += 1
                    myDFS(i, j)
        
        return res


小心重复添加还在my_stack/my_queue里面的点。
O(mn) time, O(mn) space
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        if not grid:
            return 0
        
        diff = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        res = 0
        my_stack = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    res += 1
                    my_stack.add((i, j))
                    while my_stack:
                        x, y = my_stack.pop()
                        grid[x][y] = '0'
                        
                        for d in diff:
                            if 0 <= x+d[0] < len(grid) and 0 <= y+d[1] < len(grid[0]) and grid[x+d[0]][y+d[1]] == '1':
                                my_stack.add((x+d[0], y+d[1]))
        
        return res
