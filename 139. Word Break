class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: Set[str]
        :rtype: bool
        """
        
        lenS = len(s)
        
        rec = [True]
        
        for i in range(1, lenS+1):
            isFind = False
            for j in range(i):
                if rec[j] == True and s[j:i] in wordDict:
                    rec.append(True)
                    isFind = True
                    break
                
            if not isFind:    
                rec.append(False)
        
        return rec[lenS]

https://leetcode.com/problems/word-break/

class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: Set[str]
        :rtype: bool
        """
        
        record = [False for i in xrange(0, len(s)+1)]
        record[0] = True
        
        for i in xrange(1, len(s)+1):
            for j in xrange(0, i):
                if not record[i]:
                    record[i] = True if (record[j] and s[j:i] in wordDict) else False
        
        return record[len(s)]

class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """
        
        wordSet = set(wordDict)
        record = [False for _ in range(len(s)+1)]
        record[0] = True
        
        for i in range(1, len(s)+1):
            for j in range(i):
                if record[j] and s[j:i] in wordSet:
                    record[i] = True
        
        return record[len(s)]
