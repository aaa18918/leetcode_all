A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).

Write a function to count the total strobogrammatic numbers that exist in the range of low <= num <= high.

Example:

Input: low = "50", high = "100"
Output: 3 
Explanation: 69, 88, and 96 are three strobogrammatic numbers.
Note:
Because the range might be a large number, the low and high numbers are represented as string.


class Solution(object):
    def strobogrammaticInRange(self, low, high):
        """
        :type low: str
        :type high: str
        :rtype: int
        """
        
        number_map = {'0':'0', '1':'1', '8':'8', '6':'9', '9':'6'}
        
        self.res = []
        self.low_length = len(low)
        
        def myHelp(n):
            if n == 0:
                return ['']
            
            tmp = [char+p+number_map[char] for p in myHelp(n-2) for char in '01689'] if n > 1 else ['1', '0', '8']
            
            if n >= self.low_length:
                self.res += tmp
            
            return tmp
        
        myHelp(len(high))
        
        if len(low) < len(high):
            myHelp(len(high)-1)
        
        return len(filter(lambda x: (len(x) == 1 or x[0] != '0') and int(low) <= int(x) <= int(high), self.res))
