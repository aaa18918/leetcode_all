O(n) time, O(n) space
class Solution(object):
    def findMinHeightTrees(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        
        adjacent = {}
        for i in range(n):
            adjacent[i] = set()
        
        for edge in edges:
            adjacent[edge[0]].add(edge[1])
            adjacent[edge[1]].add(edge[0])
        
        remove_next = []
        for node in adjacent:
            if len(adjacent[node]) <= 1:
                remove_next.append(node)
        
        while len(remove_next) < len(adjacent):
            tmp = []
            for node in remove_next:
                connected_node = adjacent[node].pop()
                adjacent[connected_node].remove(node)
                del adjacent[node]
                
                if len(adjacent[connected_node]) <= 1:
                    tmp.append(connected_node)
            
            remove_next = tmp
        
        return adjacent.keys()


还有从随便一个点bfs找最远点，这个最远点是最长path一个端点，再从此端点bfs，找到最长path。

还有tree dp，懒得看了。
