https://leetcode.com/problems/implement-trie-prefix-tree/

class TrieNode(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.val = ""
        self.next = {}
        

class Trie(object):

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        
        p = self.root
        
        for index in range(0, len(word)):
            if word[index] not in p.next:
                p.next[word[index]] = TrieNode()
                
            p = p.next[word[index]]
        
        p.val = word

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        
        p = self.root
        
        for index in range(0, len(word)):
            if word[index] not in p.next:
                return False
                
            p = p.next[word[index]]
        
        if p.val != "":
            return True
        else:
            return False
            

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie
        that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """

        p = self.root
        
        for index in range(0, len(prefix)):
            if prefix[index] not in p.next:
                return False
                
            p = p.next[prefix[index]]
        
        return True        

# Your Trie object will be instantiated and called as such:
# trie = Trie()
# trie.insert("somestring")
# trie.search("key")

https://leetcode.com/problems/implement-trie-prefix-tree/

class TrieNode(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.word = False
        self.next_char = [None for i in xrange(26)]
        

class Trie(object):

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        
        p = self.root
        for char in word:
            if p.next_char[ord(char)-ord('a')] is None:
                p.next_char[ord(char)-ord('a')] = TrieNode()
            p = p.next_char[ord(char)-ord('a')]
        p.word = True
        
    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        
        p = self.root
        for char in word:
            if p.next_char[ord(char)-ord('a')] is None:
                return False
            p = p.next_char[ord(char)-ord('a')]
        if p.word:
            return True
        else:
            return False

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie
        that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        
        p = self.root
        for char in prefix:
            if p.next_char[ord(char)-ord('a')] is None:
                return False
            p = p.next_char[ord(char)-ord('a')]
        if p.word:
            return True
        for next_child in p.next_char:
            if next_child is not None:
                return True
        return False
        

# Your Trie object will be instantiated and called as such:
# trie = Trie()
# trie.insert("somestring")
# trie.search("key")

class TrieNode(object):
    def __init__(self):
        self.isWord = False
        self.charTable = [None for _ in range(26)]

class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.root = TrieNode()
        
    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        
        if not word: return
        
        curNode = self.root
        for char in word:
            if not curNode.charTable[ord(char)-ord('a')]:
                curNode.charTable[ord(char)-ord('a')] = TrieNode()
            curNode = curNode.charTable[ord(char)-ord('a')]
        curNode.isWord = True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        
        if not word: return True
        
        curNode = self.root
        for char in word:
            if not curNode.charTable[ord(char)-ord('a')]:
                return False
            curNode = curNode.charTable[ord(char)-ord('a')]
        
        return curNode.isWord

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        
        if not prefix: return True
        
        curNode = self.root
        for char in prefix:
            if not curNode.charTable[ord(char)-ord('a')]:
                return False
            curNode = curNode.charTable[ord(char)-ord('a')]
        
        return True

# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
