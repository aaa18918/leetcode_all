https://leetcode.com/problems/reverse-bits/

class Solution(object):
    def reverseBits(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        result = n&1
        n >>= 1
        
        for i in range(1,32):
            result <<= 1
            result += n&1
            n >>= 1
        
        return result

https://leetcode.com/problems/reverse-bits/

78%:
class Solution(object):
    def reverseBits(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        res = 0
        for i in xrange(32):
            res <<= 1
            lowest_bit = n%2
            n = n/2
            if lowest_bit == 1:
                res += 1
        return res

class Solution:
    def __init__(self):
        self.search_table = {}
    
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        if n in self.search_table:
            return self.search_table[n]
        
        res, m = 0, n
        for i in range(32):
            res <<= 1
            res += n&1
            n >>= 1
        
        self.search_table[m] = res
        return res

class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        table = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
        
        res = 0
        for _ in range(8):
            res <<= 4
            res |= table[n&15]
            n >>= 4
        
        return res

class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        table = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
        
        res = 0
        for _ in range(8):
            res <<= 4
            res |= table[n&15]
            n >>= 4
        
        return res
