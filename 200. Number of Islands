O(mn) time, O(???) space
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        if not grid:
            return 0
        
        diff = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        def myDFS(i, j):
            grid[i][j] = '0'
            
            for d in diff:
                if 0 <= i+d[0] < len(grid) and 0 <= j+d[1] < len(grid[0]) and grid[i+d[0]][j+d[1]] == '1':
                    myDFS(i+d[0], j+d[1])
        
        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    res += 1
                    myDFS(i, j)
        
        return res


O(mn) time, O(mn) space
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        myStack = []
        
        def myDFS():
            while myStack:
                x, y = myStack.pop()
                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == '1':
                    grid[x][y] = '0'
                    myStack.append((x+1, y))
                    myStack.append((x-1, y))
                    myStack.append((x, y+1))
                    myStack.append((x, y-1))
        
        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    res += 1
                    myStack.append((i, j))
                    myDFS()
        
        return res


O(mn) time, O(mn) space
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        my_queue = collections.deque()
        
        def myBFS(i, j):          
            while my_queue:
                x, y = my_queue.popleft()
                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == '1':
                    grid[x][y] = '0'
                    my_queue.append((x-1, y))
                    my_queue.append((x+1, y))
                    my_queue.append((x, y-1))
                    my_queue.append((x, y+1))
        
        count = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    count += 1
                    my_queue.append((i, j))
                    myBFS(i, j)
        return count
