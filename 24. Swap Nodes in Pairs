# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        dummy_head, p = ListNode(0), head
        q = dummy_head
        
        while p:
            if p.next:
                temp = p.next.next
                q.next = p.next
                q.next.next = p
                p = temp
                q = q.next.next
            else:
                q.next = p
                return dummy_head.next
        
        q.next = None
        return dummy_head.next
 
 
 https://leetcode.com/problems/swap-nodes-in-pairs/

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        new_head = ListNode(0)
        p, q = new_head, head
        
        while q != None and q.next != None:
            temp = q.next.next
            p.next = q.next
            p.next.next = q
            p = p.next.next
            q = temp
        
        if q != None:
            p.next = q
            p = p.next
        
        p.next = None
        return new_head.next
        
