O(???) time, O(???) space
class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        size = len(candidates)
        res = []
        
        def myDFS(nums, idx, target):
            if target == 0:
                res.append(nums)
                return
            
            for i in range(idx, size):
                if candidates[i] <= target:
                    myDFS(nums+[candidates[i]], i, target-candidates[i])
        
        myDFS([], 0, target)
        return res


O(???) time, O(???) space
class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        res = []
        size = len(candidates)
        
        def myHelp(i, cur, target):
            if target == 0:
                res.append(cur)
                return
            
            if i == size:
                return
            
            for idx in range(i, size):
                j = 1
                while candidates[idx]*j <= target:
                    myHelp(idx+1, cur+[candidates[idx]]*j, target-candidates[idx]*j)
                    j += 1
            
        
        myHelp(0, [], target)
        return res


O(???) time, O(???) space
class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        dp = [[] for i in range(target+1)]
        for j in range(len(candidates)):
            if candidates[j] <= target:
                dp[candidates[j]].append([candidates[j]])
        
        for i in range(1, target):
            for j in range(len(candidates)):
                if i+candidates[j] <= target:
                    for s in dp[i]:
                        if s[-1] <= candidates[j]:
                            dp[i+candidates[j]].append(s+[candidates[j]])
        
        return dp[target]
