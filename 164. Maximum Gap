Given an unsorted array, find the maximum difference between the successive elements in its sorted form.

Return 0 if the array contains less than 2 elements.

Example 1:

Input: [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either
             (3,6) or (6,9) has the maximum difference 3.
Example 2:

Input: [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.
Note:

You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.
Try to solve it in linear time/space.


O(n) time, O(n) space
class Solution(object):
    def maximumGap(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        if len(nums) < 2:
            return 0
        
        min_val, max_val = min(nums), max(nums)
        bucket_size = (max_val-min_val)/len(nums)+1
        
        buckets = [[] for _ in range(len(nums))]
        
        for num in nums:
            print num, min_val, max_val, len(buckets), (num-min_val)/bucket_size
            buckets[(num-min_val)/bucket_size].append(num)
        
        res, prev_max = 0, None
        for idx in range(len(buckets)):
            if buckets[idx]:
                min_val, max_val = min(buckets[idx]), max(buckets[idx])
                if prev_max:
                    res = max(res, min_val-prev_max)
                    
                prev_max = max_val
        
        return res
