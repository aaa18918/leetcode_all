O(n) time push, O(1) time pop, O(1) time top, O(1) time peekMax, O(1) time popMax, O(n) space
class ListNode(object):
    def __init__(self, val):
        self.val = val
        self.pointer = None
        self.next = None
        self.prev = None

class MaxStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        
        self.values = ListNode(0)
        self.max_values = ListNode(0)

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        
        new_node = ListNode(x)
        new_node.prev, new_node.next = self.values, self.values.next
        
        if self.values.next:
            self.values.next.prev = new_node
        
        self.values.next = new_node
        
        p = ListNode(x)
        q = self.max_values
        while q.next and q.next.val > p.val:
            q = q.next
        
        p.prev, p.next = q, q.next
        
        if q.next:
            q.next.prev = p
        
        q.next = p
        
        new_node.pointer = p
        p.pointer = new_node

    def pop(self):
        """
        :rtype: int
        """
        
        node = self.values.next
        self.values.next = self.values.next.next
        
        if self.values.next:
            self.values.next.prev = self.values
        
        p = node.pointer
        p.prev.next = p.next
        
        if p.next:
            p.next.prev = p.prev
        
        return node.val

    def top(self):
        """
        :rtype: int
        """
        
        return self.values.next.val

    def peekMax(self):
        """
        :rtype: int
        """
        
        return self.max_values.next.val

    def popMax(self):
        """
        :rtype: int
        """
        
        node = self.max_values.next
        self.max_values.next = self.max_values.next.next
        
        if self.max_values.next:
            self.max_values.next.prev = self.max_values
        
        p = node.pointer
        p.prev.next = p.next
        
        if p.next:
            p.next.prev = p.prev
        
        return node.val

# Your MaxStack object will be instantiated and called as such:
# obj = MaxStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.peekMax()
# param_5 = obj.popMax()
