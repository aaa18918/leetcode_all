O(n^2) time, O(n^2) space
class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        
        len_s, len_p = len(s), len(p)
        dp = [[False]*(len_p+1) for _ in range(len_s+1)]
        dp[0][0] = True
        
        for i in range(2, len_p+1):
            if p[i-1] == '*':
                dp[0][i] = dp[0][i-2]
        
        for i in range(1, len_s+1):
            for j in range(1, len_p+1):
                if s[i-1] == p[j-1] or p[j-1] == '.':
                    dp[i][j] = dp[i-1][j-1]
                elif p[j-1] == '*':
                    if s[i-1] == p[j-2] or p[j-2] == '.':
                        dp[i][j] = dp[i][j-1] or dp[i][j-2] or dp[i-1][j]
                    else:
                        dp[i][j] = dp[i][j-2]
        return dp[len_s][len_p]


O(n^2) time, O(n^2) space, can be optimized to beyond solution.
class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        
        dp = [[False]*(len(p)+1) for _ in range((len(s)+1))]
        dp[0][0] = True
        
        for j in range(len(p)):
            if p[j] == '*':
                dp[0][j+1] = dp[0][j-1] if j > 0 else False
            else:
                dp[0][j+1] = False
        
        for i in range(len(s)):
            dp[i+1][0] = False
            for j in range(len(p)):
                if s[i] == p[j] or p[j] == '.':
                    dp[i+1][j+1] = dp[i][j]
                elif p[j] == '*':
                    if j > 0 and (s[i] == p[j-1] or p[j-1] == '.'):
                        dp[i+1][j+1] = dp[i+1][j-1] or dp[i][j+1] or dp[i][j] or dp[i][j-1]
                    elif j > 0:
                        dp[i+1][j+1] = dp[i+1][j-1]
                    else:
                        dp[i+1][j+1] = False
                else:
                    dp[i+1][j+1] = False
        
        return dp[len(s)][len(p)]
