Consider all the leaves of a binary tree.  From left to right order, the values of those leaves form a leaf value sequence.


For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 

Note:

Both of the given trees will have between 1 and 100 nodes.


O(n) time, O(lgn) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def leafSimilar(self, root1, root2):
        """
        :type root1: TreeNode
        :type root2: TreeNode
        :rtype: bool
        """
        
        my_stack1, my_stack2 = [], []
        node1, node2 = root1, root2
        while True:
            while my_stack1 or node1:
                while node1:
                    my_stack1.append(node1)
                    node1 = node1.left
                
                node1 = my_stack1.pop()
                if not node1.left and not node1.right:
                    break
                
                node1 = node1.right
            
            while my_stack2 or node2:
                while node2:
                    my_stack2.append(node2)
                    node2 = node2.left
                
                node2 = my_stack2.pop()
                print 'node2', node2.val
                if not node2.left and not node2.right:
                    break
                
                node2 = node2.right
            
            if not node1 and not node2:
                break
            
            if not node1 or not node2 or node1.val != node2.val:
                return False
            
            node1, node2 = node1.right, node2.right
        
        return True


O(n) time, O(lgn) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def leafSimilar(self, root1, root2):
        """
        :type root1: TreeNode
        :type root2: TreeNode
        :rtype: bool
        """
        
        if not root1 or not root2:
            return not root1 and not root2
        
        def myHelp(my_stack):
            while True:
                node = my_stack.pop()
                if node.right:
                    my_stack.append(node.right)
                
                if node.left:
                    my_stack.append(node.left)
                
                if not node.left and not node.right:
                    return node.val
        
        my_stack1, my_stack2 = [root1], [root2]
        while my_stack1 and my_stack2:
            val1, val2 = myHelp(my_stack1), myHelp(my_stack2)
            if val1 != val2:
                return False
        
        return not my_stack1 and not my_stack2
