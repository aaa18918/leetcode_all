O(n) time, O(???) space
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node:
            return None
        
        hash_table = {}
        
        def myDFS(node, new_node):
            hash_table[node.label] = new_node
            
            for neighbor in node.neighbors:
                if neighbor.label in hash_table:
                    new_node.neighbors.append(hash_table[neighbor.label])
                else:
                    new_neighbor = UndirectedGraphNode(neighbor.label)
                    new_node.neighbors.append(new_neighbor)
                    myDFS(neighbor, new_neighbor)
        
        new_node = UndirectedGraphNode(node.label)
        myDFS(node, new_node)
        return new_node


O(n) time, O(n) space
# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node:
            return None
        
        res = UndirectedGraphNode(node.label)
        hash_table = {node.label: res}
        
        my_queue = collections.deque([node])
        while my_queue:
            old_node = my_queue.popleft()
            new_node = hash_table[old_node.label]
            
            for neighbor in old_node.neighbors:
                if neighbor.label in hash_table:
                    new_node.neighbors.append(hash_table[neighbor.label])
                else:
                    new_neighbor = UndirectedGraphNode(neighbor.label)
                    new_node.neighbors.append(new_neighbor)
                    hash_table[neighbor.label] = new_neighbor
                    my_queue.append(neighbor)
        
        return res
