Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.


O(n) time, O(n) space
# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        """
        
        left, right = 0, len(intervals)-1
        while left <= right:
            mid = (left+right)/2
            if newInterval.start > intervals[mid].end:
                left = mid+1
            elif newInterval.end < intervals[mid].start:
                right = mid-1
            else:
                left = mid+1
        
        if left == 0 or intervals[left-1].end < newInterval.start:
            return intervals[:left]+[newInterval]+intervals[left:]
        elif left == len(intervals) and intervals[left-1].end < newInterval.start:
            return intervals+[newInterval]
        else:
            idx = left-1
            intervals[idx].start = min(intervals[idx].start, newInterval.start)
            intervals[idx].end = max(intervals[idx].end, newInterval.end)
            for i in range(idx-1, -1, -1):
                if intervals[i].end >= intervals[idx].start:
                    intervals[idx].start = min(intervals[idx].start, intervals[i].start)
                else:
                    idx -= 1
                    intervals[idx] = intervals[i]
            
            return intervals[idx:]


two binary searches
O(n) time, O(n) space
class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[List[int]]
        :type newInterval: List[int]
        :rtype: List[List[int]]
        """
        
        if not intervals:
            return [newInterval]
        
        def hasInterval(interval1, interval2):
            return False if interval1[1] < interval2[0] or interval1[0] > interval2[1] else True
        
        left, right = 0, len(intervals)-1
        while left <= right:
            mid = (left+right)/2
            
            if hasInterval(intervals[mid], newInterval):
                right = mid-1
            elif intervals[mid][0] > newInterval[1]:
                right = mid-1
            else:
                left = mid+1
        
        start = left
        
        right = len(intervals)-1
        while left <= right:
            mid = (left+right)/2
            
            if hasInterval(intervals[mid], newInterval):
                left = mid+1
            else:
                right = mid-1

        if left == len(intervals) and intervals[left-1][1] < newInterval[0]:
            return intervals+[newInterval]
        elif start == 0 and intervals[start][0] > newInterval[1]:
            return [newInterval]+intervals
        else:
            return intervals[:start]+[[min(intervals[start][0], newInterval[0]), max(intervals[left-1][1], newInterval[1])]]+intervals[left:]
