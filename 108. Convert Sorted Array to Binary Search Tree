# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        
        if not nums: return None
        left, right = 0, len(nums)-1
        if left == right: return TreeNode(nums[0])
        
        mid = (left+right)/2
        node = TreeNode(nums[mid])
        node.left, node.right = self.sortedArrayToBST(nums[:mid]), self.sortedArrayToBST(nums[mid+1:])
        
        return node

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        
        if not nums: return None
        
        mid = len(nums)/2
        node = TreeNode(nums[mid])
        node.left, node.right = self.sortedArrayToBST(nums[:mid]), self.sortedArrayToBST(nums[mid+1:])
        
        return node

https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        
        if len(nums) == 0:
            return None
        
        def myHelp(low, high):
            if low > high:
                return None
            
            mid = (low+high)/2
            node = TreeNode(nums[mid])
            node.left = myHelp(low,mid-1)
            node.right = myHelp(mid+1,high)
            
            return node
        
        return myHelp(0, len(nums)-1)
