# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def printTree(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[str]]
        """
        
        assert root
        
        def findDepth(node):
            if not node: return 0
            
            left_depth, right_depth = 0, 0
            if node.left: left_depth = findDepth(node.left)
            if node.right: right_depth = findDepth(node.right)
            return max(left_depth, right_depth)+1
        
        height = findDepth(root)
        res = [[""]*(2**height-1) for _ in range(height)]
        
        def putValueInThere(node, depth, left, right):
            mid = (left+right)/2
            res[depth][mid] = str(node.val)
            
            if node.left: putValueInThere(node.left, depth+1, left, mid-1)
            if node.right: putValueInThere(node.right, depth+1, mid+1, right)
        
        putValueInThere(root, 0, 0, 2**height-2)
        return res
