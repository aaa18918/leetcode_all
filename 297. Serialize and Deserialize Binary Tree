O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        
        vals = []
        
        def myDFS(node):
            if node:
                vals.append(str(node.val))
                myDFS(node.left)
                myDFS(node.right)
            else:
                vals.append('#')
        
        myDFS(root)
        return ','.join(vals)

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        
        vals = data.split(',')[::-1]
        
        def myDFS():
            cur = vals.pop()
            if cur == '#':
                return None
            
            node = TreeNode(int(cur))
            node.left = myDFS()
            node.right = myDFS()
            return node
        
        return myDFS()
        
# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
