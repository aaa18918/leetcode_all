Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?


O(nlgn) time, O(1) space
class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        length = 1
        for idx in range(1, len(nums)):
            if nums[length-1] < nums[idx]:
                nums[length] = nums[idx]
                length += 1
            else:
                left, right = 0, length-1
                while left < right:
                    mid = (left+right)/2
                    if nums[mid] < nums[idx]:
                        left = mid+1
                    else:
                        right = mid
                
                nums[left] = nums[idx]
        
        return length if nums else 0
