O(nlgk) time, O(k) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        
        dummy_head = ListNode(0)
        p = dummy_head
        heap = []
        heapq.heapify(heap)
        for l in lists:
            if l:
                heapq.heappush(heap, (l.val, l))
        
        while heap:
            p.next = heapq.heappop(heap)[1]
            p = p.next
            if p.next:
                heapq.heappush(heap, (p.next.val, p.next))
        return dummy_head.next


O(nlgn) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        
        size = len(lists)
        if not size:
            return None
        elif size == 1:
            return lists[0]
        else:
            mid = size/2
            left = self.mergeKLists(lists[:mid])
            right = self.mergeKLists(lists[mid:])
            
            dummy_head = ListNode(0)
            h = dummy_head
            while left or right:
                if left and right:
                    if left.val < right.val:
                        h.next = left
                        left = left.next
                    else:
                        h.next = right
                        right = right.next
                elif left:
                    h.next = left
                    left = left.next
                elif right:
                    h.next = right
                    right = right.next
                
                h = h.next
            
            return dummy_head.next
