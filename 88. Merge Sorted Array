O(n) time, O(1) space
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        
        length,m,n = m+n-1,m-1,n-1
        
        while m >= 0 and n >= 0:
            if nums1[m] > nums2[n]:
                nums1[length] = nums1[m]
                m -= 1
            else:
                nums1[length] = nums2[n]
                n -= 1
            
            length -= 1
        
        while n >= 0:
            nums1[length] = nums2[n]
            n -= 1
            length -= 1


O(n) time, O(1) space
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        
        idx_total = m+n-1
        idx1, idx2 = m-1, n-1
        
        while idx1 >= 0 or idx2 >= 0:
            if idx1 >= 0 and idx2 >= 0:
                if nums1[idx1] >= nums2[idx2]:
                    nums1[idx_total] = nums1[idx1]
                    idx1 -= 1
                else:
                    nums1[idx_total] = nums2[idx2]
                    idx2 -= 1
            elif idx1 >= 0:
                nums1[idx_total] = nums1[idx1]
                idx1 -= 1
            else:
                nums1[idx_total] = nums2[idx2]
                idx2 -= 1

            idx_total -= 1
