Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example:

Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6


O(m*n) time, O(n) space
class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        
        if not matrix:
            return 0
        
        def maximalRectangleOfEachRow(heights):
            my_stack, res = [-1], 0
            for idx in range(len(heights)):
                while heights[idx] < heights[my_stack[-1]]:
                    h = heights[my_stack.pop()]
                    res = max(res, (idx-my_stack[-1]-1)*h)
                
                my_stack.append(idx)
            
            return res
        
        heights, res = [0]*(len(matrix[0])+1), 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == '1':
                    heights[j] += 1
                else:
                    heights[j] = 0
            
            res = max(res, maximalRectangleOfEachRow(heights))
        
        return res
