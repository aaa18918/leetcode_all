O(1) time, O(1) space insert, O(1) time, O(1) space remove, O(1) time, O(1) space getRandom, O(n) space overall
class RandomizedCollection(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.hash_table = collections.defaultdict(set)
        self.data = []

    def insert(self, val):
        """
        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        
        res = True if not self.hash_table[val] else False
        
        self.hash_table[val].add(len(self.data))
        self.data.append(val)
        
        return res

    def remove(self, val):
        """
        Removes a value from the collection. Returns true if the collection contained the specified element.
        :type val: int
        :rtype: bool
        """
        
        if not self.hash_table[val]:
            return False
        
        idx = self.hash_table[val].pop()
        size = len(self.data)
        if idx != size-1:
            self.hash_table[self.data[size-1]].remove(size-1)
            self.hash_table[self.data[size-1]].add(idx)
            self.data[idx], self.data[size-1] = self.data[size-1], self.data[idx]
        
        self.data.pop()
        
        return True

    def getRandom(self):
        """
        Get a random element from the collection.
        :rtype: int
        """
        
        return self.data[random.randint(0, len(self.data)-1)]

# Your RandomizedCollection object will be instantiated and called as such:
# obj = RandomizedCollection()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
