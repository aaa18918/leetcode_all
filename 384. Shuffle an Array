O(n) time reset, O(nlgn) time shuffle, O(n) space overall
class Solution(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        
        self.back_up = nums[:]
        self.nums = nums

    def reset(self):
        """
        Resets the array to its original configuration and return it.
        :rtype: List[int]
        """
        
        self.nums = self.back_up[:]
        return self.nums

    def shuffle(self):
        """
        Returns a random shuffling of the array.
        :rtype: List[int]
        """
        
        size = len(self.nums)
        for idx in range(size):
            j = random.randint(idx, size-1)
            self.nums[idx], self.nums[j] = self.nums[j], self.nums[idx]
        
        return self.nums

# Your Solution object will be instantiated and called as such:
# obj = Solution(nums)
# param_1 = obj.reset()
# param_2 = obj.shuffle()
