There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example 1:

Input: 2, [[1,0]] 
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   
             course 0. So the correct course order is [0,1] .
Example 2:

Input: 4, [[1,0],[2,0],[3,1],[3,2]]
Output: [0,1,2,3] or [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.


O(n) time, O(n) space
class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        
        adjacency_list = collections.defaultdict(set)
        for pre in prerequisites:
            adjacency_list[pre[0]].add(pre[1])
        
        visited = [0 for _ in range(numCourses)]
        
        res = [c for c in range(numCourses) if c not in adjacency_list]
        def myDFS(course):
            if course not in adjacency_list: return True
            if visited[course] == 1: return True
            if visited[course] == -1: return False
            
            visited[course] = -1
            for pre_course in adjacency_list[course]:
                if not myDFS(pre_course):
                    return False
            
            res.append(course)
            visited[course] = 1
            return True
        
        for course in range(numCourses):
            if not myDFS(course):
                return []
        
        return res


O(n) time, O(n) space
class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        
        adjacent_list = collections.defaultdict(set)
        for prerequisite in prerequisites:
            adjacent_list[prerequisite[0]].add(prerequisite[1])
        
        cur = []
        for num in range(numCourses):
            if num not in adjacent_list:
                cur.append(num)
        
        res = []
        while cur:
            res += cur
            
            tmp = []
            for key, val in adjacent_list.iteritems():
                for c in cur:
                    if c in val:
                        val.remove(c)
                        
                        if not val:
                            tmp.append(key)
            
            for key in tmp:
                del adjacent_list[key]
            
            cur = tmp
        
        return res if not adjacent_list else []
