class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        digits_string_mapping = ["", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
        
        if not digits: return []
        cur_level = [""]
        for num in digits:
            string_mapping = digits_string_mapping[int(num)]
            temp = []
            for string in cur_level:
                for char in string_mapping:
                    temp.append(string+char)
            cur_level = temp
        
        return cur_level

https://leetcode.com/problems/letter-combinations-of-a-phone-number/

92%
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        if digits == "": return []
        
        char_table = {'2':"abc", '3':"def", '4':"ghi", '5':"jkl", '6':"mno", '7':"pqrs", '8':"tuv", '9':"wxyz"}
        result = [[]]
        
        for digit in digits:
            temp = []
            for cur_combination in result:
                for char in char_table[digit]:
                    temp.append(cur_combination+[char])
            result = temp
        for index in xrange(0, len(result)):
            result[index] = "".join(result[index])
        return result

change to one-line python code: 92%
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        if digits == "": return []
        
        char_table = {'2':"abc", '3':"def", '4':"ghi", '5':"jkl", '6':"mno", '7':"pqrs", '8':"tuv", '9':"wxyz"}
        
        def letter_combination(digits):
            return [ pre+[char] for pre in letter_combination(digits[:-1]) for char in char_table[digits[-1]]] if digits != "" else [[]]
        
        result = letter_combination(digits)
        for index in xrange(0, len(result)):
            result[index] = "".join(result[index])
        return result
        
directly return the string rather than list:
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        if digits == "": return []
        
        char_table = {'2':"abc", '3':"def", '4':"ghi", '5':"jkl", '6':"mno", '7':"pqrs", '8':"tuv", '9':"wxyz"}
        
        def letter_combination(digits):
            return [ pre+char for pre in letter_combination(digits[:-1]) for char in char_table[digits[-1]]] if digits != "" else [""]
        
        return letter_combination(digits)
 
 https://leetcode.com/problems/letter-combinations-of-a-phone-number/
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        digits_letter_table = {'2':"abc", '3':"def", '4':"ghi", '5':"jkl", '6':"mno", '7':"pqrs", '8':"tuv", '9':"wxyz"}
        
        if len(digits) == 0:
            return []
        elif len(digits) == 1:
            return list(digits_letter_table[digits[0]])
        
        return [prev+cur for prev in self.letterCombinations(digits[:-1]) for cur in digits_letter_table[digits[-1]]]
