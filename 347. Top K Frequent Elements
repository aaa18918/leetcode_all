Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.


O(max(n, klgn)) time, O(n) space
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        
        counter = Counter(nums)
        return [num_and_frequent[0] for num_and_frequent in counter.most_common(k)]


O(max(n, klgn)) time, O(n) space
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        
        counter = collections.Counter(nums)
        
        my_heap = [(-count, num) for num, count in counter.iteritems()]
        heapq.heapify(my_heap)
        
        res = []
        for i in range(k):
            res.append(heapq.heappop(my_heap)[1])
        
        return res


O(n) time, O(n) space
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        
        def quickSelection(nums, k):
            if not nums or k <= 0: return []
            
            pivot = nums[0][1]
            left, right, idx = 0, len(nums)-1, 0
            while left <= idx <= right:
                if nums[idx][1] > pivot:
                    nums[idx], nums[left] = nums[left], nums[idx]
                    left, idx = left+1, idx+1
                elif nums[idx][1] < pivot:
                    nums[idx], nums[right] = nums[right], nums[idx]
                    right -= 1
                else:
                    idx += 1
            
            if k < left:
                return quickSelection(nums[:left], k)
            elif k <= idx:
                return nums[:k]
            else:
                return nums[:idx]+quickSelection(nums[idx:], k-idx)
        
        counter = [(num, count) for num, count in collections.Counter(nums).iteritems()]
        return [num for num, count in quickSelection(counter, k)]
