class Solution(object):
    def isValid(self, code):
        """
        :type code: str
        :rtype: bool
        """

        if not code: return True

        if code[0] != '<': return False

        my_stack, is_cdata, idx, length, contain_tags = [], False, 0, len(code), False
        while idx < length:
            if code[idx] == '<':
                left = idx
                while idx < length and code[idx] != '>':
                    idx += 1

                if idx == length:
                    return False

                inside = code[left+1:idx]

                if is_cdata:
                    if len(inside) > 2 and inside[:-2] == "]]":
                        cdata = my_stack.pop()
                        is_cdata = False
                else:
                    if not inside:
                        return False

                    if len(inside) >= len("![CDATA["):
                        if inside[:8] == "![CDATA[":
                            if not my_stack:
                                return False
                            
                            if inside[:-2] == "]]":
                                pass
                            else:
                                my_stack.append("![CDATA[")
                                is_cdata = True

                            continue

                    if inside[0] == '/':
                        if my_stack and my_stack[-1] == inside[1:]:
                            my_stack.pop()
                            
                            if not my_stack:
                                idx += 1
                                break
                        else:
                            return False
                    else:
                        if 1 <= len(inside) <= 9:
                            for c in inside:
                                if 'A' <= c <= 'Z':
                                    pass
                                else:
                                    return False

                            contain_tags = True
                            my_stack.append(inside)
                        else:
                            return False
            elif code[idx] == '>':
                if my_stack and my_stack[-1] == "![CDATA[" and idx > 1 and code[idx-2:idx] == "]]":
                    cdata = my_stack.pop()
                    is_cdata = False

            idx += 1

        return idx == length and not my_stack and contain_tags
