O(1) time, O(n) space
class Node(object):
    def __init__(self, key, val):
        self.key, self.val = key, val
        self.prev, self.next = None, None

class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        
        self.hash_table = {}
        self.capacity = capacity
        self.head, self.tail = Node(0, 0), Node(0, 0)
        self.head.next, self.tail.prev = self.tail, self.head

    def markNodeAsRecentlyVisited(self, node):
        node.prev.next, node.next.prev = node.next, node.prev
        node.prev, node.next = self.head, self.head.next
        self.head.next.prev = node
        self.head.next = node

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        
        if key in self.hash_table:
            node = self.hash_table[key]
            self.markNodeAsRecentlyVisited(node)
            return node.val
        else:
            return -1

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        
        if key in self.hash_table:
            node = self.hash_table[key]
            node.val = value
            self.markNodeAsRecentlyVisited(node)
        else:
            node = Node(key, value)
            if self.capacity == 0:
                lru_node = self.tail.prev
                del self.hash_table[lru_node.key]
                self.tail.prev = lru_node.prev
                lru_node.prev.next = self.tail
            else:
                self.capacity -= 1
            
            self.hash_table[key] = node
            node.prev, node.next = self.head, self.head.next
            self.head.next.prev = node
            self.head.next = node

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

注意每个get和put都需要更新一下整个数据结构。
