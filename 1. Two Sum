Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


o(n) time, o(n) space
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        hash_table = {}
        for idx, num in enumerate(nums):
            if num in hash_table:
                return [hash_table[num], idx]
            
            hash_table[target-num] = idx

        return []


o(nlgn) time, o(n) space
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        sorted_nums = sorted(nums)
        
        left, right = 0, len(sorted_nums)-1
        while left < right:
            if sorted_nums[left]+sorted_nums[right] == target:
                res = []
                for idx in range(len(nums)):
                    if nums[idx] in (sorted_nums[left], sorted_nums[right]):
                        res.append(idx)
                return res
            elif sorted_nums[left]+sorted_nums[right] < target:
                left += 1
            else:
                right -= 1


O(n^2) time, O(1) space:
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        for idx in range(len(nums)-1):
            for inner_idx in range(idx+1, len(nums)):
                if nums[idx]+nums[inner_idx] == target:
                    return [idx, inner_idx]
