O(???) time, O(???) space
class Solution(object):
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        
        res = []
        
        def myHelp(idx, k, n, cur):
            if k == 0:
                if n == 0:
                    res.append(cur)
                
                return
            
            for i in range(idx, 10):
                if i <= n:
                    myHelp(i+1, k-1, n-i, cur+[i])
            
        myHelp(1, k, n, [])
        
        return res


O(???) time, O(???) space
class Solution(object):
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        
        dp = [[] for _ in range(n+1)]
        for num in range(1, min(n, 10)):
            dp[num] = [[num]]
        
        for i in range(n):
            for num in range(1, 10):
                if dp[i] and i+num <= n:
                    for p in dp[i]:
                        if p[-1] < num:
                            dp[i+num].append(p+[num])
        
        return [p for p in dp[n] if len(p) == k]
