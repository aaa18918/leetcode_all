Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


Never change this.

https://leetcode.com/problems/permutations/

Insert: O((n^n)*n!) time complexity, O(n*n!) space complexity, 81%
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        result = [[]]
        for num in nums:
            temp = []
            for cur_list in result:
                for index in xrange(0, len(cur_list)):
                    temp.append(cur_list[:index]+[num]+cur_list[index:])
                temp.append(cur_list+[num])
            result = temp
        return result

One-line Python code(My first One-line Python code!): similar idea as before, 98%
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        return [ pre[:index]+[nums[-1]]+pre[index:] for pre in self.permute(nums[:-1]) for index in xrange(0, len(pre)+1)] if nums != [] else [[]]


O((n^n)*n!) time, O(n*n!) space
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        return [[nums[idx]]+p for idx in range(len(nums)) for p in self.permute(nums[:idx]+nums[idx+1:])] if nums else [[]]


O((n^n)*n!) time, O(n*n!) space
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        return [p[:idx]+[nums[0]]+p[idx:] for idx in range(len(nums)) for p in self.permute(nums[1:])] if nums else [[]]
