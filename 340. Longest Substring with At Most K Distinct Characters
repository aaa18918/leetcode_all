class Solution(object):
    def lengthOfLongestSubstringKDistinct(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        
        if k <= 0: return 0
        
        hash_table, res, total, left = {}, 0, 0, -1
        
        for i, char in enumerate(s):
            if char in hash_table:
                hash_table[char] += 1
            else:
                if total == k:
                    res = max(res, i-1-left)
                    while total == k:
                        left += 1
                        hash_table[s[left]] -= 1
                        if hash_table[s[left]] == 0:
                            del hash_table[s[left]]
                            total -= 1
                hash_table[char] = 1
                total += 1
        
        return max(res, len(s)-1-left)


class Solution(object):
    def lengthOfLongestSubstringKDistinct(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        
        if k <= 0: return 0
        
        res, hash_table, left, total = 0, {}, -1, 0
        
        for i, char in enumerate(s):
            if char in hash_table:
                hash_table[char] = i
            else:
                if total == k:
                    res = max(res, i-1-left)
                    while total == k:
                        left += 1
                        if hash_table[s[left]] == left:
                            del hash_table[s[left]]
                            total -= 1
                
                hash_table[char] = i
                total += 1
        
        return max(res, len(s)-1-left)


class Solution(object):
    def lengthOfLongestSubstringKDistinct(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        
        if not k: return 0
        
        disc_num_count, hash_table = k, {}
        size, res, left = len(s), 0, 0
        
        for i in range(size):
            if s[i] in hash_table:
                hash_table[s[i]] += 1
            else:
                if disc_num_count > 0:
                    hash_table[s[i]] = 1
                    disc_num_count -= 1
                else:
                    res = max(res, i-left)
                    while left < i:
                        hash_table[s[left]] -= 1
                        if hash_table[s[left]] == 0:
                            del hash_table[s[left]]
                            break
                        left += 1
                    left += 1
                    hash_table[s[i]] = 1

        return max(res, size-left)
