Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].


O(n) time, O(26) space
class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        
        counter = collections.Counter(s1)
        size1, size2 = len(s1), len(s2)
        
        c = copy.deepcopy(counter)
        count = size1
        left = 0
        for idx in range(size2):
            if s2[idx] not in c:
                c = copy.deepcopy(counter)
                count = size1
                left = idx+1
            elif c[s2[idx]] == 0:
                while s2[left] != s2[idx]:
                    c[s2[left]] += 1
                    count += 1
                    left += 1
                left += 1
            else:
                c[s2[idx]] -= 1
                count -= 1
                if count == 0:
                    return True
        return False
