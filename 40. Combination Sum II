class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        res, size = set(), len(candidates)
        
        def myDFS(cur, idx, target):
            if target == 0:
                res.add(tuple(sorted(cur)))
                return
            
            if target < 0:
                return
            
            for i in range(idx, size):
                myDFS(cur+[candidates[i]], i+1, target-candidates[i])
        
        myDFS([], 0, target)
        return [i for i in res]


class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        candidates = sorted(candidates)
        res, size = [], len(candidates)
        
        def myDFS(cur, idx, target):            
            for i in range(idx, size):
                if i > idx and candidates[i] == candidates[i-1]: continue
                if target-candidates[i] == 0:
                    res.append(cur+[candidates[i]])
                    break
                if target-candidates[i] < 0: break
                myDFS(cur+[candidates[i]], i+1, target-candidates[i])
        
        myDFS([], 0, target)
        return res
