class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        left_max = [0]
        for index in range(1, len(height)):
            left_max.append(max(left_max[-1], height[index-1]))

        right_max, result = 0, 0
        for index in range(len(height)-1, -1, -1):
            result += max(min(left_max[index], right_max)-height[index], 0)
            right_max = max(height[index], right_max)

        return result

class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        if not height: return 0
        
        left, right = 0, len(height)-1
        left_max, right_max = height[0], height[-1]
        
        result = 0
        while left < right:
            left_max, right_max = max(height[left], left_max), max(height[right], right_max)
            if left_max <= right_max:
                result += max(0, left_max-height[left])
                left += 1
            else:
                result += max(0, right_max-height[right])
                right -= 1
        
        return result
