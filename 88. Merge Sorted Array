class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        
        index_nums1, index_nums2, index = m-1, n-1, m+n-1
        
        while index_nums1 >= 0 and index_nums2 >= 0:
            if nums1[index_nums1] < nums2[index_nums2]:
                nums1[index] = nums2[index_nums2]
                index_nums2 -= 1
            else:
                nums1[index] = nums1[index_nums1]
                index_nums1 -= 1
            
            index -= 1
        
        while index_nums2 >= 0:
            nums1[index_nums2] = nums2[index_nums2]
            index_nums2 -= 1
        
https://leetcode.com/problems/merge-sorted-array/
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        
        length,m,n = m+n-1,m-1,n-1
        
        while m >= 0 and n >= 0:
            if nums1[m] > nums2[n]:
                nums1[length] = nums1[m]
                m -= 1
            else:
                nums1[length] = nums2[n]
                n -= 1
            
            length -= 1
        
        while n >= 0:
            nums1[length] = nums2[n]
            n -= 1
            length -= 1
