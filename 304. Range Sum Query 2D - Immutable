Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12
Note:
You may assume that the matrix does not change.
There are many calls to sumRegion function.
You may assume that row1 ≤ row2 and col1 ≤ col2.


O(mn) time __init__, O(1) time sumRegion, O(n) space
class NumMatrix(object):
    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        
        if matrix:
            m, n = len(matrix), len(matrix[0])
            self.my_sum = [[0]*n for _ in range(m)]
            
            for i in range(m):
                col_sum = 0
                for j in range(n):
                    col_sum += matrix[i][j]
                    if i == 0:
                        self.my_sum[i][j] = col_sum
                    else:
                        self.my_sum[i][j] = self.my_sum[i-1][j]+col_sum

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        
        if row1 == 0 and col1 == 0:
            return self.my_sum[row2][col2]
        elif row1 == 0:
            return self.my_sum[row2][col2]-self.my_sum[row2][col1-1]
        elif col1 == 0:
            return self.my_sum[row2][col2]-self.my_sum[row1-1][col2]
        else:
            return self.my_sum[row2][col2]-self.my_sum[row2][col1-1]-self.my_sum[row1-1][col2]+self.my_sum[row1-1][col1-1]

# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)


别的解法都没看过。
