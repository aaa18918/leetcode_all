O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        my_queue = collections.deque([(root, 0)])
        res = []
        while my_queue:
            node, level = my_queue.popleft()
            
            if not node: continue
            
            if level == len(res):
                res.append([])
            
            if level%2 != 0:
                res[level] = [node.val]+res[level]
            else:
                res[level].append(node.val)
            
            my_queue.append((node.left, level+1))
            my_queue.append((node.right, level+1))
        return res
