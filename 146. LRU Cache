class CacheNode(object):
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None

class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.capacity = capacity
        self.occupied = 0
        self.head = CacheNode(0, 0)
        self.tail = CacheNode(0, 0)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.hash_table = {}

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        
        if key not in self.hash_table:
            return -1
        
        cache_node = self.hash_table[key]
        self.moveNodeToHead(cache_node)
        return cache_node.val

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        
        if key in self.hash_table:
            cache_node = self.hash_table[key]
            self.moveNodeToHead(cache_node)
            cache_node.val = value
        else:
            cache_node = CacheNode(key, value)
            if self.occupied < self.capacity:
                self.insertNode(cache_node)
                self.occupied += 1
            else:
                self.removeLeastRecentlyUsedCache()
                self.insertNode(cache_node)
                
            self.hash_table[key] = cache_node
        
    def moveNodeToHead(self, cache_node):
        cache_node.prev.next, cache_node.next.prev = cache_node.next, cache_node.prev
        temp = self.head.next
        self.head.next,temp.prev = cache_node, cache_node
        cache_node.prev, cache_node.next = self.head, temp

    def insertNode(self, cache_node):
        temp = self.head.next
        self.head.next, temp.prev = cache_node, cache_node
        cache_node.prev, cache_node.next = self.head, temp
    
    def removeLeastRecentlyUsedCache(self):
        removed_key = self.tail.prev.key
        del self.hash_table[removed_key]
        self.tail.prev = self.tail.prev.prev
        self.tail.prev.next = self.tail

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
