Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        res, my_stack = [], [(root, 0)]
        while my_stack:
            node, level = my_stack.pop()
            if not node: continue
            if level == len(res):
                res.append([])
            
            res[level].append(node.val)
            my_stack.append((node.right, level+1))
            my_stack.append((node.left, level+1))
        return res


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root:
            return []
        
        res = []
        my_queue = collections.deque([(root, 0)])
        while my_queue:
            node, level = my_queue.popleft()
            if level == len(res):
                res.append([])
            
            res[level].append(node.val)
            if node.left:
                my_queue.append((node.left, level+1))
            
            if node.right:
                my_queue.append((node.right, level+1))
        
        return res
