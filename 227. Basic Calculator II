Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division should truncate toward zero.

Example 1:

Input: "3+2*2"
Output: 7
Example 2:

Input: " 3/2 "
Output: 1
Example 3:

Input: " 3+5 / 2 "
Output: 5
Note:

You may assume that the given expression is always valid.
Do not use the eval built-in library function.


O(n) time, O(n) space
class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        sign, my_stack, i, size, num, is_prev_op_m_or_d = 1, [], 0, len(s), 0, False
        
        while i < size:
            if s[i] in '+-':
                my_stack.append(sign*num)
                num = 0
                is_prev_op_m_or_d = False
                sign = 1 if s[i] == '+' else -1
                i += 1
            elif s[i] in '*/':
                left_num = sign*num if not is_prev_op_m_or_d else my_stack.pop()
                right_num, op = 0, s[i]
                sign, num = 1, 0
                is_prev_op_m_or_d = True
                i += 1
                while i < size and s[i] not in "+-*/":
                    if '0' <= s[i] <= '9':
                        right_num = right_num*10+ord(s[i])-ord('0')
                    i += 1
                
                if op == '*':
                    my_stack.append(left_num*right_num)
                else:
                    res = left_num/right_num if left_num > 0 and right_num > 0 else -(abs(left_num)/abs(right_num))
                    my_stack.append(res)
            elif '0' <= s[i] <= '9':
                num = num*10+ord(s[i])-ord('0')
                i += 1
            else:
                i += 1
        
        return sum(my_stack)+sign*num


注意连续两个乘号会导致直接left_num = sign*num出错，比如：2*3*4会等于6。虽然不知道为啥算出来一个6。


O(n) time, O(n) space
class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        compacted_s = ''
        for char in s:
            if char != ' ':
                compacted_s += char
        
        if not compacted_s:
            return 0
        
        def getANum(idx): 
            i = idx
            while i+1 < len(compacted_s) and compacted_s[i+1] not in '+-*/':
                i += 1
            
            return int(compacted_s[idx:i+1]), i+1
        
        my_stack, idx = [], 0
        num, idx = getANum(0)
        my_stack.append(num)
        
        while idx < len(compacted_s):
            operator = compacted_s[idx]
            idx += 1
            
            num, idx = getANum(idx)
            
            if operator == '+':
                my_stack.append(num)
            elif operator == '-':
                my_stack.append('-')
                my_stack.append(num)
            elif operator == '*':
                my_stack[-1] *= num
            else:
                a = my_stack.pop()
                if a < 0 < num and num < 0 < a:
                    my_stack.append(-(abs(a)/abs(num)))
                else:
                    my_stack.append((abs(a)/abs(num)))
        
        sign, res = 1, 0
        for item in my_stack:
            if item == '-':
                sign = -1
            else:
                res += sign*item
                sign = 1
        
        return res


把'-'和int类型一起放在了list里，暂时不知道怎么改进。
