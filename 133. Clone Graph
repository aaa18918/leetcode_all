Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.

Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

 

Example 1:
Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
Example 2:
Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.
Example 3:

Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.
Example 4:
Input: adjList = [[2],[1]]
Output: [[2],[1]]
 

Constraints:

1 <= Node.val <= 100
Node.val is unique for each node.
Number of Nodes will not exceed 100.
There is no repeated edges and no self-loops in the graph.
The Graph is connected and all nodes can be visited starting from the given node.


O(n) time, O(n) space
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, neighbors):
        self.val = val
        self.neighbors = neighbors
"""
class Solution(object):
    def cloneGraph(self, node):
        """
        :type node: Node
        :rtype: Node
        """
        
        if not node:
            return None
        
        new_node = Node(node.val, [])
        created, my_stack = {node: new_node}, [node]
        
        while my_stack:
            cur_node = my_stack.pop()
            cur_new_node = created[cur_node]
            
            for neighbor in cur_node.neighbors:
                if neighbor in created:
                    cur_new_node.neighbors.append(created[neighbor])
                else:
                    new_neighbor = Node(neighbor.val, [])
                    cur_new_node.neighbors.append(new_neighbor)
                    created[neighbor] = new_neighbor
                    my_stack.append(neighbor)
        
        return new_node


O(n) time, O(???) space
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node:
            return None
        
        hash_table = {}
        
        def myDFS(node, new_node):
            hash_table[node.label] = new_node
            
            for neighbor in node.neighbors:
                if neighbor.label in hash_table:
                    new_node.neighbors.append(hash_table[neighbor.label])
                else:
                    new_neighbor = UndirectedGraphNode(neighbor.label)
                    new_node.neighbors.append(new_neighbor)
                    myDFS(neighbor, new_neighbor)
        
        new_node = UndirectedGraphNode(node.label)
        myDFS(node, new_node)
        return new_node


O(n) time, O(n) space
# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node:
            return None
        
        res = UndirectedGraphNode(node.label)
        hash_table = {node.label: res}
        
        my_queue = collections.deque([node])
        while my_queue:
            old_node = my_queue.popleft()
            new_node = hash_table[old_node.label]
            
            for neighbor in old_node.neighbors:
                if neighbor.label in hash_table:
                    new_node.neighbors.append(hash_table[neighbor.label])
                else:
                    new_neighbor = UndirectedGraphNode(neighbor.label)
                    new_node.neighbors.append(new_neighbor)
                    hash_table[neighbor.label] = new_neighbor
                    my_queue.append(neighbor)
        
        return res
