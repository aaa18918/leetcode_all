class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        
        my_stack = []
        parentheses = set("(){}[]")
        parentheses_mapping = {')':'(', '}':'{', ']':'['}
        
        for char in s:
            if char not in parentheses: return False
        
            if char in "({[":
                my_stack.append(char)
            else:
                if not my_stack or my_stack[-1] != parentheses_mapping[char]:
                    return False
                else:
                    my_stack.pop()
        
        return True if not my_stack else False

https://leetcode.com/problems/valid-parentheses/
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        
        my_stack = []
        
        for char in s:
            if char == '(' or char  == '{' or char =='[':
                my_stack.append(char)
            else:
                if my_stack == []:
                    return False
                    
                if char == ')':
                    if my_stack.pop() != '(':
                        return False
                elif char == '}':
                    if my_stack.pop() != '{':
                        return False                    
                elif char == ']':
                    if my_stack.pop() != '[':
                        return False                    
        
        if my_stack == []:
            return True
        else:
            return False


class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        
        my_stack = []
        for c in s:
            if c in "({[":
                my_stack.append(c)
            else:
                if c == ')':
                    if not my_stack or my_stack[-1] != '(':
                        return False
                    else:
                        my_stack.pop()
                elif c == '}':
                    if not my_stack or my_stack[-1] != '{':
                        return False
                    else:
                        my_stack.pop()
                else:
                    if not my_stack or my_stack[-1] != '[':
                        return False
                    else:
                        my_stack.pop()
        return not my_stack
