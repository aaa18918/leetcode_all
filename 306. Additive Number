Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

 

Example 1:

Input: "112358"
Output: true
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
Example 2:

Input: "199100199"
Output: true
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199
 

Constraints:

num consists only of digits '0'-'9'.
1 <= num.length <= 35
Follow up:
How would you handle overflow for very large input integers?


O(???) time, O(???) space
class Solution(object):
    def isAdditiveNumber(self, num):
        """
        :type num: str
        :rtype: bool
        """
        
        def myHelp(prev_sum, prev_num, left):
            if left >= len(num):
                return True
            
            if num[left] == '0':
                return prev_sum == 0 and myHelp(prev_num, 0, left+1)
            
            for idx in range(left, len(num)):
                cur_num = int(num[left:idx+1])

                if prev_sum == cur_num:
                    return myHelp(prev_num+cur_num, cur_num, idx+1)
                elif prev_sum < cur_num:
                    return False
            
            return False
        
        for i in range(len(num)-2):
            if num[0] == '0' and i > 0:
                return False
            
            for j in range(i+1, len(num)-1):
                if num[i+1] == '0':
                    if myHelp(int(num[:i+1]), 0, i+2):
                        return True
                    else:
                        break
                
                left, right = int(num[:i+1]), int(num[i+1:j+1])
                
                if myHelp(left+right, right, j+1):
                    return True
        
        return False
