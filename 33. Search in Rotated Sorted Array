class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        def helper(left, right):
            if left > right:
                return -1
            
            if left == right:
                return left if nums[left] == target else -1
            
            mid = (left+right)/2
            if nums[mid] == target:
                return mid
            else:
                return max(helper(left, mid-1), helper(mid+1, right))
        
        return helper(0, len(nums)-1)

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        if not nums: return -1
        
        left, right = 0, len(nums)-1
        
        while left < right:
            mid = (left+right)/2
            
            if nums[mid] == target:
                return mid
            
            if nums[mid] < nums[0]:
                if nums[mid] <= target <= nums[-1]:
                    left = mid+1
                else:
                    right = mid-1
            else:
                if nums[0] <= target <= nums[mid]:
                    right = mid-1
                else:
                    left = mid+1
                    
        return left if nums[left] == target else -1
