O(n) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        
        if k < 2: return head
        
        dummy_head = ListNode(0)
        dummy_head.next = head
        slow, fast = dummy_head, dummy_head
        while slow.next:
            count = k
            while count > 0 and fast.next:
                fast = fast.next
                count -= 1
            
            if count > 0: break
            
            h, tail, end = slow.next, fast, fast.next
            p, q = h, h.next
            while q is not end:
                temp = q.next
                q.next = p
                p, q = q, temp
            
            slow.next = tail
            h.next = end
            slow, fast = h, h
        return dummy_head.next
