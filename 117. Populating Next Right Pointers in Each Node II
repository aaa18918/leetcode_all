O(n) time, O(1) space
# Definition for binary tree with next pointer.
# class TreeLinkNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#         self.next = None

class Solution:
    # @param root, a tree link node
    # @return nothing
    def connect(self, root):
        p, prev, next_head = root, None, None
        while p or next_head:
            while p:
                if p.left:
                    if not prev:
                        prev, next_head = p.left, p.left
                    else:
                        prev.next = p.left
                        prev = prev.next
            
                if p.right:
                    if not prev:
                        prev, next_head = p.right, p.right
                    else:
                        prev.next = p.right
                        prev = prev.next
            
                p = p.next
            
            p = next_head
            prev, next_head = None, None


O(n) time, O(1) space
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, left, right, next):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        
        next_level = root
        while next_level:
            p, next_level, prev = next_level, None, None
            while p:
                if prev:
                    if p.left and p.right:
                        prev.next = p.left
                        prev = p.right
                    elif p.left:
                        prev.next = p.left
                        prev = p.left
                    elif p.right:
                        prev.next = p.right
                        prev = p.right
                else:
                    if p.left and p.right:
                        prev, next_level = p.right, p.left
                    elif p.left:
                        prev, next_level = p.left, p.left
                    elif p.right:
                        prev, next_level = p.right, p.right

                if p.left and p.right:
                    p.left.next = p.right

                p = p.next
        
        return root
