Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.

Example:

Input: n = 12, primes = [2,7,13,19]
Output: 32 
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 
             super ugly numbers given primes = [2,7,13,19] of size 4.
Note:

1 is a super ugly number for any given primes.
The given numbers in primes are in ascending order.
0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.
The nth super ugly number is guaranteed to fit in a 32-bit signed integer.


O(kn) time, O(k+n) space
class Solution(object):
    def nthSuperUglyNumber(self, n, primes):
        """
        :type n: int
        :type primes: List[int]
        :rtype: int
        """
        
        ugly = [sys.maxint]*n
        idx = [0]*len(primes)
        ugly[0] = 1
        
        for i in range(1, len(ugly)):
            for j in range(len(primes)):
                ugly[i] = min(ugly[i], primes[j]*ugly[idx[j]])
            
            for j in range(len(primes)):
                while primes[j]*ugly[idx[j]] <= ugly[i]:
                    idx[j] += 1
        
        return ugly[-1]


还有O(nlgk)的解法懒得看！
