O(n^2) time, O(n) space
class Solution(object):
    def maxPoints(self, points):
        """
        :type points: List[Point]
        :rtype: int
        """
        
        def getGCD(a, b):
            while b > 0:
                a, b = b, a%b
            
            return a
        
        res = 0
        for i in range(len(points)):
            overlap = 0
            hash_table = collections.defaultdict(int)
            for j in range(i+1, len(points)):
                x_diff, y_diff = points[i][0]-points[j][0], points[i][1]-points[j][1]
                if x_diff == 0 and y_diff == 0:
                    overlap += 1
                elif x_diff == 0:
                    hash_table[(0, 1)] += 1
                elif y_diff == 0:
                    hash_table[(1, 0)] += 1
                else:
                    gcd = getGCD(abs(x_diff), abs(y_diff))
                    x_diff, y_diff = x_diff/gcd, y_diff/gcd
                    if x_diff < 0:
                        x_diff, y_diff = -x_diff, -y_diff
                    
                    hash_table[(x_diff, y_diff)] += 1
            
            for count in hash_table.itervalues():
                res = max(res, count+overlap)
            
            res = max(res, overlap)
        
        return res+1 if points else 0
