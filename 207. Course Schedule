O(max(numCourses, len(prerequisites))) time, O(max(numCourses, len(prerequisites))) space
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        
        adjacency_list = collections.defaultdict(list)
        
        for pre in prerequisites:
            adjacency_list[pre[0]].append(pre[1])
        
        visited = [0 for c in range(numCourses)]
        def myDFS(c):
            if c not in adjacency_list: return True
            if visited[c] == -1: return False
            if visited[c] == 1: return True
            
            pre_list = adjacency_list[c]
            visited[c] = -1
            for pre_c in pre_list:
                if not myDFS(pre_c):
                    return False
            
            visited[c] = 1
            return True
        
        for c in range(numCourses):
            if c not in adjacency_list: continue
            if not myDFS(c):
                return False
        
        return True


O(???) time, O(max(numCourses, len(prerequisites))) space
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        
        adjacency_list = collections.defaultdict(set)
        num_set = set([num for num in range(numCourses)])
        for pre in prerequisites:
            adjacency_list[pre[0]].add(pre[1])
            if pre[0] in num_set:
                num_set.remove(pre[0])
        
        cur = list(num_set)
        while cur:
            temp = []
            for course in adjacency_list:
                for c in cur:
                    if c in adjacency_list[course]:
                        adjacency_list[course].remove(c)
                        if not adjacency_list[course]:
                            temp.append(course)
            
            for course in temp:
                del adjacency_list[course]
            
            cur = temp
        
        return not adjacency_list
