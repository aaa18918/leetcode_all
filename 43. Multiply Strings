O(mn) time, O(mn) space
class Solution(object):
    def multiply(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        
        cal = []
        for idx in range(len(num2)-1, -1, -1):
            cal_idx = len(num2)-1-idx
            for j in range(len(num1)-1, -1, -1):
                if cal_idx >= len(cal):
                    cal.append(0)
                
                cur = int(num2[idx])*int(num1[j])
                cal[cal_idx] += cur%10
                
                if cur >= 10:
                    if cal_idx+1 >= len(cal):
                        cal.append(0)
                    
                    cal[cal_idx+1] += cur/10
                
                cal_idx += 1
        
        idx = 0
        while idx < len(cal):
            if cal[idx] >= 10:
                if idx == len(cal)-1:
                    cal.append(0)
                
                cal[idx+1] += cal[idx]/10
            
            cal[idx] %= 10
            
            idx += 1
        
        while cal and cal[-1] == 0:
            cal.pop()
        
        res = ''
        for idx in range(len(cal)-1, -1, -1):
            res += str(cal[idx])
        
        return res if res else '0'

karatsuba-algorithm
https://www.geeksforgeeks.org/karatsuba-algorithm-for-fast-multiplication-using-divide-and-conquer-algorithm/
O(max(m, n)^log2(3)) time, O(???) space
class Solution(object):
    def multiply(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        
        def addUp(num1, num2):
            carry, res, idx1, idx2 = 0, '', len(num1)-1, len(num2)-1
            while idx1 >= 0 or idx2 >= 0:
                if idx1 >= 0 and idx2 >= 0:
                    cur = int(num1[idx1])+int(num2[idx2])+carry
                    idx1, idx2 = idx1-1, idx2-1
                elif idx1 >= 0:
                    cur = int(num1[idx1])+carry
                    idx1 -= 1
                elif idx2 >= 0:
                    cur = int(num2[idx2])+carry
                    idx2 -= 1
                
                res += str(cur%10)
                carry = cur/10
            
            if carry != 0:
                res += '1'
            
            return res[::-1]
        
        def multiplication(num1, num2):     
            if len(num1) < len(num2):
                num1 = '0'*(len(num2)-len(num1))+num1
            else:
                num2 = '0'*(len(num1)-len(num2))+num2
            
            size = len(num1)
            
            if size == 0:
                return 0
            elif size == 1:
                return int(num1[0])*int(num2[0])
            
            mid = size/2
            
            num1_left, num1_right = num1[:size-mid], num1[size-mid:]
            num2_left, num2_right = num2[:size-mid], num2[size-mid:]
            
            return (10**(2*mid)-10**mid)*multiplication(num1_left, num2_left)-(10**mid-1)*multiplication(num1_right, num2_right)+10**mid*multiplication(addUp(num1_left, num1_right), addUp(num2_left, num2_right))
        
        return str(multiplication(num1, num2))
