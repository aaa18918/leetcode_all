Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:

Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
Example 2:

Input: nums = [-2, -1, 2, 1], k = 1
Output: 2 
Explanation: The subarray [-1, 2] sums to 1 and is the longest.
Follow Up:
Can you do it in O(n) time?


class Solution(object):
    def maxSubArrayLen(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        hash_table = {0: -1}
        res, cur_sum = 0, 0
        
        for idx, num in enumerate(nums):
            cur_sum += num
            if cur_sum-k in hash_table:
                res = max(res, idx-hash_table[cur_sum-k])
            
            if cur_sum not in hash_table:
                hash_table[cur_sum] = idx
        
        return res
