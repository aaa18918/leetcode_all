# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        
        bstList = self.convertBSTToList(root)
        return bstList[k-1]
    
    def convertBSTToList(self, root):
        if not root:
            return []
        
        res = [root.val]
        if root.left:
            res = self.convertBSTToList(root.left)+res
        if root.right:
            res = res+self.convertBSTToList(root.right)
        
        return res

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        
        for val in self.yieldNode(root):
            if k == 1: return val
            else: k -= 1
    
    def yieldNode(self, root):
        if root:
            if root.left:
                for val in self.yieldNode(root.left):
                    yield val
                
            yield root.val
            
            if root.right:
                for val in self.yieldNode(root.right):
                    yield val

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """

        self.k = k
        self.result = 0
        
        def helper(root):
            if root:
                helper(root.left)
                self.k -= 1
                if self.k == 0:
                    self.result = root.val
                helper(root.right)
        
        helper(root)
        return self.result

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        
        my_stack = []
        while root or my_stack:
            while root:
                my_stack.append(root)
                root = root.left
            
            root = my_stack.pop()
            k -= 1
            if k == 0: return root.val
            root = root.right


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        
        my_stack, node = [], root
        
        while node:
            my_stack.append(node)
            node = node.left
            
        while my_stack:
            if not node:
                node = my_stack.pop()
                k -= 1
                if k == 0:
                    return node.val
            
            node = node.right
            while node:
                my_stack.append(node)
                node = node.left


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        
        def yieldNodeVal(node):
            if node.left:
                for val in yieldNodeVal(node.left):
                    yield val
            
            yield node.val
            
            if node.right:
                for val in yieldNodeVal(node.right):
                    yield val
        
        for val in yieldNodeVal(root):
            k -= 1
            if k == 0:
                return val
