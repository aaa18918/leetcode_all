O(26nk) time, O(26nk) space
class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        
        wordSet = set(wordList)
        
        if endWord not in wordSet:
            return 0
        
        lowercase = string.ascii_lowercase
        myQueue = collections.deque([(beginWord, 1)])
        
        while myQueue:
            word, dist = myQueue.popleft()
            for idx in range(len(word)):
                for char in lowercase:
                    if char != word[idx]:
                        newWord = word[:idx]+char+word[idx+1:]
                        if newWord == endWord:
                            return dist+1
                        elif newWord in wordSet:
                            myQueue.append((newWord, dist+1))
                            wordSet.remove(newWord)
        
        return 0


不太清楚为什么，方法有点慢，下次需要再看下别的方法都是怎么做的啊。
