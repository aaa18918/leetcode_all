Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]


O(n) time, O(nlgn) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        
        if not root:
            return []
        
        res = []
        
        stack = [([], root, sum)]
        while stack:
            cur_path, node, target = stack.pop()
            if not node.left and not node.right:
                if node.val == target:
                    res.append(cur_path+[node.val])
            else:
                if node.left:
                    stack.append((cur_path+[node.val], node.left, target-node.val))
                if node.right:
                    stack.append((cur_path+[node.val], node.right, target-node.val))
        
        return res


O(n) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        
        if not root:
            return []
        
        self.res = []
        
        def myHelp(node, target, cur_path):
            if not node.left and not node.right:
                if target == node.val:
                    self.res.append(cur_path+[node.val])
                
                return
            
            if node.left:
                myHelp(node.left, target-node.val, cur_path+[node.val])
            
            if node.right:
                myHelp(node.right, target-node.val, cur_path+[node.val])
        
        myHelp(root, sum, [])
        
        return self.res
