O(n) time, O(1) space
class Solution(object):
    def shortestWordDistance(self, words, word1, word2):
        """
        :type words: List[str]
        :type word1: str
        :type word2: str
        :rtype: int
        """
        
        res, prev_word, prev_idx = sys.maxint, '', -1
        for idx in range(len(words)):
            if words[idx] in (word1, word2):
                if prev_idx >= 0 and (word1 == word2 or prev_word != words[idx]):
                    res = min(res, idx-prev_idx)
                
                prev_word, prev_idx = words[idx], idx
        
        return res if res != sys.maxint else 0


O(n) time, O(1) space
class Solution(object):
    def shortestWordDistance(self, words, word1, word2):
        """
        :type words: List[str]
        :type word1: str
        :type word2: str
        :rtype: int
        """
        
        res = sys.maxint
        
        if word1 == word2:
            idx = -1
            for i in range(len(words)):
                if words[i] == word1:
                    if idx >= 0:
                        res = min(res, i-idx)
                    
                    idx = i
        else:
            idx1, idx2 = -1, -1
            for i in range(len(words)):
                if words[i] == word1:
                    if idx2 >= 0:
                        res = min(res, i-idx2)
                    
                    idx1 = i
                elif words[i] == word2:
                    if idx1 >= 0:
                        res = min(res, i-idx1)
                    
                    idx2 = i
            
        return res if res != sys.maxint else 0
