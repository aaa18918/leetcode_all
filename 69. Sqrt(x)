Share
Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:

Input: 4
Output: 2
Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.


Depends on the condition for convergence, approximately O(lgn) time, O(1) space
class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        
        res = 1
        delta = (res**2-x)*1.0/(2*res)
        while abs(delta) >= 0.5:
            res -= delta
            delta = (res**2-x)/(2*res)
        
        res = int(res)
        for r in (res+1, res, res-1):
            if r**2 <= x:
                return r


O(lgn) time, O(1) space
class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        
        left, right = 0, x
        while left <= right:
            mid = (left+right)/2
            cal = mid**2
            if cal == x:
                return mid
            elif cal < x:
                left = mid+1
            else:
                right = mid-1
        
        return right
