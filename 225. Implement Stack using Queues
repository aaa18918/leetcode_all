class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.my_queue = []
        

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: void
        """
        
        self.my_queue.append(x)
        

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        
        elem = self.my_queue[-1]
        self.my_queue = self.my_queue[:-1]
        return elem

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        
        return self.my_queue[-1]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        
        return True if not self.my_queue else False
        


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()



https://leetcode.com/problems/implement-stack-using-queues/

class Stack(object):
    def __init__(self):
        """
        initialize your data structure here.
        """
        
        self.queue = []

    def push(self, x):
        """
        :type x: int
        :rtype: nothing
        """
        
        self.queue.append(x)
        
    def pop(self):
        """
        :rtype: nothing
        """
        
        top = self.queue[len(self.queue)-1]
        self.queue = self.queue[:len(self.queue)-1]
        return top

    def top(self):
        """
        :rtype: int
        """
        
        return self.queue[len(self.queue)-1]

    def empty(self):
        """
        :rtype: bool
        """
        
        if self.queue == []:
            return True
        else:
            return False
 
Using pop operation of deque may invalid:
from collections import deque
class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.my_queue = deque()
        

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: void
        """
        
        self.my_queue.append(x)
        

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        
        return self.my_queue.pop()

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        
        return self.my_queue[-1]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        
        return True if not self.my_queue else False
        


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()

from collections import deque

class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.my_queue = deque()

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: void
        """
        
        self.my_queue.append(x)

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        
        for i in range(len(self.my_queue)-1):
            self.my_queue.append(self.my_queue.popleft())
        
        return self.my_queue.popleft()

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        
        return self.my_queue[-1]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        
        return True if not self.my_queue else False

# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()

from collections import deque

class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.my_queue = deque()

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: void
        """
        
        self.my_queue.append(x)
        for _ in range(len(self.my_queue)-1):
            self.my_queue.append(self.my_queue.popleft())
        

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        
        return self.my_queue.popleft()

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        
        return self.my_queue[0]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        
        return True if not self.my_queue else False

# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
