O(lgn) time, O(1) space
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        
        def findKthSmallest(nums1, nums2, k):
            if len(nums1) < len(nums2):
                nums1, nums2 = nums2, nums1
            
            if not nums2: return nums1[k-1]
            
            if k == 1: return min(nums1[0], nums2[0])
            
            mid = k/2
            len_nums1, len_nums2 = len(nums1), len(nums2)
            mid = mid if mid < len_nums2 else len_nums2
            
            if nums1[mid-1] < nums2[mid-1]:
                return findKthSmallest(nums1[mid:], nums2, k-mid)
            else:
                return findKthSmallest(nums1, nums2[mid:], k-mid)
        
        total = len(nums1)+len(nums2)
        
        return findKthSmallest(nums1, nums2, total/2+1) if total%2 == 1 else (findKthSmallest(nums1, nums2, total/2)+findKthSmallest(nums1, nums2, total/2+1))/2.0


Iterative:
https://discuss.leetcode.com/topic/3367/share-my-iterative-solution-with-o-log-min-n-m/2
