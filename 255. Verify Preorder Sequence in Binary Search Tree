Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.

You may assume each number in the sequence is unique.

Consider the following binary search tree: 

     5
    / \
   2   6
  / \
 1   3
Example 1:

Input: [5,2,6,1,3]
Output: false
Example 2:

Input: [5,2,1,3,6]
Output: true
Follow up:
Could you do it using only constant space complexity?


O(n) time, O(n) space
class Solution(object):
    def verifyPreorder(self, preorder):
        """
        :type preorder: List[int]
        :rtype: bool
        """
        
        my_stack, low_boundry = [], -sys.maxint-1
        for num in preorder:
            if num < low_boundry:
                return False
            
            while my_stack and num > my_stack[-1]:
                low_boundry = my_stack.pop()
            
            my_stack.append(num)
        
        return True


O(n) time, O(1) space
Reuse the preorder list.
