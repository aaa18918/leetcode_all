Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


O(mn) time, O(mn) space
class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        
        if not matrix:
            return []
        
        upper_bound, lower_bound, left_bound, right_bound = -1, len(matrix), -1, len(matrix[0])
        
        res = []
        x, y = 0, 0
        while upper_bound+1 < lower_bound and left_bound+1 < right_bound:
            while y < right_bound:
                res.append(matrix[x][y])
                y += 1
            
            x += 1
            y -= 1
            upper_bound += 1
            
            if upper_bound+1 == lower_bound:
                break
            
            while x < lower_bound:
                res.append(matrix[x][y])
                x += 1
            
            x -= 1
            y -= 1
            right_bound -= 1
            
            if left_bound+1 == right_bound:
                break
            
            while y > left_bound:
                res.append(matrix[x][y])
                y -= 1
            
            x -= 1
            y += 1
            lower_bound -= 1
            
            if upper_bound+1 == lower_bound:
                break
            
            while x > upper_bound:
                res.append(matrix[x][y])
                x -= 1
            
            x += 1
            y += 1
            left_bound += 1
            
            if left_bound+1 == right_bound:
                break
        
        return res
