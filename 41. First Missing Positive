Given an unsorted integer array, find the smallest missing positive integer.

Example 1:

Input: [1,2,0]
Output: 3
Example 2:

Input: [3,4,-1,1]
Output: 2
Example 3:

Input: [7,8,9,11,12]
Output: 1
Note:

Your algorithm should run in O(n) time and uses constant extra space.


O(n) time, O(1) space
class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        idx, size = 0, len(nums)
        
        while idx < size:
            if nums[idx] != idx+1 and 0 < nums[idx] <= size and nums[nums[idx]-1] != nums[idx]:
                nums[nums[idx]-1], nums[idx] = nums[idx], nums[nums[idx]-1]
            else:
                idx += 1
        
        for idx in range(size):
            if nums[idx] != idx+1:
                return idx+1
        
        return size+1
