Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        
        counter_p, len_p = collections.Counter(p), len(p)
        count_p = len_p
        res = []
        for i in range(len(s)):
            if i >= len_p:
                if s[i-len_p] in counter_p:
                    counter_p[s[i-len_p]] += 1
                    if counter_p[s[i-len_p]] > 0: count_p += 1

            if s[i] in counter_p:
                counter_p[s[i]] -= 1
                if counter_p[s[i]] >= 0: count_p -= 1
                if count_p == 0:
                    res.append(i-len_p+1)
        return res


class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        
        counter_p, len_p = collections.Counter(p), len(p)
        count_p = len_p
        res = []
        for i in range(len(s)):
            if s[i] in counter_p:
                counter_p[s[i]] -= 1
                if counter_p[s[i]] >= 0: count_p -= 1

            if i >= len_p:
                if s[i-len_p] in counter_p:
                    counter_p[s[i-len_p]] += 1
                    if counter_p[s[i-len_p]] > 0: count_p += 1

            if count_p == 0:
                res.append(i-len_p+1)
        return res
