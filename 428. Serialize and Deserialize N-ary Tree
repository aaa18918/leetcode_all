O(n) time, O(n) space serialize, O(n) time, O(n) space deserialize.
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: Node
        :rtype: str
        """
        
        if not root:
            return []
        
        res = [root.val]
        for node in root.children:
            res.append(self.serialize(node))
        
        return res

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: Node
        """
        
        if not data:
            return None
        
        root = Node(data[0], [])
        for idx in range(1, len(data)):
            root.children.append(self.deserialize(data[idx]))
        
        return root

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))

没有看别的解法，还有好多各种不同序列化的方法。
            return node.val, children_vals好多
            return node.val, children_vals
