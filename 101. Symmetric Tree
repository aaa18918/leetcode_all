O(n) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        def myHelp(left, right):
            if not left and not right:
                return True
            elif not left or not right:
                return False
            
            return left.val == right.val and myHelp(left.left, right.right) and myHelp(left.right, right.left)
        
        return not root or myHelp(root.left, root.right)


O(n) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        def myHelp(left, right):
            if not left and not right:
                return True
            elif not left or not right or left.val != right.val:
                return False
            
            return myHelp(left.left, right.right) and myHelp(left.right, right.left)
        
        return myHelp(root.left, root.right) if root else True


O(n) time, O(lgn) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        my_stack = [(root, root)]
        while my_stack:
            left, right = my_stack.pop()
            if not left and not right: continue
            if not left or not right or left.val != right.val: return False
            my_stack.append((left.left, right.right))
            my_stack.append((left.right, right.left))
        return True
