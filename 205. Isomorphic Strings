Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
Note:
You may assume both s and t have the same length.


O(n) time, O(26) space
class Solution(object):
    def isIsomorphic(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        
        if len(s) != len(t):
            return False
        
        my_map, my_set = {}, set()
        for idx in range(len(s)):
            if s[idx] in my_map:
                if my_map[s[idx]] != t[idx]:
                    return False
            else:
                if t[idx] in my_set:
                    return False
                else:
                    my_map[s[idx]] = t[idx]
                    my_set.add(t[idx])
        
        return True
