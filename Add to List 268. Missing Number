class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        n = len(nums)
        return n*(n+1)/2-sum(nums)


https://leetcode.com/problems/missing-number/
class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        return len(nums)*(len(nums)+1)/2-sum(nums)

class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        a = reduce(lambda x, y: x^y, nums)
        b = reduce(lambda x, y: x^y, [i for i in range(len(nums)+1)])
        
        return a^b

class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        a = set(nums)
        b = set([i for i in range(len(nums)+1)])
        
        return b.difference(a).pop()

class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        a = reduce(operator.xor, nums)
        b = reduce(operator.xor, [i for i in range(len(nums)+1)])
        
        return a^b

class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        return reduce(operator.xor, nums + [i for i in range(len(nums)+1)])
