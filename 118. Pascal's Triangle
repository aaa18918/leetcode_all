O(numRows^2) time, O(numRows^2) space
Acutally the Pascal's Triangle problem can be solved by utilize the offset property:
    1 3 3 1 0 
 +  0 1 3 3 1
 =  1 4 6 4 1

class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        
        res = [[1]]
        for index in range(1, numRows):
            res.append(map(lambda x, y: x+y, res[-1]+[0], [0]+res[-1]))
        
        return res[:numRows]
 
 
 O(numRows^2) time, O(numRows^2) space
 class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        
        res = [[1], [1, 1]]
        for i in range(2, numRows):
            res.append([1])
            for j in range(1, i):
                res[i].append(res[i-1][j-1]+res[i-1][j])
            res[i].append(1)
        
        return res[:numRows]
