# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        if not head: return head
        
        slow, fast = head, head
        while fast.next and fast.next.next:
            slow, fast = slow.next, fast.next.next
            if slow is fast:
                break
        
        if fast.next and fast.next.next:
            slow = head
            while slow is not fast:
                slow, fast = slow.next, fast.next
            
            return slow
        
        return None
