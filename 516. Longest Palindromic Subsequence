Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
Example 2:
Input:

"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".


O(n^2) time, O(n) space
class Solution(object):
    def longestPalindromeSubseq(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        res = [0 for _ in range(len(s))]
        prev = [0 for _ in range(len(s))]
        
        for i in range(len(s)):
            for j in range(i, -1, -1):
                if i == j:
                    res[j] = 1
                elif s[j] == s[i]:
                    res[j] = prev[j+1]+2
                else:
                    res[j] = max(res[j+1], prev[j])
            
            if i != len(s)-1:
                res, prev = prev, res
        
        return res[0] if s else 0
