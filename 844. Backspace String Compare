Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".
Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".
Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".
Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".
Note:

1 <= S.length <= 200
1 <= T.length <= 200
S and T only contain lowercase letters and '#' characters.
Follow up:

Can you solve it in O(N) time and O(1) space?



O(n) time, O(1) space
class Solution(object):
    def backspaceCompare(self, S, T):
        """
        :type S: str
        :type T: str
        :rtype: bool
        """
        
        idx1, idx2 = len(S)-1, len(T)-1
        while idx1 >= 0 and idx2 >= 0:
            count1, count2 = 0, 0
            while idx1 >= 0 and (S[idx1] == '#' or count1 > 0):
                count1 = count1+1 if S[idx1] == '#' else count1-1
                idx1 -= 1
            
            while idx2 >= 0 and (T[idx2] == '#' or count2 > 0):
                count2 = count2+1 if T[idx2] == '#' else count2-1
                idx2 -= 1
            
            if idx1 >= 0 and idx2 >= 0:
                if S[idx1] != T[idx2]:
                    return False
                
                idx1, idx2 = idx1-1, idx2-1
            
        count1, count2 = 0, 0
        while idx1 >= 0 and (S[idx1] == '#' or count1 > 0):
            count1 = count1+1 if S[idx1] == '#' else count1-1
            idx1 -= 1
            
        while idx2 >= 0 and (T[idx2] == '#' or count2 > 0):
            count2 = count2+1 if T[idx2] == '#' else count2-1
            idx2 -= 1
        
        return idx1 == idx2 == -1

有更短的解法没看，但是那人写的很奇怪，要先验算下。
