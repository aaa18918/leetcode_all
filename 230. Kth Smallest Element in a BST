Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note:
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?


What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently?
How would you optimize the kthSmallest routine?

Initialize a max-heap while searching the kthSmallest.
If the max-heap's size is less than k, insert the tree node's value.
If the tree node's value is smaller than the max value of the max-heap, replace them.

Every time an insertion occurs, check whether the tree node's value is smaller than the max value of the max-heap.
If yes, replace them.

Evert time a deletion happens, check whether the tree node's value is smaller than the max value of the max-heap.
If yes, reinitialize the max-heap.

The time complexity of initializing the max-heap is O(k). 
The time complexity of the insertion is O(lgk).
The time complexity of deletion is O(k).
The time complexity of looking up the kthSmallest is O(1).

The space complexity is O(k).


O(n) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        
        def yieldNodeVal(node):
            if node.left:
                for val in yieldNodeVal(node.left):
                    yield val
            
            yield node.val
            
            if node.right:
                for val in yieldNodeVal(node.right):
                    yield val
        
        for val in yieldNodeVal(root):
            k -= 1
            if k == 0:
                return val


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        
        p, my_stack = root, []
        while p or my_stack:
            while p:
                my_stack.append(p)
                p = p.left
            
            p = my_stack.pop()
            
            if k == 1:
                return p.val
            else:
                k -= 1
                p = p.right
