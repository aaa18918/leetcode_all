class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        
        if numRows == 0: return []
        res, level = [[1]], 1
        
        while level < numRows:
            pre = res[-1]
            res.append([1])
            for index in range(len(pre)-1):
                res[-1].append(pre[index]+pre[index+1])
            res[-1].append(1)
            level += 1
        
        return res

Acutally the Pascal's Triangle problem can be solved by utilize the offset property:
    1 3 3 1 0 
 +  0 1 3 3 1
 =  1 4 6 4 1

class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        
        if numRows == 0: return []
        
        res = [[1]]
        for index in range(1, numRows):
            res.append(map(lambda x, y: x+y, res[-1]+[0], [0]+res[-1]))
        
        return res
 
