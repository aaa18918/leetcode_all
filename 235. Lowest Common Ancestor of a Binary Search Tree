https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

Legacy solution:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        if root == None:
            return None
        
        if root == p or root == q:
            return root
        
        left = self.lowestCommonAncestor(root.left,p,q) 
        right = self.lowestCommonAncestor(root.right,p,q)
        
        if left != None and right != None:
            return root
        elif left == None and right == None:
            return None
        else:
            return left or right


Better solution:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        if root in (None, p, q): return root
        if (p.val-root.val)*(q.val-root.val) < 0: return root
        if p.val+q.val < 2*root.val: return self.lowestCommonAncestor(root.left, p, q)
        if p.val+q.val > 2*root.val: return self.lowestCommonAncestor(root.right, p, q)


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        while (p.val-root.val)*(q.val-root.val) > 0:
            root = [root.left, root.right][p.val > root.val]
        return root
