O(k) time put, O(k) time get, O(k) time remove, O(10000) space
class MyHashMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.record = [[] for _ in range(10000)]

    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        
        l = self.record[key%10000]
        for idx in range(len(l)):
            if l[idx][0] == key:
                l[idx] = (key, value)
                return
        
        l.append((key, value))

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        
        l = self.record[key%10000]
        for k, value in l:
            if k == key:
                return value
        
        return -1

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        
        l = self.record[key%10000]
        for idx in range(len(l)):
            if l[idx][0] == key:
                if idx != len(l)-1:
                    l[idx], l[len(l)-1] = l[len(l)-1], l[idx]
                
                l.pop()
                break

# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
