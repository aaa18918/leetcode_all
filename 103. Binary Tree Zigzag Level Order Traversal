Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root:
            return []
        
        cur = [root]
        level = 0
        res = []
        while cur:
            tmp, vals = [], []
            for node in cur:
                vals.append(node.val)
                
                if node.left:
                    tmp.append(node.left)
                
                if node.right:
                    tmp.append(node.right)
            
            if level%2 == 0:
                res.append(vals)
            else:
                res.append(vals[::-1])
            
            level += 1
            cur = tmp
        
        return res


O(n^2) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root:
            return []
        
        res = []
        my_stack = [(root, 0)]
        while my_stack:
            node, level = my_stack.pop()
            if level > len(res)-1:
                res.append([])
            
            if level%2 == 0:
                res[level].append(node.val)
            else:
                res[level] = [node.val]+res[level]
            
            if node.right:
                my_stack.append((node.right, level+1))
            
            if node.left:
                my_stack.append((node.left, level+1))
        
        return res
