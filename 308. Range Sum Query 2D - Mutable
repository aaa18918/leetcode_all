O(mn) initialization, O(n) time update, O(m) time sumRegion, O(1) space
class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        
        for row in matrix:
            for col in range(1, len(row)):
                row[col] += row[col-1]
        
        self.matrix = matrix
        
    def update(self, row, col, val):
        """
        :type row: int
        :type col: int
        :type val: int
        :rtype: void
        """
        
        origin = self.matrix[row][col]
        if col != 0:
            origin -= self.matrix[row][col-1]
        
        diff = val-origin
        for idx in range(col, len(self.matrix[0])):
            self.matrix[row][idx] += diff

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        
        res = 0
        for idx in range(row1, row2+1):
            res += self.matrix[idx][col2]
        
        if col1 != 0:
            for idx in range(row1, row2+1):
                res -= self.matrix[idx][col1-1]
        return res
        
# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# obj.update(row,col,val)
# param_2 = obj.sumRegion(row1,col1,row2,col2)


Fenwich tree, 太烦了......
