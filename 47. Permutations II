Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]


O(n!) time, O(???) space
class Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        nums.sort()
        
        def myHelp(nums):
            return [[nums[idx]]+p for idx in range(len(nums)) for p in myHelp(nums[:idx]+nums[idx+1:]) if idx == 0 or nums[idx] != nums[idx-1]] or [[]]
        
        return myHelp(nums) if nums else []
