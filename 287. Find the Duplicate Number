O(n) time, O(1) space
class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        slow, fast = nums[0], nums[nums[0]]
        
        while slow != fast:
            slow, fast = nums[slow], nums[nums[fast]]
        
        slow = 0
        while slow != fast:
            slow, fast = nums[slow], nums[fast]
        
        return slow


Example: [1,2,1,3]


O(n) time, O(1) space
class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        idx = 0
        while idx < len(nums):
            if nums[idx] != idx:
                if nums[nums[idx]] == nums[idx]:
                    return nums[idx]
                else:
                    tmp = nums[idx]
                    nums[idx], nums[tmp] = nums[tmp], nums[idx]
            else:
                idx += 1
