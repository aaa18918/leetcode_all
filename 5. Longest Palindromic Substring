O(n^2) time, O(res) space
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        len_s = len(s)
        
        def palindrome(i, j):
            while 0 <= i and j < len_s and s[i] == s[j]:
                i, j = i-1, j+1
            return s[i+1:j]
        
        res = ""
        for idx in range(len_s):
            if idx < len_s-1:
                temp = palindrome(idx, idx+1)
                if len(temp) > len(res):
                    res = temp
            
            temp = palindrome(idx, idx)
            if len(temp) > len(res):
                res = temp
        return res
