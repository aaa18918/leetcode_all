O(km) time, O(kn) space, where k is the length of a single word, m is the length of the string, n is the number of the words in the words' list.
class Solution(object):
    def findSubstring(self, s, words):
        """
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        """
        
        if not s or not words or len(s) < len(words[0]):
            return []
        
        k, m, n = len(words[0]), len(s), len(words)
        
        backup_counter = collections.Counter(words)
        res = []
        for i in range(k):
            j = i
            count = n
            left = i
            counter = {}
            for word, time in backup_counter.iteritems():
                counter[word] = time
            
            while j+k <= m:
                cur_word = s[j:j+k]
                if cur_word in counter:
                    if counter[cur_word] > 0:
                        count -= 1
                        if count == 0:
                            res.append(left)
                    
                    counter[cur_word] -= 1
                
                if j-k*(n-1) >= i:
                    first_word = s[left:left+k]
                    if first_word in counter:
                        counter[first_word] += 1
                        
                        if counter[first_word] > 0:
                            count += 1
                        
                    left += k
                
                j += k
        
        return res
