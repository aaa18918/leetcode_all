O(n) time, O(1) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        if not root or root is p or root is q: return root
        
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        
        return root if left and right else left or right


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        parents = {root: None}
        my_stack = [root]
        while p not in parents or q not in parents:
            node = my_stack.pop()
            if node.left:
                parents[node.left] = node
                my_stack.append(node.left)
            
            if node.right:
                parents[node.right] = node
                my_stack.append(node.right)
        
        my_set = set()
        while p:
            my_set.add(p)
            p = parents[p]
        
        while q not in my_set:
            q = parents[q]
        
        return q
