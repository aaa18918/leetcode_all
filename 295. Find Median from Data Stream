O(lgn) time addNum, O(1) time findMedian, O(n) space
class MedianFinder(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        
        self.min_heap = []
        self.max_heap = []

    def addNum(self, num):
        """
        :type num: int
        :rtype: None
        """
        
        if not self.min_heap and not self.max_heap:
            self.min_heap.append(num)
        elif self.min_heap:
            if num < self.min_heap[0]:
                heapq.heappush(self.max_heap, -num)
                
                if len(self.max_heap) > len(self.min_heap)+1:
                    heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))
            else:
                heapq.heappush(self.min_heap, num)
                
                if len(self.min_heap) > len(self.max_heap)+1:
                    heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))
        elif self.max_heap:
            if num > -self.max_heap[0]:
                heapq.heappush(self.min_heap, num)
                
                if len(self.min_heap) > len(self.max_heap)+1:
                    heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))
            else:
                heapq.heappush(self.max_heap, -num)
                
                if len(self.max_heap) > len(self.min_heap)+1:
                    heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))

    def findMedian(self):
        """
        :rtype: float
        """
        
        if len(self.min_heap) > len(self.max_heap):
            return self.min_heap[0]*1.0
        elif len(self.max_heap) > len(self.min_heap):
            return -self.max_heap[0]*1.0
        else:
            return (self.min_heap[0]-self.max_heap[0])/2.0

# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()
