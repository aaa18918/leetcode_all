Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        
        if not inorder: return None
        
        root = TreeNode(preorder.pop(0))
        root_index = 0
        for index, val in enumerate(inorder):
            if val == root.val:
                root_index = index
                break
        
        root.left, root.right = self.buildTree(preorder, inorder[:index]), self.buildTree(preorder, inorder[index+1:])
        return root


https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        
        if inorder == []:
            return None
        
        root = TreeNode(preorder.pop(0))
        i = inorder.index(root.val)
        
        root.left = self.buildTree(preorder, inorder[0:i])
        root.right = self.buildTree(preorder, inorder[i+1:])
        
        return root

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        
        if not inorder: return None
        
        root = TreeNode(preorder.pop(0))
        root_index = inorder.index(root.val)
        
        root.left, root.right = self.buildTree(preorder, inorder[:root_index]), self.buildTree(preorder, inorder[root_index+1:])
        
        return root
