O(lgn) time, worst O(n) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def deleteNode(self, root, key):
        """
        :type root: TreeNode
        :type key: int
        :rtype: TreeNode
        """
        
        prev, node = None, root
        while node:
            if node.val == key:
                break
            elif node.val < key:
                prev = node
                node = node.right
            else:
                prev = node
                node = node.left
        
        if not node:
            return root
        
        if not node.left and not node.right:
            if not prev:
                return None
            else:
                if node is prev.left:
                    prev.left = None
                else:
                    prev.right = None
            
        elif not node.left:
            if not prev:
                return node.right
            else:
                if node is prev.left:
                    prev.left = node.right
                else:
                    prev.right = node.right
                    
        elif not node.right:
            if not prev:
                return node.left
            else:
                if node is prev.left:
                    prev.left = node.left
                else:
                    prev.right = node.left
                    
        else:
            p, q = node.right, node
            while p.left:
                q = p
                p = p.left
            
            node.val, p.val = p.val, node.val
            if q is node:
                node.right = self.deleteNode(p, p.val)
            else:
                q.left = self.deleteNode(p, p.val)

        return root


别的解法没看。
