O(n) time, O(1) space
class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        pivot = nums[0]
        left, idx, right = 0, 0, len(nums)-1
        while left <= idx <= right:
            if nums[idx] == pivot:
                idx += 1
            elif nums[idx] > pivot:
                nums[left], nums[idx] = nums[idx], nums[left]
                left += 1
                idx += 1
            else:
                nums[right], nums[idx] = nums[idx], nums[right]
                right -= 1
        
        if k <= left:
            return self.findKthLargest(nums[:left], k)
        elif k <= idx:
            return pivot
        else:
            return self.findKthLargest(nums[idx:], k-idx)


O(nlgk) time, O(k) space
class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        min_heap = nums[:k]
        heapq.heapify(min_heap)
        for num in nums[k:]:
            if num > min_heap[0]:
                heapq.heappushpop(min_heap, num)
        return min_heap[0]
