O(n) time, O(1) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def closestValue(self, root, target):
        """
        :type root: TreeNode
        :type target: float
        :rtype: int
        """
        
        res = root.val
        while root:
            res = root.val if abs(res-target) > abs(root.val-target) else res
            root = root.left if target < root.val else root.right
        return res


O(n) time, O(1) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def closestValue(self, root, target):
        """
        :type root: TreeNode
        :type target: float
        :rtype: int
        """
        
        res, min_val, p = root.val, abs(root.val-target), root
        while p:
            cur = abs(p.val-target)
            
            if cur < min_val:
                min_val, res = cur, p.val
            
            if p.val == target:
                return res
            elif p.val < target:
                p = p.right
            else:
                p = p.left
        
        return res
