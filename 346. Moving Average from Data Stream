class MovingAverage(object):

    def __init__(self, size):
        """
        Initialize your data structure here.
        :type size: int
        """
        
        self.size = size
        self.queue = []
        self.queue_length = 0

    def next(self, val):
        """
        :type val: int
        :rtype: float
        """
        
        if self.queue_length < self.size:
            self.queue_length += 1
        else:
            self.queue.pop(0)
        self.queue.append(val)
        return sum(self.queue)*1.0/self.queue_length


# Your MovingAverage object will be instantiated and called as such:
# obj = MovingAverage(size)
# param_1 = obj.next(val)

class MovingAverage(object):

    def __init__(self, size):
        """
        Initialize your data structure here.
        :type size: int
        """
        
        self.size = size
        self.queue = collections.deque()
        self.queue_length = 0

    def next(self, val):
        """
        :type val: int
        :rtype: float
        """
        
        if self.queue_length < self.size:
            self.queue_length += 1
        else:
            self.queue.popleft()
        self.queue.append(val)
        return sum(self.queue)*1.0/self.queue_length


# Your MovingAverage object will be instantiated and called as such:
# obj = MovingAverage(size)
# param_1 = obj.next(val)

class MovingAverage(object):

    def __init__(self, size):
        """
        Initialize your data structure here.
        :type size: int
        """
        
        self.queue = collections.deque(maxlen=size)

    def next(self, val):
        """
        :type val: int
        :rtype: float
        """
        
        self.queue.append(val)
        return sum(self.queue)*1.0/len(self.queue)


# Your MovingAverage object will be instantiated and called as such:
# obj = MovingAverage(size)
# param_1 = obj.next(val)


class MovingAverage(object):

    def __init__(self, size):
        """
        Initialize your data structure here.
        :type size: int
        """
        
        self.size = size
        self.queue = collections.deque(maxlen=size)
        self.sum = 0

    def next(self, val):
        """
        :type val: int
        :rtype: float
        """
        
        if self.size == len(self.queue):
            self.sum -= self.queue[0]
        self.sum += val
        self.queue.append(val)
        return self.sum*1.0/len(self.queue)


# Your MovingAverage object will be instantiated and called as such:
# obj = MovingAverage(size)
# param_1 = obj.next(val)
