class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        if not grid: return 0
        
        myQueue = []
        m, n = len(grid), len(grid[0])
        
        def myBFS():
            while myQueue:
                x, y = myQueue.pop(0)
                
                if 0 <= x < m and 0 <= y < n and grid[x][y] == '1':
                    grid[x][y] = 0
                    myQueue.append((x+1, y))
                    myQueue.append((x-1, y))
                    myQueue.append((x, y+1))
                    myQueue.append((x, y-1))
        
        res = 0
        for i in range(m):
            for j in range(n):
               if grid[i][j] == '1':
                   res += 1
                   myQueue.append((i, j))
                   myBFS()
        
        return res

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        if not grid: return 0
        
        m, n = len(grid), len(grid[0])
        
        def myDFS(x, y):
            if 0 <= x < m and 0 <= y < n and grid[x][y] == '1':
                grid[x][y] = '0'
                myDFS(x+1, y)
                myDFS(x-1, y)
                myDFS(x, y+1)
                myDFS(x, y-1)
        
        res = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    res += 1
                    myDFS(i, j)
        
        return res

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        if not grid: return 0
        
        myStack = []
        m, n = len(grid), len(grid[0])
        
        def myDFS():
            while myStack:
                x, y = myStack.pop()
                if 0 <= x < m and 0 <= y < n and grid[x][y] == '1':
                    grid[x][y] = '0'
                    myStack.append((x+1, y))
                    myStack.append((x-1, y))
                    myStack.append((x, y+1))
                    myStack.append((x, y-1))
        
        res = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    res += 1
                    myStack.append((i, j))
                    myDFS()
        
        return res
