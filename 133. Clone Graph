O(n) time, O(n) space
# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node: return None
        
        new_root = UndirectedGraphNode(node.label)
        mappings = {node:new_root}
        visited = set()
        
        def myDFS(node):
            new_node = mappings[node]
            if not new_node.neighbors:
                for old_child in node.neighbors:
                    if old_child not in mappings:
                        new_child = UndirectedGraphNode(old_child.label)
                        mappings[old_child] = new_child
                    
                    new_node.neighbors.append(mappings[old_child])
            
            visited.add(node)
            
            for child in node.neighbors:
                if child not in visited:
                    myDFS(child)
        
        myDFS(node)
        return new_root
