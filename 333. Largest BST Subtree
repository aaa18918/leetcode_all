Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.

Note:
A subtree must include all of its descendants.

Example:

Input: [10,5,15,1,8,null,7]

   10 
   / \ 
  5  15 
 / \   \ 
1   8   7

Output: 3
Explanation: The Largest BST Subtree in this case is the highlighted one.
             The return value is the subtree's size, which is 3.
Follow up:
Can you figure out ways to solve it with O(n) time complexity?


O(n) time, O(1) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def largestBSTSubtree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        def myDFS(node):
            if not node: return 0, 0, -sys.maxint-1, sys.maxint
        
            left_bst_node_num, left_node_num, left_max_val, left_min_val = myDFS(node.left)
            right_bst_node_num, right_node_num, right_max_val, right_min_val = myDFS(node.right)
            
            n = -sys.maxint-1 if node.val <= left_max_val or node.val >= right_min_val else left_node_num+right_node_num+1
            return max(n, left_bst_node_num, right_bst_node_num), n, max(node.val, right_max_val), min(left_min_val, node.val)
        
        return myDFS(root)[0]
