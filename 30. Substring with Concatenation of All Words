You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.


Example 1:

Input:
  s = "barfoothefoobarman",
  words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
Example 2:

Input:
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
Output: []


O(km) time, O(kn) space, where k is the length of a single word, m is the length of the string, n is the number of the words in the words' list.
class Solution(object):
    def findSubstring(self, s, words):
        """
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        """
        
        if not s or not words or len(s) < len(words)*len(words[0]):
            return []
        
        res = []
        backup_counter = collections.Counter(words)
        
        len_word = len(words[0])
        for i in range(len_word):
            left, idx = i, i

            counter = {}
            for word, count in backup_counter.iteritems():
                counter[word] = count
            
            count = len(words)
            while left+len(words)*len_word <= len(s):
                cur_word = s[idx:idx+len_word]
                
                if cur_word in counter:
                    counter[cur_word] -= 1
                    
                    if counter[cur_word] >= 0:
                        count -= 1
                    
                        if count == 0:
                            res.append(left)

                idx += len_word
                
                if idx-left == len(words)*len_word:
                    prev_word = s[left:left+len_word]
                    if prev_word in counter:
                        counter[prev_word] += 1
                        
                        if counter[prev_word] > 0:
                            count += 1
                    
                    left += len_word
        
        return res
