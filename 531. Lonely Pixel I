Given a picture consisting of black and white pixels, find the number of black lonely pixels.

The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively.

A black lonely pixel is character 'B' that located at a specific position where the same row and same column don't have any other black pixels.

Example:
Input: 
[['W', 'W', 'B'],
 ['W', 'B', 'W'],
 ['B', 'W', 'W']]

Output: 3
Explanation: All the three 'B's are black lonely pixels.
Note:
The range of width and height of the input 2D array is [1,500].


class Solution(object):
    def findLonelyPixel(self, picture):
        """
        :type picture: List[List[str]]
        :rtype: int
        """
        
        if not picture: return 0
        row, col = len(picture), len(picture[0])
        
        count_row, count_col = [0 for _ in range(row)], [0 for _ in range(col)]
        
        for i in range(row):
            for j in range(col):
                if picture[i][j] == 'B':
                    count_row[i] += 1
                    count_col[j] += 1
        
        count = 0
        for i in range(row):
            for j in range(col):
                if picture[i][j] == 'B' and count_row[i] == 1 and count_col[j] == 1:
                    count += 1
        return count


还有一个O(1) space的。
