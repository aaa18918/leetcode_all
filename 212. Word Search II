from exceptions import ValueError

class TrieNode(object):
    def __init__(self):
        self.childs = {}
        self.is_word = False

class Trie(object):
    def __init__(self):
        self.root = TrieNode()
    
    def getRoot(self):
        return self.root
    
    def insertWord(self, word):
        p = self.root
        for c in word:
            if c not in p.childs:
                p.childs[c] = TrieNode()
            p = p.childs[c]
        if word: p.is_word = True
    
    def deleteWord(self, word):
        p, parents_queue = self.root, []
        for c in word:
            parents_queue.append((c, p))
            if c not in p.childs:
                raise ValueError("The word: {} does not exist in the Trie.".format(word))
            
            p = p.childs[c]
        
        p.is_word = False
        while parents_queue and not p.is_word and not p.childs:
            c, parent = parents_queue.pop()
            del parent.childs[c]
            p = parent

class Solution(object):
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        
        if not board: return []
        
        trie = Trie()
        root = trie.getRoot()
        
        for w in words:
            trie.insertWord(w)
        
        m, n = len(board), len(board[0])
        res, visited, diff = [], set(), [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        def myDFS(word, node, x, y):
            visited.add((x, y))
            if node.is_word:
                res.append(word)
                trie.deleteWord(word)
            
            for d in diff:
                new_x, new_y = x+d[0], y+d[1]
                if 0 <= new_x < m and 0 <= new_y < n and (new_x, new_y) not in visited and board[new_x][new_y] in node.childs:
                    myDFS(word+board[new_x][new_y], node.childs[board[new_x][new_y]], new_x, new_y)
            
            visited.remove((x, y))
            
        
        for i in range(m):
            for j in range(n):
                if board[i][j] in root.childs:
                    myDFS(board[i][j], root.childs[board[i][j]], i, j)
        
        return res


from exceptions import ValueError

class TrieNode(object):
    def __init__(self):
        self.childs = {}
        self.is_word = False

class Trie(object):
    def __init__(self):
        self.root = TrieNode()
    
    def getRoot(self):
        return self.root
    
    def insertWord(self, word):
        p = self.root
        for c in word:
            if c not in p.childs:
                p.childs[c] = TrieNode()
            p = p.childs[c]
        if word: p.is_word = True

class Solution(object):
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        
        if not board: return []
        
        trie = Trie()
        root = trie.getRoot()
        
        for w in words:
            trie.insertWord(w)
        
        m, n = len(board), len(board[0])
        res, visited, diff = set(), set(), [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        def myDFS(word, node, x, y):
            visited.add((x, y))
            if node.is_word:
                res.add(word)
            
            for d in diff:
                new_x, new_y = x+d[0], y+d[1]
                if 0 <= new_x < m and 0 <= new_y < n and (new_x, new_y) not in visited and board[new_x][new_y] in node.childs:
                    myDFS(word+board[new_x][new_y], node.childs[board[new_x][new_y]], new_x, new_y)
            
            visited.remove((x, y))
            
        
        for i in range(m):
            for j in range(n):
                if board[i][j] in root.childs:
                    myDFS(board[i][j], root.childs[board[i][j]], i, j)
        
        return list(res)
