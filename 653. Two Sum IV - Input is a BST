O(n) time, O(lgn) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findTarget(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: bool
        """
        
        def myHelp(my_stack, node, reverse):
            while node or my_stack:
                while node:
                    my_stack.append(node)
                    node = node.right if reverse else node.left
                
                node = my_stack.pop()
                yield node
                
                node = node.left if reverse else node.right
        
        my_stack1, my_stack2 = [], []
        left_search, right_search = myHelp(my_stack1, root, False), myHelp(my_stack2, root, True)
        node1, node2 = left_search.next(), right_search.next()
        
        while node1 is not node2:
            if node1.val+node2.val == k:
                return True
            elif node1.val+node2.val < k:
                node1 = left_search.next()
            else:
                node2 = right_search.next()
        
        return False


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findTarget(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: bool
        """
        
        node, my_stack = root, []
        while node:
            my_stack.append(node)
            node = node.left
        
        my_set = set()
        while my_stack:
            if not node:
                node = my_stack.pop()
            
            if node.val in my_set: return True
            my_set.add(k-node.val)
            
            node = node.right
            while node:
                my_stack.append(node)
                node = node.left

        return False
