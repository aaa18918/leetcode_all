Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root: return []
        
        result, parent_level = [[root.val]], [root]
        
        while parent_level:
            temp, cur_val = [], []
            for node in parent_level:
                if node.left:
                    temp.append(node.left)
                    cur_val.append(node.left.val)
                if node.right:
                    temp.append(node.right)
                    cur_val.append(node.right.val)

            if cur_val:
                result.append(cur_val)
            parent_level = temp
        
        return result[::-1]


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root: return []
        
        result = []
        
        def preorder(node, level):
            if level >= len(result):
                result.append([])
        
            result[level].append(node.val)
            if node.left:
                preorder(node.left, level+1)
            if node.right:
                preorder(node.right, level+1)
        
        preorder(root, 0)
        return result[::-1]


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root: return []
        
        result, my_stack = [], [(root, 0)]
        
        while my_stack:
            cur_node, level = my_stack.pop()
            
            if level >= len(result):
                result.append([])
            
            result[level].append(cur_node.val)
            
            if cur_node.right:
                my_stack.append((cur_node.right, level+1))
            if cur_node.left:
                my_stack.append((cur_node.left, level+1))
        
        return result[::-1]


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root:
            return []
        
        res = []
        queue = collections.deque([(root, 0)])
        while queue:
            node, level = queue.popleft()
            if len(res) == level:
                res.append([])
            
            res[level].append(node.val)
            if node.left:
                queue.append((node.left, level+1))
            
            if node.right:
                queue.append((node.right, level+1))
        
        return res[::-1]
