O(nlgn) time, O(1) space:
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        sorted_nums = sorted(nums)
        
        left, right = 0, len(sorted_nums)-1
        while left < right:
            if sorted_nums[left]+sorted_nums[right] == target:
                res = []
                for idx in range(len(nums)):
                    if nums[idx] in (sorted_nums[left], sorted_nums[right]):
                        res.append(idx)
                return res
            elif sorted_nums[left]+sorted_nums[right] < target:
                left += 1
            else:
                right -= 1

O(n) time, O(n) space:
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        hash_table = {}
        for idx, num in enumerate(nums):
            if num in hash_table:
                return [hash_table[num], idx]
            
            hash_table[target-num] = idx
