class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """

        res, wordSet, prevMap, length = [], set(wordList), collections.defaultdict(list), len(beginWord)
        lower_case_letters = string.ascii_lowercase

        words = [set(), set()]
        current, prev = 0, 1
        words[prev].add(beginWord)
        while True:
            for word in words[prev]:
                if word in wordSet:
                    wordSet.remove(word)

            for word in words[prev]:
                for i in range(length):
                    for char in lower_case_letters:
                        new_word = word[:i]+char+word[i+1:]
                        if new_word == word: continue
                        if new_word in wordSet:
                            words[current].add(new_word)
                            prevMap[new_word].append(word)

            if endWord in words[current]: break
            if not words[current]: return res
            prev, current = current, prev
            words[current].clear()
        
        def buildPath(path, word):
            if not prevMap[word]:
                path += [word]
                res.append(path[::-1])
                return

            next_words = prevMap[word]
            for next_word in next_words:
                buildPath(path+[word], next_word)

        buildPath([], endWord)
        return res
