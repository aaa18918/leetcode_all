 dp[i, j] = max(dp[i, j-1], prices[j] - prices[jj] + dp[i-1, jj]) { jj in range of [0, j-1] }
          = max(dp[i, j-1], prices[j] + max(dp[i-1, jj] - prices[jj]))

O(mn) time, O(mn) space
class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """
        
        if k <= 0 or not prices:
            return 0
        
        
        def quickCalculation():
            res = 0
            for i in range(1, len(prices)):
                res += max(prices[i]-prices[i-1], 0)
            
            return res
        
        
        if k > len(prices)/2:
            return quickCalculation()
        
        dp = [0]*(len(prices)+1)

        for i in range(1, k+1):
            prev = -prices[0]
            for j in range(1, len(prices)+1):
                tmp = dp[j]
                dp[j] = max(dp[j-1], prices[j-1]+prev)
                prev = max(prev, tmp-prices[j-1])
        
        return dp[len(prices)]
