Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.
Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.


O(n) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: None Do not return anything, modify head in-place instead.
        """
        
        if not head:
            return None
        
        def reverseLinkedList(head):
            if not head:
                return None
            
            p, q = head, head.next
            p.next = None
            while q:
                tmp = q.next
                q.next = p
                p, q = q, tmp
            
            return p
        
        p, q = head, head
        while q and q.next:
            p, q = p.next, q.next.next
        
        q, p.next = p.next, None
        p, q = head, reverseLinkedList(q)
        while q:
            tmp = q.next
            q.next = p.next
            p.next = q
            p = p.next.next
            q = tmp
