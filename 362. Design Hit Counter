class HitCounter(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.my_queue = collections.deque()
        
    def hit(self, timestamp):
        """
        Record a hit.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: void
        """
        
        left_min = timestamp-300+1
        self.my_queue.append(timestamp)
        while left_min > self.my_queue[0]:
            self.my_queue.popleft()
        
    def getHits(self, timestamp):
        """
        Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: int
        """
        
        count = 0
        for i in range(len(self.my_queue)-1, -1, -1):
            if self.my_queue[i] > timestamp-300:
                count += 1
            else:
                break
        return count

# Your HitCounter object will be instantiated and called as such:
# obj = HitCounter()
# obj.hit(timestamp)
# param_2 = obj.getHits(timestamp)


class HitCounter(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.hash_table = {}

    def hit(self, timestamp):
        """
        Record a hit.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: void
        """
        
        if timestamp not in self.hash_table:
            self.hash_table[timestamp] = 0
        self.hash_table[timestamp] += 1

    def getHits(self, timestamp):
        """
        Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: int
        """
        
        count = 0
        for i in range(timestamp-300+1, timestamp+1):
            if i in self.hash_table:
                count += self.hash_table[i]
        return count

# Your HitCounter object will be instantiated and called as such:
# obj = HitCounter()
# obj.hit(timestamp)
# param_2 = obj.getHits(timestamp)


class HitCounter(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.array = [_ for _ in range(300)]
        self.count = [0 for _ in range(300)]
        
    def hit(self, timestamp):
        """
        Record a hit.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: void
        """
        
        if self.array[timestamp%300] == timestamp:
            self.count[timestamp%300] += 1
        else:
            self.array[timestamp%300] = timestamp
            self.count[timestamp%300] = 1
        
    def getHits(self, timestamp):
        """
        Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: int
        """
        
        boundary, count = timestamp-300, 0
        for i in range(len(self.array)):
            if self.array[i] > boundary:
                count += self.count[i]
        return count

# Your HitCounter object will be instantiated and called as such:
# obj = HitCounter()
# obj.hit(timestamp)
# param_2 = obj.getHits(timestamp)
