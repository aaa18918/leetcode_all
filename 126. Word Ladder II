Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:

Only one letter can be changed at a time
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:

Return an empty list if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output:
[
  ["hit","hot","dot","dog","cog"],
  ["hit","hot","lot","log","cog"]
]
Example 2:

Input:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

Output: []

Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.


O(26kn) time, O(???) space
class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        
        wordSet = set(wordList)
        
        if endWord not in wordSet: return []
        
        prevMap = collections.defaultdict(list)
        cur = set([beginWord])
        lowercaseLetters = string.ascii_lowercase
        while cur:
            temp = set()
            for word in cur:
                for i in range(len(word)):
                    for c in lowercaseLetters:
                        if c == word[i]: continue
                        newWord = word[:i]+c+word[i+1:]
                        if newWord in wordSet:
                            prevMap[newWord].append(word)
                            temp.add(newWord)
            
            if not temp or endWord in temp: break
            
            for word in temp:
                wordSet.remove(word)
            
            cur = temp
        
        res = []
        def buildPath(word, path):
            if word == beginWord:
                res.append([word]+path[::-1])
                return
            
            if word not in prevMap: return
            
            for prevWord in prevMap[word]:
                buildPath(prevWord, path+[word])

        buildPath(endWord, [])

        return res


O(26kn) time, O(kn) space
class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        
        lowercase = string.ascii_lowercase
        hashTable = collections.defaultdict(set)
        cur = set([beginWord])
        wordSet = set(wordList)
        
        while cur:
            tmp = set()
            for word in cur:
                for idx in range(len(word)):
                    for char in lowercase:
                        newWord = word[:idx]+char+word[idx+1:]
                        if newWord in wordSet:
                            tmp.add(newWord)
                            hashTable[newWord].add(word)
            
            if endWord in tmp:
                break
            
            for word in tmp:
                wordSet.remove(word)
        
            cur = tmp
        
        res = []
        myStack = [(endWord, [endWord])]
        while myStack:
            word, trace = myStack.pop()
            for prevWord in hashTable[word]:
                if prevWord == beginWord:
                    trace.append(beginWord)
                    res.append(trace[::-1])
                else:
                    myStack.append((prevWord, trace+[prevWord]))
        
        return res
