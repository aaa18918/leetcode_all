O(n) time, O(n) space
class Solution(object):
    def validTree(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: bool
        """
        
        if len(edges) != n-1: return False
        
        visited = [0 for _ in range(n)]
        adjacency_list = collections.defaultdict(list)
        for edge in edges:
            adjacency_list[edge[0]].append(edge[1])
            adjacency_list[edge[1]].append(edge[0])
        
        def myDFS(num, parent):
            if visited[num] == 1: return True
            if visited[num] == -1: return False
            
            visited[num] = -1
            for adjacent_num in adjacency_list[num]:
                if adjacent_num != parent and not myDFS(adjacent_num, num):
                    return False
            visited[num] = 1
            return True
        
        for num in adjacency_list.keys():
            if not myDFS(num, -1):
                return False
        return True


O(nlgn) time, O(n) space
class Solution(object):
    def validTree(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: bool
        """
        
        nums = [-1 for _ in range(n)]
        
        def find(i):
            depth = 0
            while nums[i] != -1:
                i, depth = nums[i], depth+1
            return i, depth
        
        for edge in edges:
            x, depth_x = find(edge[0])
            y, depth_y = find(edge[1])
            if x == y: return False
            
            if depth_x < depth_y:
                nums[x] = y
            else:
                nums[y] = x
        
        return len(edges) == n-1
