O(n) time, O(n) space
class WordDistance(object):

    def __init__(self, words):
        """
        :type words: List[str]
        """
        
        self.hash_table = collections.defaultdict(list)
        for idx in range(len(words)):
            self.hash_table[words[idx]].append(idx)

    def shortest(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        
        res = sys.maxint
        idx1, idx2 = 0, 0
        
        while idx1 < len(self.hash_table[word1]) and idx2 < len(self.hash_table[word2]):
            res = min(res, abs(self.hash_table[word1][idx1]-self.hash_table[word2][idx2]))
            if self.hash_table[word1][idx1] < self.hash_table[word2][idx2]:
                idx1 += 1
            else:
                idx2 += 1
        
        return res

# Your WordDistance object will be instantiated and called as such:
# obj = WordDistance(words)
# param_1 = obj.shortest(word1,word2)
