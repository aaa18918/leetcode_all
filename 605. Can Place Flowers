Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.

Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.

Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: True
Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
Output: False
Note:
The input array won't violate no-adjacent-flowers rule.
The input array size is in the range of [1, 20000].
n is a non-negative integer which won't exceed the input array size.


O(n) time, O(1) space
class Solution(object):
    def canPlaceFlowers(self, flowerbed, n):
        """
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        """
        
        res, size = 0, len(flowerbed)
        for idx in range(size):
            if flowerbed[idx] == 0:
                if (idx-1 < 0 or flowerbed[idx-1] != 1) and (idx+1 == size or flowerbed[idx+1] != 1):
                    res += 1
                    
                    if res >= n:
                        return True
                    
                    flowerbed[idx] = 1
        
        return res >= n


O(n) time, O(1) space
class Solution(object):
    def canPlaceFlowers(self, flowerbed, n):
        """
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        """
        
        for idx in range(len(flowerbed)):
            if flowerbed[idx] == 0 and ((idx == 0 or flowerbed[idx-1] == 0) and (idx+1 == len(flowerbed) or flowerbed[idx+1] == 0)):
                n -= 1
                if n <= 0:
                    return True
                
                flowerbed[idx] = 1
        
        return n <= 0
