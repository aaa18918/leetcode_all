O(26nk) time, O(26nk) space
class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        
        wordSet = set(wordList)
        if endWord not in wordSet:
            return 0
        
        queue = collections.deque([(beginWord, 1)])
        lowercase = string.ascii_lowercase
        while queue:
            word, count = queue.popleft()
            for idx in range(len(word)):
                for c in lowercase:
                    if c != word[idx]:
                        new_word = word[:idx]+c+word[idx+1:]
                        if new_word == endWord:
                            return count+1
                        
                        if new_word in wordSet:
                            wordSet.remove(new_word)
                            queue.append((new_word, count+1))
        
        return 0


不太清楚为什么，方法有点慢，下次需要再看下别的方法都是怎么做的啊。
