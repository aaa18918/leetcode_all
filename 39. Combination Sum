O(???) time, O(???) space
class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        size = len(candidates)
        res = []
        
        def myDFS(nums, idx, target):
            if target == 0:
                res.append(nums)
                return
            
            for i in range(idx, size):
                if candidates[i] <= target:
                    myDFS(nums+[candidates[i]], i, target-candidates[i])
        
        myDFS([], 0, target)
        return res


O(???) time, O(???) space
class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        dp = [[] for _ in range(target+1)]
        for num in candidates:
            if num <= target:
                dp[num].append([num])
        
        for i in range(1, target):
            if dp[i]:
                for num in candidates:
                    if i+num <= target:
                        for l in dp[i]:
                            if l[-1] <= num:
                                dp[i+num].append(l+[num])
        
        return dp[target] if target >= 0 else []
