O(nlgn) time, O(n) space
class Solution(object):
    def countComponents(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: int
        """
        
        parents = [-1 for _ in range(n)]
        
        def find(x):
            depth = 0
            while parents[x] != -1:
                depth += 1
                x = parents[x]
            
            return x, depth
        
        def union(x, y):
            x_root, x_depth = find(x)
            y_root, y_depth = find(y)
            
            if x_root != y_root:
                if x_depth > y_depth:
                    parents[y_root] = x_root
                else:
                    parents[x_root] = y_root
        
        for edge in edges:
            union(edge[0], edge[1])
        
        count = 0
        for p in parents:
            if p == -1:
                count += 1
        
        return count
