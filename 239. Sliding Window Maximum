Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Note:
You may assume k is always valid, 1 â‰¤ k â‰¤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?


O(n) time, O(k) space
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """

        my_deque = collections.deque([])
        
        res = []
        for idx in range(len(nums)):
            if idx >= k and nums[idx-k] ==  my_deque[0]:
                my_deque.popleft()
            
            while my_deque and nums[idx] > my_deque[-1]:
                my_deque.pop()
            
            my_deque.append(nums[idx])
            
            if idx >= k-1:
                res.append(my_deque[0])

        return res
