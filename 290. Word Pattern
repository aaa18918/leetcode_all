class Solution(object):
    def wordPattern(self, pattern, str):
        s = pattern
        t = str.split()
        return len(set(zip(s, t))) == len(set(s)) == len(set(t)) and len(s) == len(t)


class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """

        if not pattern or not str: return True if not pattern and not str else False
        hash_table = ["" for _ in range(26)]
        str_list = str.split(' ')
        if len(pattern) != len(str_list): return False

        for i in range(len(pattern)):
            index = ord(pattern[i])-ord('a')
            if not hash_table[index]:
                hash_table[index] = str_list[i]
            elif hash_table[index] != str_list[i]:
                return False
        
        all_words_set = set()
        for word in hash_table:
            if not word: continue
            if word in all_words_set: return False
            else: all_words_set.add(word)
        
        return True
