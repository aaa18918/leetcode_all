O(n) time, O(1) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.res = -sys.maxint-1
    
    def maxPathSum(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        def maxSinglePath(node):
            if not node: return 0
            
            left = max(0, maxSinglePath(node.left))
            right = max(0, maxSinglePath(node.right))
            
            self.res = max(self.res, left+node.val+right)
            return max(left, right)+node.val
        
        root_max_single_path = maxSinglePath(root)
        return max(self.res, root_max_single_path)


O(n) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def maxPathSum(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        def myHelp(node):
            if not node:
                return -sys.maxint-1, 0
            
            if not node.left and not node.right:
                return node.val, node.val
            
            left_max_sum, left_max_path = myHelp(node.left)
            right_max_sum, right_max_path = myHelp(node.right)
            
            cur_max_sum = max(max(left_max_path, 0)+max(right_max_path, 0)+node.val, left_max_sum, right_max_sum)
            cur_max_path = max(left_max_path, right_max_path, 0)+node.val
            return cur_max_sum, cur_max_path
        
        return myHelp(root)[0]
