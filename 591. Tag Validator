O(n) time, O(tag_nested_layer_num) space
class Solution(object):
    def isValid(self, code):
        """
        :type code: str
        :rtype: bool
        """
        
        my_stack = []
        idx, size = 0, len(code)
        while idx < size:
            if code[idx] == '<':
                if idx+8 < size and code[idx+1:idx+9] == "![CDATA[":
                    if not my_stack:
                        return False
                    
                    while idx+3 < size and code[idx:idx+3] != "]]>":
                        idx += 1

                    if idx+3 >= size:
                        return False
                    
                    idx += 3
                else:
                    left = idx
                    while idx < size and code[idx] != '>':
                        idx += 1
                    
                    if idx == size:
                        return False
                    
                    tag_name = code[left+1:idx]
                    if not tag_name:
                        return False
                    
                    if tag_name[0] == '/':
                        if not my_stack or my_stack[-1] != tag_name[1:]:
                            return False
                        
                        my_stack.pop()
                        if not my_stack:
                            return idx == size-1
                    else:
                        if len(tag_name) < 1 or len(tag_name) > 9:
                            return False
                        
                        for char in tag_name:
                            if char < 'A' or char > 'Z':
                                return False
                        
                        my_stack.append(tag_name)
                    
                    idx += 1
            else:
                if not my_stack:
                    return False
                
                idx += 1
        return False
