O(1) time hasNext(), O(lgn) time next(), O(lgn) space
# Definition for a  binary tree node
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator(object):
    def __init__(self, root):
        """
        :type root: TreeNode
        """
        
        self.p = root
        self.my_stack = []

    def hasNext(self):
        """
        :rtype: bool
        """
        
        return True if self.p or self.my_stack else False

    def next(self):
        """
        :rtype: int
        """
        
        while self.p:
            self.my_stack.append(self.p)
            self.p = self.p.left
        
        self.p = self.my_stack.pop()
        res = self.p.val
        self.p = self.p.right
        return res

# Your BSTIterator will be called like this:
# i, v = BSTIterator(root), []
# while i.hasNext(): v.append(i.next())
