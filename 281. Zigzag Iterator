Given two 1d vectors, implement an iterator to return their elements alternately.

 

Example:

Input:
v1 = [1,2]
v2 = [3,4,5,6] 
Output: [1,3,2,4,5,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].
 

Follow up:

What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question:
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example:

Input:
[1,2,3]
[4,5,6,7]
[8,9]

Output: [1,4,8,2,5,9,3,6,7].


O(1) time, O(1) space
class ZigzagIterator(object):

    def __init__(self, v1, v2):
        """
        Initialize your data structure here.
        :type v1: List[int]
        :type v2: List[int]
        """
        
        self.v1, self.v2 = v1, v2
        self.size_v1, self.size_v2 = len(v1), len(v2)
        self.i, self.j = 0, 0

    def next(self):
        """
        :rtype: int
        """
        
        if self.i < self.size_v1 and self.j < self.size_v2:
            if self.i <= self.j:
                self.i += 1
                return self.v1[self.i-1]
            else:
                self.j += 1
                return self.v2[self.j-1]
        elif self.i < self.size_v1:
            self.i += 1
            return self.v1[self.i-1]
        else:
            self.j += 1
            return self.v2[self.j-1]

    def hasNext(self):
        """
        :rtype: bool
        """
        
        return self.i < self.size_v1 or self.j < self.size_v2

# Your ZigzagIterator object will be instantiated and called as such:
# i, v = ZigzagIterator(v1, v2), []
# while i.hasNext(): v.append(i.next())
