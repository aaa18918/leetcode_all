O(n) time, O(1) space
# Definition for binary tree with next pointer.
# class TreeLinkNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#         self.next = None

class Solution:
    # @param root, a tree link node
    # @return nothing
    def connect(self, root):
        while root and root.left:
            p = root
            while p:
                p.left.next = p.right
                if p.next:
                    p.right.next = p.next.left
                p = p.next
            root = root.left


O(n) time, O(1) space, generalization if not every node has two children.
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, left, right, next):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        
        cur = root
        while cur:
            p, q = cur, None
            while p:
                if p.left:
                    if q:
                        q.next = p.left
                        q = q.next
                    else:
                        q = p.left
                
                if p.right:
                    if q:
                        q.next = p.right
                        q = q.next
                    else:
                        q = p.right
                
                p = p.next
            
            cur = cur.left if cur.left else cur.right
        
        return root
