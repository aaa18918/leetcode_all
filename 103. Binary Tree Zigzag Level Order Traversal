O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root: return []
        
        res, cur, level = [[root.val]], [root], 1
        while cur:
            temp, value = [], []
            if level%2 == 1:
                for idx in range(len(cur)-1, -1, -1):
                    if cur[idx].right:
                        temp.append(cur[idx].right)
                        value.append(cur[idx].right.val)
                    
                    if cur[idx].left:
                        temp.append(cur[idx].left)
                        value.append(cur[idx].left.val)
            else:
                for idx in range(len(cur)-1, -1, -1):
                    if cur[idx].left:
                        temp.append(cur[idx].left)
                        value.append(cur[idx].left.val)
                    
                    if cur[idx].right:
                        temp.append(cur[idx].right)
                        value.append(cur[idx].right.val)
            
            level += 1
            
            if value: res.append(value)
            
            cur = temp
        
        return res
