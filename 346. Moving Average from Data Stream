Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Example:

MovingAverage m = new MovingAverage(3);
m.next(1) = 1
m.next(10) = (1 + 10) / 2
m.next(3) = (1 + 10 + 3) / 3
m.next(5) = (10 + 3 + 5) / 3


O(1) time, O(size) space
class MovingAverage(object):

    def __init__(self, size):
        """
        Initialize your data structure here.
        :type size: int
        """
        
        self.my_queue = collections.deque()
        self.total = 0
        self.size = size

    def next(self, val):
        """
        :type val: int
        :rtype: float
        """
        
        if self.size <= 0:
            return 0
        
        if len(self.my_queue) == self.size:
            self.total -= self.my_queue.popleft()
        
        self.my_queue.append(val)
        self.total += val
        return self.total*1.0/len(self.my_queue)

# Your MovingAverage object will be instantiated and called as such:
# obj = MovingAverage(size)
# param_1 = obj.next(val)


Could also be implemented in double linked list, which is the underlying implementation of the deque.
