O(nlgk) time, O(k) space
class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        min_heap = nums[:k]
        heapq.heapify(min_heap)
        for num in nums[k:]:
            if num > min_heap[0]:
                heapq.heappushpop(min_heap, num)
        return min_heap[0]


Average O(n) time, Worst O(n^2) time, O(1) space
class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        def myHelp(left, right, k):
            idx, p, l, r = left, nums[right], left, right-1
            while idx <= r:
                if nums[idx] > p:
                    if idx != l:
                        nums[l], nums[idx] = nums[idx], nums[l]
                        l += 1
                    else:
                        l += 1
                        idx += 1
                elif nums[idx] == p:
                    idx += 1
                else:
                    if idx != r:
                        nums[r], nums[idx] = nums[idx], nums[r]
                    
                    r -= 1
            
            if k <= l-left:
                return myHelp(left, l-1, k)
            elif k <= r+2-left:
                return p
            else:
                return myHelp(r+1, right-1, k-(r+2-left))
        
        return myHelp(0, len(nums)-1, k)
