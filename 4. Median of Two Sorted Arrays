O(lgn) time, O(1) space
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        
        m, n = len(nums1), len(nums2)
        if m > n:
            return self.findMedianSortedArrays(nums2, nums1)
        
        k = (m+n+1)/2
        left, right = 0, m
        while left < right:
            mid = (left+right)/2
            if nums1[mid] >= nums2[k-mid-1]:
                right = mid
            else:
                left = mid+1
        
        nums1_candidate = nums1[left-1] if left > 0 else -sys.maxint-1
        nums2_candidate = nums2[k-left-1] if k-left > 0 else -sys.maxint-1
        
        if (m+n)%2 == 1:
            return max(nums1_candidate, nums2_candidate)
        
        res = max(nums1_candidate, nums2_candidate)
        nums1_candidate = nums1[left] if left < m else sys.maxint
        nums2_candidate = nums2[k-left] if k-left < n else sys.maxint
        
        res += min(nums1_candidate, nums2_candidate)
        
        return res*0.5


O(lgn) time, O(1) space
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        
        def findKthSmallest(k, nums1, nums2):
            size1, size2 = len(nums1), len(nums2)
            if size1 < size2:
                nums1, nums2, size1, size2 = nums2, nums1, size2, size1
            
            if not nums2:
                return nums1[k-1]
            
            if k == 1:
                return min(nums1[0], nums2[0])
            
            mid = k/2
            right = mid if mid <= size2 else size2
            left = k-right
            if nums1[left-1] < nums2[right-1]:
                return findKthSmallest(k-left, nums1[left:], nums2)
            else:
                return findKthSmallest(k-right, nums1, nums2[right:])
        
        total = len(nums1)+len(nums2)
        return findKthSmallest(total/2+1, nums1, nums2) if total%2 == 1 else (findKthSmallest(total/2, nums1, nums2)+findKthSmallest(total/2+1, nums1, nums2))/2.0
