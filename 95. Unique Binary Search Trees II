Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


O(???) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
        
        def myHelp(left, right):
            if left > right:
                return [None]
            
            res = []
            for num in range(left, right+1):                
                for l in myHelp(left, num-1):
                    for r in myHelp(num+1, right):
                        root = TreeNode(num)
                        
                        root.left = l
                        root.right = r
                        
                        res.append(root)
            
            return res
        
        return myHelp(1, n) if n >= 1 else []
