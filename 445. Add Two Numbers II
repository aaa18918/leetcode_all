# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        sum1, sum2 = 0, 0
        p1, p2 = l1, l2
        
        while p1:
            sum1 = sum1*10+p1.val
            p1 = p1.next
        
        while p2:
            sum2 = sum2*10+p2.val
            p2 = p2.next
        
        res = sum1+sum2
        head =  ListNode(res%10)
        res /= 10
        while res:
            new_node = ListNode(res%10)
            res /= 10
            new_node.next = head
            head = new_node
        
        return head


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        s1, s2 = [], []
        p1, p2 = l1, l2
        while p1:
            s1.append(p1.val)
            p1 = p1.next
        
        while p2:
            s2.append(p2.val)
            p2 = p2.next
        
        res, carry = None, 0
        while s1 and s2:
            cur_sum = s1.pop()+s2.pop()+carry
            new_node = ListNode(cur_sum%10)
            new_node.next = res
            res = new_node
            carry = cur_sum/10
        
        while s1:
            cur_sum = s1.pop()+carry
            new_node = ListNode(cur_sum%10)
            new_node.next = res
            res = new_node
            carry = cur_sum/10
        
        while s2:
            cur_sum = s2.pop()+carry
            new_node = ListNode(cur_sum%10)
            new_node.next = res
            res = new_node
            carry = cur_sum/10
        
        if carry:
            new_node = ListNode(carry)
            new_node.next = res
            res = new_node
        
        return res
