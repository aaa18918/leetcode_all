For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1 :

Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3 

Output: [1]
Example 2 :

Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5 

Output: [3, 4]
Note:

According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”
The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.


O(n) time, O(n) space
class Solution(object):
    def findMinHeightTrees(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        
        adjacent = {}
        for i in range(n):
            adjacent[i] = set()
        
        for edge in edges:
            adjacent[edge[0]].add(edge[1])
            adjacent[edge[1]].add(edge[0])
        
        remove_next = []
        for node in adjacent:
            if len(adjacent[node]) <= 1:
                remove_next.append(node)
        
        while len(remove_next) < len(adjacent):
            tmp = []
            for node in remove_next:
                connected_node = adjacent[node].pop()
                adjacent[connected_node].remove(node)
                del adjacent[node]
                
                if len(adjacent[connected_node]) <= 1:
                    tmp.append(connected_node)
            
            remove_next = tmp
        
        return adjacent.keys()


还有从随便一个点bfs找最远点，这个最远点是最长path一个端点，再从此端点bfs，找到最长path。

还有tree dp，懒得看了。
