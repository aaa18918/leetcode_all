O(n) time, O(1) space
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        left, right = 0, len(height)-1
        res = 0
        left_max, right_max = 0, 0
        while left <= right:
            if left_max < right_max:
                left_max = max(left_max, height[left])
                res += left_max-height[left]
                left += 1
            else:
                right_max = max(right_max, height[right])
                res += right_max-height[right]
                right -= 1
        
        return res


O(n) time, O(n) space
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        left_largest = []
        left_max = 0
        for h in height:
            left_largest.append(left_max)
            left_max = max(left_max, h)
        
        res = 0
        right_max = 0
        for idx in range(len(height)-1, -1, -1):
            res += max(min(left_largest[idx], right_max)-height[idx], 0)
            right_max = max(right_max, height[idx])
        
        return res
