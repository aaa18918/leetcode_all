O(3n) time, O(1) space 
# Definition for singly-linked list with a random pointer.
# class RandomListNode(object):
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: RandomListNode
        :rtype: RandomListNode
        """
        
        if not head: return head
        
        p = head
        while p:
            q = RandomListNode(p.label)
            q.next = p.next
            p.next = q
            p = p.next.next
        
        p = head
        while p:
            if p.random:
                p.next.random = p.random.next
            
            p = p.next.next
        
        new_head = head.next
        p, q = head, new_head
        while q.next:
            p.next = q.next
            q.next = q.next.next
            p = p.next
            q = q.next
        
        p.next = None
        
        return new_head
