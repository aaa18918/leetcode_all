O(n) time, O(n) space
class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        
        adjacency_list = collections.defaultdict(set)
        for pre in prerequisites:
            adjacency_list[pre[0]].add(pre[1])
        
        visited = [0 for _ in range(numCourses)]
        
        res = [c for c in range(numCourses) if c not in adjacency_list]
        def myDFS(course):
            if course not in adjacency_list: return True
            if visited[course] == 1: return True
            if visited[course] == -1: return False
            
            visited[course] = -1
            for pre_course in adjacency_list[course]:
                if not myDFS(pre_course):
                    return False
            
            res.append(course)
            visited[course] = 1
            return True
        
        for course in range(numCourses):
            if not myDFS(course):
                return []
        
        return res


O(n) time, O(n) space
class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        
        adjacent_list = collections.defaultdict(set)
        for prerequisite in prerequisites:
            adjacent_list[prerequisite[0]].add(prerequisite[1])
        
        cur = []
        for num in range(numCourses):
            if num not in adjacent_list:
                cur.append(num)
        
        res = []
        while cur:
            res += cur
            
            tmp = []
            for key, val in adjacent_list.iteritems():
                for c in cur:
                    if c in val:
                        val.remove(c)
                        
                        if not val:
                            tmp.append(key)
            
            for key in tmp:
                del adjacent_list[key]
            
            cur = tmp
        
        return res if not adjacent_list else []
