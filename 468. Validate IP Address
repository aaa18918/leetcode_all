class Solution(object):
    def validIPAddress(self, IP):
        """
        :type IP: str
        :rtype: str
        """
        
        err_message = "Neither"
        
        if '.' in IP:
            ip = IP.split('.')
            if len(ip) != 4: return err_message
            for item in ip:
                if not item or (item[0] == '0' and len(item) > 1): return err_message
                cur_sum = 0
                for c in item:
                    if c < '0' or c > '9':
                        return err_message
                    else:
                        cur_sum = cur_sum*10+int(c)
                if cur_sum > 255: return err_message
            return "IPv4"
        elif ':' in IP:
            ip = IP.split(':')
            if len(ip) != 8: return err_message
            for item in ip:
                if not item or len(item) > 4: return err_message
                for c in item:
                    if '0' <= c <= '9' or 'a' <= c <= 'f' or 'A' <= c <= 'F': continue
                    else:
                        return err_message
            return "IPv6"
        return err_message


class Solution(object):
    def validIPAddress(self, IP):
        """
        :type IP: str
        :rtype: str
        """

        error_message = "Neither"

        if '.' in IP:
            ip = IP.split('.')
            if len(ip) != 4:
                return error_message
            
            for item in ip:
                if not item or len(item) > 3 or item[0] == '0' and len(item) > 1:
                    return error_message
                
                cur_sum = 0
                for c in item:
                    if '0' <= c <= '9':
                        cur_sum = cur_sum*10+int(c)
                    else:
                        return error_message
                
                if cur_sum > 255:
                    return error_message
            return "IPv4"
        elif ':' in IP:
            ip = IP.split(':')
            if len(ip) != 8:
                return error_message
            
            for item in ip:
                if not item or len(item) > 4:
                    return error_message
                
                for c in item:
                    if '0' <= c <= '9' or 'a' <= c <= 'f' or 'A' <= c <= 'F':
                        continue
                    else:
                        return error_message
            return "IPv6"

        return error_message
