O(n^2) time, O(res) space
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        len_s = len(s)
        
        def palindrome(left, right):
            while left >= 0 and right < len_s and s[left] == s[right]:
                left, right = left-1, right+1
            return left+1, right-1
        
        res = ""
        for idx in range(len_s):
            if idx != len_s-1:
                left, right = palindrome(idx, idx+1)
                if right-left+1 > len(res):
                    res = s[left:right+1]
            
            left, right = palindrome(idx, idx)
            if right-left+1 > len(res):
                res = s[left:right+1]
        return res
