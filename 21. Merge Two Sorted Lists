# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        dummy_head = ListNode(0)
        p = dummy_head
        while l1 and l2:
            if l1.val < l2.val:
                p.next = l1
                p, l1 = p.next, l1.next
            else:
                p.next = l2
                p, l2 = p.next, l2.next
        
        while l1:
            p.next = l1
            p, l1 = p.next, l1.next
        
        while l2:
            p.next = l2
            p, l2 = p.next, l2.next
        
        p.next = None
        return dummy_head.next
 
 https://leetcode.com/problems/merge-two-sorted-lists/

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        head = ListNode(0)
        p = head
        
        while l1 != None and l2 != None:
            if l1.val < l2.val:
                p.next = l1
                p = p.next
                l1= l1.next
            else:
                p.next = l2
                p = p.next
                l2 = l2.next
            
        while l1 != None:
            p.next = l1
            l1 = l1.next
            p = p.next
        
        while l2 != None:
            p.next = l2
            l2 = l2.next
            p = p.next
        
        return head.next
