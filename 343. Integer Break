Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.

Example 1:

Input: 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.
Example 2:

Input: 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
Note: You may assume that n is not less than 2 and not larger than 58.


class Solution(object):
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        record = [0 for _ in range(n+1)]
        record[1], record[2] = 1, 1
        
        for i in range(3, n+1):
            for j in range(1, i):
                record[i] = max(record[i], (i-j)*j, record[i-j]*j, record[j]*(i-j), record[i-j]*record[j])
        
        return record[n]

class Solution(object):
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        res = 0
        for i in range(2, n+1):
            res = max(res, (n/i)**(i-n%i)*(n/i+1)**(n%i))
        
        return res

class Solution(object):
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        if n < 4: return n-1
        
        res = 1
        while n > 4:
            res *= 3
            n -= 3
        
        if n == 4:
            res *= 4
        elif n == 3:
            res *= 3
        else:
            res *= 2
        
        return res

class Solution(object):
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        if n > 4:
            if n % 3 == 0:
                return 3**(n/3)
            elif n % 3 == 1:
                return 3**(n/3-1)*4
            else:
                return 3**(n/3)*2
        elif n == 4:
            return 4
        else:
            return n-1
