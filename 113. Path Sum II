O(n) time, O(nlgn) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        
        if not root:
            return []
        
        res = []
        
        stack = [([], root, sum)]
        while stack:
            cur_path, node, target = stack.pop()
            if not node.left and not node.right:
                if node.val == target:
                    res.append(cur_path+[node.val])
            else:
                if node.left:
                    stack.append((cur_path+[node.val], node.left, target-node.val))
                if node.right:
                    stack.append((cur_path+[node.val], node.right, target-node.val))
        
        return res
