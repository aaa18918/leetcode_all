O(n^2) time, O(n^2) space
class Solution(object):
    def longestPalindromeSubseq(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        if not s:
            return 0
        
        size = len(s)
        dp = [[0]*size for _ in range(size)]
        
        for i in range(size):
            dp[i][i] = 1
            for j in range(i-1, -1, -1):
                if s[i] == s[j]:
                    dp[i][j] = dp[i-1][j+1]+2
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j+1])
        
        return dp[size-1][0]


还有一个space O(n)和O(2n)的没看懂。
