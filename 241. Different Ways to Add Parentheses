Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.

Example 1:

Input: "2-1-1"
Output: [0, 2]
Explanation: 
((2-1)-1) = 0 
(2-(1-1)) = 2
Example 2:

Input: "2*3-4*5"
Output: [-34, -14, -10, -10, 10]
Explanation: 
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10


O(???) time, O(???) space
class Solution(object):
    def diffWaysToCompute(self, input):
        """
        :type input: str
        :rtype: List[int]
        """
        
        def myHelp(start, end):
            res, has_operators = [], False
            for idx in range(start, end+1):
                if input[idx] in '+-*/':
                    has_operators = True
                    left, right = myHelp(start, idx-1), myHelp(idx+1, end)
                    
                    for l in left:
                        for r in right:
                            if input[idx] == '+':
                                res.append(l+r)
                            elif input[idx] == '-':
                                res.append(l-r)
                            elif input[idx] == '*':
                                res.append(l*r)
                            elif input[idx] == '/':
                                res.append(l/r)
            
            return res if has_operators else [int(input[start:end+1])]
        
        return myHelp(0, len(input)-1)
