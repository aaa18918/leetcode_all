O(mn) time, O(mn) space
class Solution(object):
    def multiply(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        
        cal = []
        for idx in range(len(num2)-1, -1, -1):
            cal_idx = len(num2)-1-idx
            for j in range(len(num1)-1, -1, -1):
                if cal_idx >= len(cal):
                    cal.append(0)
                
                cur = int(num2[idx])*int(num1[j])
                cal[cal_idx] += cur%10
                
                if cur >= 10:
                    if cal_idx+1 >= len(cal):
                        cal.append(0)
                    
                    cal[cal_idx+1] += cur/10
                
                cal_idx += 1
        
        idx = 0
        while idx < len(cal):
            if cal[idx] >= 10:
                if idx == len(cal)-1:
                    cal.append(0)
                
                cal[idx+1] += cal[idx]/10
            
            cal[idx] %= 10
            
            idx += 1
        
        while cal and cal[-1] == 0:
            cal.pop()
        
        res = ''
        for idx in range(len(cal)-1, -1, -1):
            res += str(cal[idx])
        
        return res if res else '0'


还有一个O(n^1.58)的解法。
