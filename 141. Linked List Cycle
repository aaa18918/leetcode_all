https://leetcode.com/problems/linked-list-cycle/

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        
        if head == None:
            return False
        
        slower = head
        faster = head.next
        
        while faster != None and faster.next != None:
            if slower == faster:
                return True
            else:
                slower = slower.next
                faster = faster.next.next
        
        return False

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        
        if not head: return False
        
        slow, fast = head, head.next
        
        while fast and fast.next:
            if fast is slow:
                return True
            fast = fast.next.next
            slow = slow.next
        
        return False
