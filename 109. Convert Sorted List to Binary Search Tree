Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5


O(nlgn) time, O(???) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        
        if not head:
            return None
        elif not head.next:
            return TreeNode(head.val)
        
        slow, fast = head, head.next
        while fast.next and fast.next.next:
            slow, fast = slow.next, fast.next.next
        
        node = TreeNode(slow.next.val)
        node.right = self.sortedListToBST(slow.next.next)
        slow.next = None
        node.left = self.sortedListToBST(head)
        return node


O(n) time, O(???) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """

        list_values, p = [], head
        while p:
            list_values.append(p.val)
            p = p.next

        def constructTree(left, right):
            if left > right:
                return None

            mid = (left+right)/2
            root = TreeNode(list_values[mid])
            root.left = constructTree(left, mid-1)
            root.right = constructTree(mid+1, right)

            return root

        return constructTree(0, len(list_values)-1)
