https://leetcode.com/problems/intersection-of-two-linked-lists/

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        
        if headA == None or headB == None:
            return None
        
        pa = headA
        pb = headB
        
        while pa != pb:
            if pa == None:
                pa = headB
            else:
                pa = pa.next
            
            if pb == None:
                pb = headA
            else:
                pb = pb.next
        
        return pa

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        
        if not headA or not headB:
            return None
        
        pa, pb = headA, headB
        
        while pa != pb:
            if pa is None:
                pa = headB
            else:
                pa = pa.next
            
            if pb is None:
                pb = headA
            else:
                pb = pb.next
            
        return pa


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        
        if not headA or not headB: return None
        
        pA, pB = headA, headB
        while pA is not pB:
            if pA is None:
                pA = headB
            else:
                pA = pA.next
            
            if pB is None:
                pB = headA
            else:
                pB = pB.next
        
        return pA
