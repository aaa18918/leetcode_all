Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)
Example 2:

Input: [1,2,4,8]
Output: [1,2,4,8]


class Solution(object):
    def largestDivisibleSubset(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        
        if not nums: return []
        
        nums = sorted(nums)
        len_nums = len(nums)
        dp = [1 for _ in range(len_nums)]
        pre = [None for _ in range(len_nums)]
        
        for i in range(len_nums):
            for j in range(i+1, len_nums):
                if nums[j]%nums[i] == 0:
                    if dp[i]+1 > dp[j]:
                        dp[j] = dp[i]+1
                        pre[j] = i
        
        index = dp.index(max(dp))
        result = []
        while index is not None:
            result.append(nums[index])
            index = pre[index]
        
        return result
