O(n) time, O(1) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def largestBSTSubtree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        def myDFS(node):
            if not node: return 0, 0, -sys.maxint-1, sys.maxint
        
            left_bst_node_num, left_node_num, left_max_val, left_min_val = myDFS(node.left)
            right_bst_node_num, right_node_num, right_max_val, right_min_val = myDFS(node.right)
            
            n = -sys.maxint-1 if node.val <= left_max_val or node.val >= right_min_val else left_node_num+right_node_num+1
            return max(n, left_bst_node_num, right_bst_node_num), n, max(node.val, right_max_val), min(left_min_val, node.val)
        
        return myDFS(root)[0]
