The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.


Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Example:

Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.


O(???) time, O(???) space
class Solution(object):
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        
        res = []
        
        def deepCopy(board):
            res = []
            for i in range(len(board)):
                res.append(''.join(board[i]))
            
            return res
        
        def pickUpValidPositions(m, board):
            valid_positions = []
            for j in range(n):
                conflict = False
                for i in range(m):
                    if board[i][j] == 'Q' or 0 <= j-(m-i) and board[i][j-(m-i)] == 'Q' or j+(m-i) < n and board[i][j+(m-i)] == 'Q':
                        conflict = True
                        break
                
                if not conflict:
                    valid_positions.append([m, j])
            
            return valid_positions
        
        def myDFS(m, board):
            valid_positions = pickUpValidPositions(m, board)
            if not valid_positions:
                return
            
            for x, y in valid_positions:
                board[x][y] = 'Q'
                
                if m == n-1:
                    res.append(deepCopy(board))
                else:
                    myDFS(m+1, board)
                
                board[x][y] = '.'
        
        myDFS(0, [['.']*n for _ in range(n)])
        
        return res

 
 Easy to understand and O(1) validation time:
 class Solution(object):
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        
        set_addition, set_minus = set(), set()
        col_record = [False for _ in range(n)]
        
        result = []
        
        def generateBoard(locations):
            board = [['.']*n for _ in range(n)]
            for x, y in locations:
                board[x][y] = 'Q'
            return ["".join(row) for row in board]
        
        def myDFS(x, prev_locations, n):
            for y in range(n):
                if not col_record[y] and x+1+y not in set_addition and x+1-y not in set_minus:
                    if x+1 == n-1:
                        result.append(generateBoard(prev_locations+[(x+1, y)]))
                    else:
                        col_record[y] = True
                        set_addition.add(x+1+y)
                        set_minus.add(x+1-y)
                    
                        myDFS(x+1, prev_locations+[(x+1, y)], n)
                    
                        col_record[y] = False
                        set_addition.remove(x+1+y)
                        set_minus.remove(x+1-y)
        
        myDFS(-1, [], n)
        return result
