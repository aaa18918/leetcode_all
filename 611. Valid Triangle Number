Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.
Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Note:
The length of the given array won't exceed 1000.
The integers in the given array are in the range of [0, 1000].


O(n^2) time, O(1) space
class Solution(object):
    def triangleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        nums.sort()
        
        res = 0
        for i in range(len(nums)-1, 1, -1):
            j, k = 0, i-1
            while j < k:
                if nums[j]+nums[k] > nums[i]:
                    res += k-j
                    k -= 1
                else:
                    j += 1
        
        return res


O(n^2*lgn) time, O(1) space
class Solution(object):
    def triangleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        nums.sort()
        
        res = 0
        for i in range(len(nums)-2):
            for j in range(i+1, len(nums)-1):
                left, right = j+1, len(nums)-1
                while left <= right:
                    mid = (left+right)/2
                    if nums[i]+nums[j] <= nums[mid]:
                        right = mid-1
                    else:
                        left = mid+1
                
                res += left-j-1
        
        return res
