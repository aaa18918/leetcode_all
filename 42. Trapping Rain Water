Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6


O(n) time, O(1) space
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        left_max, right_max, left, right, res = 0, 0, 0, len(height)-1, 0
        while left <= right:
            if left_max < right_max:
                res += max(left_max-height[left], 0)
                left_max = max(left_max, height[left])
                left += 1
            else:
                res += max(right_max-height[right], 0)
                right_max = max(right_max, height[right])
                right -= 1
        
        return res


O(n) time, O(n) space
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        left_largest = []
        left_max = 0
        for h in height:
            left_largest.append(left_max)
            left_max = max(left_max, h)
        
        res = 0
        right_max = 0
        for idx in range(len(height)-1, -1, -1):
            res += max(min(left_largest[idx], right_max)-height[idx], 0)
            right_max = max(right_max, height[idx])
        
        return res
