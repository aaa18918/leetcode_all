Given an integer array of size n, find all elements that appear more than âŒŠ n/3 âŒ‹ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]


O(n) time, O(1) space
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        
        num1, num2, count1, count2 = None, None, 0, 0
        for num in nums:
            if num == num1:
                count1 += 1
            elif num == num2:
                count2 += 1
            elif count1 == 0:
                num1, count1 = num, 1
            elif count2 == 0:
                num2, count2 = num, 1
            else:
                count1 -= 1
                count2 -= 1
        
        def count(n):
            res = 0
            for num in nums:
                if n == num:
                    res += 1
            
            return res
        
        return [num for num in (num1, num2) if num is not None and count(num) > len(nums)/3]
