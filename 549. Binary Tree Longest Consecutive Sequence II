# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.res = 0

    def longestConsecutive(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        if not root: return 0
        
        def myDFS(node):
            inc, dec = 0, 0
            for child in (node.left, node.right):
                if not child: continue
                
                c_inc, c_dec = myDFS(child)
                
                if node.val-child.val == 1:
                    inc = max(inc, c_inc)
                if node.val-child.val == -1:
                    dec = max(dec, c_dec)
            
            self.res = max(self.res, dec+1+inc)
            return inc+1, dec+1
        
        myDFS(root)
        return self.res


别的解法没看，还有两O(n^2)的解法，更慢。还有dicuss的没看。
