Worst O(n) time init, worst O(n) time next, O(1) time hasNext, overall average O(1) time, overall worst O(n) space.
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator(object):

    def __init__(self, root):
        """
        :type root: TreeNode
        """
        
        self.stack = []
        
        p = root
        while p:
            self.stack.append(p)
            p = p.left

    def next(self):
        """
        @return the next smallest number
        :rtype: int
        """
        
        p = self.stack.pop()
        q = p.right
        while q:
            self.stack.append(q)
            q = q.left
        
        return p.val

    def hasNext(self):
        """
        @return whether we have a next smallest number
        :rtype: bool
        """
        
        return self.stack != []

# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
