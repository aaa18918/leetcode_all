class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        
        def _next_position_generator():
            low_x, high_x = 0, len(matrix)-1
            low_y, high_y = 0, len(matrix[0])-1
            
            x, y = 0, -1
            
            while high_x >= low_x and high_y >= low_y:
                while x == low_x and y < high_y:
                    y += 1
                    yield x, y
                
                low_x += 1
                if low_x > high_x: return
            
                while y == high_y and x < high_x:
                    x += 1
                    yield x, y
                
                high_y -= 1
                if high_y < low_y: return
                
                while x == high_x and y > low_y:
                    y -= 1
                    yield x, y
                    
                high_x -= 1
                if high_x < low_x: return
                
                while y == low_y and x > low_x:
                    x -= 1
                    yield x, y
                    
                low_y += 1
                if low_y > high_y: return
        
        if not matrix: return []
        
        res = []
        for x, y in _next_position_generator():
            res.append(matrix[x][y])
        
        return res

class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        
        def _next_position_generator():
            low_x, high_x = 0, len(matrix)-1
            low_y, high_y = 0, len(matrix[0])-1
            
            x, y = 0, -1
            
            while high_x >= low_x and high_y >= low_y:
                while y < high_y:
                    y += 1
                    yield x, y
                
                low_x += 1
                if low_x > high_x: return
            
                while x < high_x:
                    x += 1
                    yield x, y
                
                high_y -= 1
                if high_y < low_y: return
                
                while y > low_y:
                    y -= 1
                    yield x, y
                    
                high_x -= 1
                if high_x < low_x: return
                
                while x > low_x:
                    x -= 1
                    yield x, y
                    
                low_y += 1
                if low_y > high_y: return
        
        if not matrix: return []
        
        res = []
        for x, y in _next_position_generator():
            res.append(matrix[x][y])
        
        return res

class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        
        res = []
        
        while matrix and matrix[0]:
            res += matrix.pop(0)
            if matrix and matrix[0]:
                for row in matrix:
                    res.append(row.pop())
            
            if matrix:
                res += matrix.pop()[::-1]
            
            if matrix and matrix[0]:
                for row in matrix[::-1]:
                    res.append(row.pop(0))
        
        return res
