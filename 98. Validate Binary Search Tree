O(n) time, O(lgn) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        node = root
        my_stack = []
        prev = -sys.maxint-1
        while my_stack or node:
            while node:
                my_stack.append(node)
                node = node.left
            
            node = my_stack.pop()
            if prev >= node.val:
                return False
                
            prev = node.val
            node = node.right
        
        return True


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        if not root:
            return True
        
        my_queue = collections.deque([(root, sys.maxint, -sys.maxint-1)])
        while my_queue:
            node, max_val, min_val = my_queue.popleft()
            if node.val <= min_val or node.val >= max_val:
                return False
            
            if node.left:
                my_queue.append((node.left, node.val, min_val))
            
            if node.right:
                my_queue.append((node.right, max_val, node.val))
        
        return True


O(n) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        def myHelp(node, max_val, min_val):
            if node.val <= min_val or node.val >= max_val:
                return False
            
            if node.left and not myHelp(node.left, node.val, min_val):
                return False
            
            if node.right and not myHelp(node.right, max_val, node.val):
                return False
            
            return True
        
        return myHelp(root, sys.maxint, -sys.maxint-1) if root else True
