# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root: return 0
        
        my_stack, hash_table = [root], {None: 0}
        while my_stack:
            top_node = my_stack[-1]
            if top_node in hash_table:
                my_stack.pop()
                continue
            
            if top_node.left in hash_table and top_node.right in hash_table:
                hash_table[top_node] = max(hash_table[top_node.left], hash_table[top_node.right])+1
                my_stack.pop()
                continue
            
            if top_node.left not in hash_table: my_stack.append(top_node.left)
            if top_node.right not in hash_table: my_stack.append(top_node.right)
        
        res, my_stack = 0, [root]
        while my_stack:
            node = my_stack.pop()
            res = max(res, hash_table[node.left]+hash_table[node.right])
            if node.left: my_stack.append(node.left)
            if node.right: my_stack.append(node.right)
        
        return res


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.res = 0

    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        def myDFS(root):
            if not root: return 0
            left_depth, right_depth = 0, 0
            if root.left: left_depth = myDFS(root.left)
            if root.right: right_depth = myDFS(root.right)
            
            self.res = max(self.res, left_depth+right_depth)
            return max(left_depth, right_depth)+1
        
        myDFS(root)
        return self.res

