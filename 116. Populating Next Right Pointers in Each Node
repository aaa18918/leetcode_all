O(n) time, O(1) space
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=0, left=None, right=None, next=None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        
        if not root:
            return None
        
        cur = root
        while cur.left:
            p = cur
            while p:
                p.left.next = p.right
                
                if p.next:
                    p.right.next = p.next.left
                
                p = p.next
            
            cur = cur.left
        
        return root


O(n) time, O(1) space, generalization if not every node has two children.
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, left, right, next):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        
        cur = root
        while cur:
            p, q, next_head = cur, None, None
            while p:
                if p.left:
                    if q:
                        q.next = p.left
                        q = q.next
                    else:
                        next_head = p.left
                        q = p.left
                
                if p.right:
                    if q:
                        q.next = p.right
                        q = q.next
                    else:
                        next_head = p.right
                        q = p.right
                
                p = p.next
            
            cur = next_head
        
        return root
