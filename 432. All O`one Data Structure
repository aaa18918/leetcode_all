Amortized O(1) time, O(n) space
class ListNode(object):
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None

class AllOne(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.hash_table = {}
        self.head = ListNode(0, 0)
        self.tail = ListNode(0, 0)
        
        self.head.next = self.tail
        self.tail.prev = self.head

    def inc(self, key):
        """
        Inserts a new key <Key> with value 1. Or increments an existing key by 1.
        :type key: str
        :rtype: void
        """
        
        if key not in self.hash_table:
            node = ListNode(key, 1)
            node.prev, node.next = self.head, self.head.next
            self.head.next.prev = node
            self.head.next = node
            self.hash_table[key] = node
        else:
            node = self.hash_table[key]
            node.val += 1
            p = node.next
            while p.val < node.val and p is not self.tail:
                p.key, node.key = node.key, p.key
                p.val, node.val = node.val, p.val
                self.hash_table[node.key], self.hash_table[p.key] = self.hash_table[p.key], self.hash_table[node.key]
                node = p
                p = p.next

    def dec(self, key):
        """
        Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.
        :type key: str
        :rtype: void
        """
        
        if key not in self.hash_table:
            return
        
        node = self.hash_table[key]
        node.val -= 1
        if node.val == 0:
            node.prev.next = node.next
            node.next.prev = node.prev
            del self.hash_table[key]
            
            return
        
        p = node.prev
        while p.val > node.val and p is not self.head:
            p.key, node.key = node.key, p.key
            p.val, node.val = node.val, p.val
            self.hash_table[node.key], self.hash_table[p.key] = self.hash_table[p.key], self.hash_table[node.key]
            node = p
            p = p.prev
        
        self.hash_table[key] = node

    def getMaxKey(self):
        """
        Returns one of the keys with maximal value.
        :rtype: str
        """
        
        return self.tail.prev.key if self.hash_table else ''

    def getMinKey(self):
        """
        Returns one of the keys with Minimal value.
        :rtype: str
        """
        
        return self.head.next.key if self.hash_table else ''

# Your AllOne object will be instantiated and called as such:
# obj = AllOne()
# obj.inc(key)
# obj.dec(key)
# param_3 = obj.getMaxKey()
# param_4 = obj.getMinKey()

别的解法全没看。
