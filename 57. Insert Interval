O(n) time, O(n) space
# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        """
        
        idx, size = 0, len(intervals)
        while idx <= size:
            if idx == size or intervals[idx].start >= newInterval.start:
                intervals = intervals[:idx]+[newInterval]+intervals[idx:]
                break
            
            idx += 1
        
        left = 0
        for idx in range(1, len(intervals)):
            if intervals[idx].start <= intervals[left].end:
                intervals[left].end = max(intervals[left].end, intervals[idx].end)
            else:
                left += 1
                if idx > left:
                    intervals[left] = intervals[idx]
        return intervals[:left+1]
