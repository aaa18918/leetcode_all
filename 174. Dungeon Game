class Solution:
    # @param dungeon, a list of lists of integers
    # @return a integer
    def calculateMinimumHP(self, dungeon):
        if not dungeon: return 0
        m, n = len(dungeon), len(dungeon[0])

        dp = [[0]*n for _ in range(m)]
        dp[m-1][n-1] = max(1, -dungeon[m-1][n-1]+1)
        
        for i in range(m-1, -1, -1):
            for j in range(n-1, -1, -1):
                if i < m-1 and j < n-1:
                    dp[i][j] = min(max(1, dp[i+1][j]-dungeon[i][j]), max(1, dp[i][j+1]-dungeon[i][j]))
                elif i < m-1:
                    dp[i][j] = max(1, dp[i+1][j]-dungeon[i][j])
                elif j < n-1:
                    dp[i][j] =  max(1, dp[i][j+1]-dungeon[i][j])
        
        return dp[0][0]


class Solution:
    # @param dungeon, a list of lists of integers
    # @return a integer
    def calculateMinimumHP(self, dungeon):
        if not dungeon: return 0
        
        m, n = len(dungeon), len(dungeon[0])
        dp = [[0]*n for _ in range(m)]
        
        for i in range(m-1, -1, -1):
            for j in range(n-1, -1, -1):
                if i == m-1 and j == n-1:
                    dp[i][j] = max(1, -dungeon[i][j]+1)
                elif i == m-1:
                    dp[i][j] = max(1, dp[i][j+1]-dungeon[i][j])
                elif j == n-1:
                    dp[i][j] = max(1, dp[i+1][j]-dungeon[i][j])
                else:
                    dp[i][j] = min(max(1, dp[i+1][j]-dungeon[i][j]), max(1, dp[i][j+1]-dungeon[i][j]))
        
        return dp[0][0]
