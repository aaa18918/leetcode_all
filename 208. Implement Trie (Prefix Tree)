O(n) time, O(n) space insert; O(n) time, O(n) space search; O(n) time, O(n) space startsWith
class TrieNode(object):
    def __init__(self):
        self.is_word = False
        self.children = collections.defaultdict(TrieNode)

class Trie(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.root = TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        
        p = self.root
        for char in word:
            p = p.children[char]
        
        p.is_word = True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        
        p = self.root
        for char in word:
            if char in p.children:
                p = p.children[char]
            else:
                return False
        return p.is_word

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        
        p = self.root
        for char in prefix:
            if char in p.children:
                p = p.children[char]
            else:
                return False
        return True

# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)


class TrieNode(object):
    def __init__(self):
        self.isWord = False
        self.charTable = [None for _ in range(26)]

class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.root = TrieNode()
        
    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        
        if not word: return
        
        curNode = self.root
        for char in word:
            if not curNode.charTable[ord(char)-ord('a')]:
                curNode.charTable[ord(char)-ord('a')] = TrieNode()
            curNode = curNode.charTable[ord(char)-ord('a')]
        curNode.isWord = True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        
        if not word: return True
        
        curNode = self.root
        for char in word:
            if not curNode.charTable[ord(char)-ord('a')]:
                return False
            curNode = curNode.charTable[ord(char)-ord('a')]
        
        return curNode.isWord

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        
        if not prefix: return True
        
        curNode = self.root
        for char in prefix:
            if not curNode.charTable[ord(char)-ord('a')]:
                return False
            curNode = curNode.charTable[ord(char)-ord('a')]
        
        return True

# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
