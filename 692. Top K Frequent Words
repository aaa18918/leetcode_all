Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.

Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:
Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
Output: ["the", "is", "sunny", "day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.
Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Input words contain only lowercase letters.
Follow up:
Try to solve it in O(n log k) time and O(n) extra space.


O(nlgk) time, O(n) space
class Wrapper(object):
    def __init__(self, word, count):
        self.word = word
        self.count = count
    
    def __lt__(self, other):
        return True if self.count < other.count or self.count == other.count and self.word > other.word else False

class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        
        counter = [Wrapper(word, count) for word, count in collections.Counter(words).iteritems()]
        heap = counter[:k]
        heapq.heapify(heap)
        for idx in range(k, len(counter)):
            if counter[idx].count > heap[0].count or counter[idx].count == heap[0].count and counter[idx].word < heap[0].word:
                heapq.heapreplace(heap, counter[idx])
        
        res = []
        while heap:
            res.append(heapq.heappop(heap).word)
        
        return res[::-1]


还有别的解法都没看过啊。
