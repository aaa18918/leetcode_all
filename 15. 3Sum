O(n^2) time, O(1) space
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        nums.sort()
        res = []
        for idx in xrange(len(nums)-2):
            if nums[idx] > 0: return res
            if idx > 0 and nums[idx-1] == nums[idx]: continue
            left, right = idx+1, len(nums)-1
            while left < right:
                cur_sum = nums[idx]+nums[left]+nums[right]
                if cur_sum == 0:
                    res.append([nums[idx], nums[left], nums[right]])
                    left += 1
                    while left < right and nums[left] == nums[left-1]:
                        left += 1
                    
                    right -= 1
                    while left < right and nums[right] == nums[right+1]:
                        right -= 1
                elif cur_sum < 0:
                    left += 1
                    while left < right and nums[left] == nums[left-1]:
                        left += 1
                else:
                    right -= 1
                    while left < right and nums[right] == nums[right+1]:
                        right -= 1
        return res
