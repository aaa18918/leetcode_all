class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        
        for i in range(9):
            if not self.isPartialValid(0, i, 8, i, board) or not self.isPartialValid(i, 0, i, 8, board): return False
            
        for i in range(3):
            for j in range(3):
                if not self.isPartialValid(i*3, j*3, i*3+2, j*3+2, board):
                    return False
        
        return True
    
    def isPartialValid(self, x1, y1, x2, y2, board):
        hash_table = [0 for _ in range(10)]
        
        for i in range(x1, x2+1):
            for j in range(y1, y2+1):
                if board[i][j] == '.': continue
                if hash_table[int(board[i][j])] == 0:
                    hash_table[int(board[i][j])] = 1
                else:
                    return False
                    
        return True


https://leetcode.com/problems/valid-sudoku/
class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        
        for i in range(0,9):
            if not self.isPartialValid(i,0,i,8,board):
                return False
            if not self.isPartialValid(0,i,8,i,board):
                return False
        
        for i in range(0,3):
            for j in range(0,3):
                if not self.isPartialValid(i*3,j*3,i*3+2,j*3+2,board):
                    return False
        
        return True
    
    
    def isPartialValid(self, x1, y1, x2, y2,board):
        """
        return True if is valid sudoku
        """
        
        hash_table = {}
        
        for x in range(x1,x2+1):
            for y in range(y1,y2+1):
                if board[x][y] != '.':
                    if board[x][y] not in hash_table:
                        hash_table[board[x][y]] = 1
                    else:
                        return False
        
        return True
