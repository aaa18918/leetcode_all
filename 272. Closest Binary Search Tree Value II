Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note:

Given target value is a floating point.
You may assume k is always valid, that is: k â‰¤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]
Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?


O(klgn) time average, O(n) time worst, O(lgn) space average, O(n) space worst
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def closestKValues(self, root, target, k):
        """
        :type root: TreeNode
        :type target: float
        :type k: int
        :rtype: List[int]
        """
        
        if k <= 0:
            return []
        
        node = root
        res, prev, succ = [], [], []
        while node:
            if node.val == target:
                res.append(node.val)
                k -= 1
                break
            elif node.val < target:
                prev.append(node)
                node = node.right
            else:
                succ.append(node)
                node = node.left
        
        if node:
            p = node.left
            while p:
                prev.append(p)
                p = p.right
            
            p = node.right
            while p:
                succ.append(p)
                p = p.left
        
        def popPrev():
            node = prev.pop()
            res = node.val
            node = node.left
            while node:
                prev.append(node)
                node = node.right
            
            return res
        
        def popSucc():
            node = succ.pop()
            res = node.val
            node = node.right
            while node:
                succ.append(node)
                node = node.left
            
            return res
            
        while k > 0:
            if prev and succ:
                if abs(prev[-1].val-target) < abs(succ[-1].val-target):
                    res.append(popPrev())
                else:
                    res.append(popSucc())
            elif prev:
                res.append(popPrev())
            elif succ:
                res.append(popSucc())
            
            k -= 1
        
        return res
