O(1) time, O(1) space push; O(n) time pop, O(1) space pop; O(1) time, O(1) space top; O(1) time, O(1) space empty; Overall O(n) space.
class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.queue = collections.deque([])

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: None
        """
        
        self.queue.append(x)

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        
        size = len(self.queue)
        for _ in range(size-1):
            self.queue.append(self.queue.popleft())
        
        return self.queue.popleft()

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        
        return self.queue[-1]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        
        return not self.queue

# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
