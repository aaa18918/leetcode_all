# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.max_depth = -1
        self.res = 0

    def findBottomLeftValue(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        def myDFS(node, depth):
            if depth > self.max_depth:
                self.res, self.max_depth = node.val, depth
            
            if node.left: myDFS(node.left, depth+1)
            if node.right: myDFS(node.right, depth+1)
        
        myDFS(root, 0)
        return self.res


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.max_depth = -1
        self.res = 0

    def findBottomLeftValue(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        queue = [root]
        for node in queue:
            queue += filter(None, (node.right, node.left))
        return node.val

