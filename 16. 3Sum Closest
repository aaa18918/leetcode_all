Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

Example:

Given array nums = [-1, 2, 1, -4], and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).


O(n^2) time, O(1) space
class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        nums.sort()
        
        res = sys.maxint
        for idx in range(len(nums)):
            if idx > 0 and nums[idx] == nums[idx-1]:
                continue
            
            left, right = idx+1, len(nums)-1
            while left < right:
                cur_sum = nums[idx]+nums[left]+nums[right]
                
                if abs(target-res) > abs(target-cur_sum):
                    res = cur_sum
                
                if cur_sum == target:
                    return res
                elif cur_sum < target:
                    left += 1
                    while left < right and nums[left] == nums[left-1]:
                        left += 1
                else:
                    right -= 1
                    while left < right and nums[right] == nums[right+1]:
                        right -= 1
        
        return res
