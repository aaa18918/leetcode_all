Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]


O(???) time, O(???) space
class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        nums.sort()
        res, l = [[]], 0
        for idx in range(len(nums)):
            if idx == 0 or nums[idx] != nums[idx-1]:
                l = len(res)
            
            size = len(res)
            for i in range(l):
                res.append(res[size-1-i]+[nums[idx]])
        
        return res


O(???) time, O(???) space
class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        nums.sort()
        
        res, size = [], len(nums)
        
        def dfs(idx, cur):
            res.append(cur)
            
            for i in range(idx, size):
                if i == idx or nums[i] != nums[i-1]:
                    dfs(i+1, cur+[nums[i]])
        
        dfs(0, [])
        
        return res
