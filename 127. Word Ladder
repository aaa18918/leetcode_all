O(26kn) time, O(26kn) space
class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        
        lowercase = string.ascii_lowercase
        wordSet = set(wordList)
        myQueue = collections.deque([(beginWord, 1)])
        
        while myQueue:
            word, count = myQueue.popleft()
            
            for idx in range(len(word)):
                for char in lowercase:
                    if char != word[idx]:
                        newWord = word[:idx]+char+word[idx+1:]
                        if newWord in wordSet:
                            if newWord == endWord:
                                return count+1
                            else:
                                wordSet.remove(newWord)
                                myQueue.append((newWord, count+1))
        
        return 0


还有一个个two ends BFS。
