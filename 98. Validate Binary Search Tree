O(n) time, O(lgn) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        node = root
        my_stack = []
        prev = -sys.maxint-1
        while my_stack or node:
            while node:
                my_stack.append(node)
                node = node.left
            
            node = my_stack.pop()
            if prev >= node.val:
                return False
                
            prev = node.val
            node = node.right
        
        return True


O(n) time, O(???) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        def myHelp(root, min_val, max_val):
            if not root:
                return True
            
            if root.val >= max_val or root.val <= min_val:
                return False
            
            return myHelp(root.left, min_val, root.val) and myHelp(root.right, root.val, max_val)
        
        return myHelp(root, -sys.maxint-1, sys.maxint)
