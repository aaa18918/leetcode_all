Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.


O(mn) time, O(mn) space
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        
        if not grid:
            return 0
        
        m, n = len(grid), len(grid[0])
        dp = [[0]*n for _ in range(m)]
        
        for i in range(m-1, -1, -1):
            for j in range(n-1, -1, -1):
                if i < m-1 and j < n-1:
                    dp[i][j] = min(dp[i+1][j], dp[i][j+1])+grid[i][j]
                elif i < m-1:
                    dp[i][j] = dp[i+1][j]+grid[i][j]
                elif j < n-1:
                    dp[i][j] = dp[i][j+1]+grid[i][j]
                else:
                    dp[i][j] = grid[i][j]
        
        return dp[0][0]


O(mn) time, O(2n) space
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        
        m, n = len(grid), len(grid[0])
        record = [[grid[m-1][n-1]]*n for _ in range(2)]
        
        for j in range(n-2, -1, -1):
            record[0][j] = record[0][j+1]+grid[m-1][j]
        
        for i in range(m-2, -1, -1):
            record[(m-1-i)%2][n-1] = record[1-(m-1-i)%2][n-1]+grid[i][n-1]
            for j in range(n-2, -1, -1):
                record[(m-1-i)%2][j] = min(record[1-(m-1-i)%2][j], record[(m-1-i)%2][j+1])+grid[i][j] 
        
        return record[(m-1)%2][0]
