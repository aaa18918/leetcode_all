O(n) time, O(1) space
class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        def reverseList(left, right):
            while left < right:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
                right -= 1
        
        size = len(nums)
        k %= size
        reverseList(0, size-1)
        reverseList(k, size-1)
        reverseList(0, k-1)


O(n) time, O(n) space
class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        len_nums = len(nums)
        k %= len_nums
        nums[:] = nums[-k:]+nums[:-k]


O(n) time, O(k) space
class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        temp, k = [], k%len(nums)
        for i in range(k):
            temp.append(nums.pop())
        nums[:] = temp[::-1]+nums
