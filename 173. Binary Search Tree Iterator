# Definition for a  binary tree node
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator(object):
    def __init__(self, root):
        """
        :type root: TreeNode
        """
        
        self.my_stack = []
        self.node = root
        if not self.node: return
        
        while self.node.left:
            self.my_stack.append(self.node)
            self.node = self.node.left

    def hasNext(self):
        """
        :rtype: bool
        """
        
        return True if self.node or self.my_stack else False

    def next(self):
        """
        :rtype: int
        """
        
        result = self.node.val
        if self.node.right:
            self.node = self.node.right
            while self.node.left:
                self.my_stack.append(self.node)
                self.node = self.node.left
        else:
            self.node = self.my_stack.pop() if self.my_stack else None
        
        return result

# Your BSTIterator will be called like this:
# i, v = BSTIterator(root), []
# while i.hasNext(): v.append(i.next())
