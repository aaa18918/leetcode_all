O(GP*n) time, O(GP) space
class Solution(object):
    def profitableSchemes(self, G, P, group, profit):
        """
        :type G: int
        :type P: int
        :type group: List[int]
        :type profit: List[int]
        :rtype: int
        """
        
        dp = [[0]*(G+1) for _ in range(P+1)]
        dp[0][0] = 1
        
        for i in range(len(group)):
            for j in range(P, -1, -1):
                for k in range(G, -1, -1):
                    dp[j][k] = dp[j][k]+dp[max(j-profit[i], 0)][k-group[i]] if k >= group[i] else dp[j][k]
        
        return sum(dp[P])%(10**9+7)
