Given two arrays, write a function to compute their intersection.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Note:

Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:

What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?


O(nlgn) time, O(min(m,n)) space
如果已经排好序的话，用两个指针分别走起来。
class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        
        nums1, nums2 = sorted(nums1), sorted(nums2)
        i, j, len_nums1, len_nums2 = 0, 0, len(nums1), len(nums2)
        
        res = []
        while i < len_nums1 and j < len_nums2:
            if nums1[i] == nums2[j]:
                res.append(nums1[i])
                i, j = i+1, j+1
            elif nums1[i] < nums2[j]:
                i += 1
            else:
                j += 1
        
        return res


O(n) time, O(min(m, n)) space
class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        
        if len(nums1) < len(nums2):
            nums1, nums2 = nums2, nums1
        
        hash_table = collections.Counter(nums1)
        res = []
        for num in nums2:
            if num in hash_table and hash_table[num] > 0:
                hash_table[num] -= 1
                res.append(num)

        return res
