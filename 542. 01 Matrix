class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        
        if not matrix: return matrix
        
        m, n = len(matrix), len(matrix[0])
        res = [[0 for _ in range(n)] for _ in range(m)]
        steps = 1
        my_set = set([(x, y) for x in range(m) for y in range(n) if matrix[x][y] != 0])
        
        while my_set:
            temp = []
            for node in my_set:
                x, y = node
                if 0 <= x-1 and matrix[x-1][y] == 0 or x+1 < m and matrix[x+1][y] == 0 or 0 <= y-1 and matrix[x][y-1] == 0 or y+1 < n and matrix[x][y+1] == 0:
                    res[x][y] = steps
                    temp.append((x, y))
            
            for node in temp:
                x, y = node
                matrix[x][y] = 0
                my_set.remove(node)
            steps += 1
        
        return res


class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        
        if not matrix: return matrix
        
        m, n = len(matrix), len(matrix[0])
        
        my_queue = collections.deque()
        for x in range(m):
            for y in range(n):
                if matrix[x][y] != 0:
                    matrix[x][y] = sys.maxint
                else:
                    my_queue.append((x, y))

        diff = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        while my_queue:
            for _ in range(len(my_queue)):
                x, y = my_queue.popleft()
                for d in diff:
                    new_x, new_y = x+d[0], y+d[1]
                    if 0 <= new_x < m and 0 <= new_y < n and matrix[new_x][new_y] > matrix[x][y]+1:
                        my_queue.append((new_x, new_y))
                        matrix[new_x][new_y] = matrix[x][y]+1
        return matrix


还有一个两轮扫O(n)的解法原理没看懂。
