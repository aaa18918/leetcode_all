class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """

        if not matrix: return
        m, n = len(matrix), len(matrix[0])
        
        self.matrix = matrix
        self.record = [[0]*n for _ in range(m)]

        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    self.record[i][j] = matrix[0][0]
                elif i == 0:
                    self.record[i][j] = matrix[0][j]+self.record[0][j-1]
                elif j == 0:
                    self.record[i][j] = matrix[i][0]+self.record[i-1][j]
                else:
                    self.record[i][j] = matrix[i][j]+self.record[i-1][j]+self.record[i][j-1]-self.record[i-1][j-1]

    def update(self, row, col, val):
        """
        :type row: int
        :type col: int
        :type val: int
        :rtype: void
        """
        
        diff = val-self.matrix[row][col]
        self.matrix[row][col] = val
        m, n = len(self.record), len(self.record[0])
        for i in range(row, m):
            for j in range(col, n):
                self.record[i][j] += diff
        
    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        
        res = self.record[row2][col2]
        if row1:
            res -= self.record[row1-1][col2]
        if col1:
            res -= self.record[row2][col1-1]
        if row1 and col1:
            res += self.record[row1-1][col1-1]
        
        return res


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# obj.update(row,col,val)
# param_2 = obj.sumRegion(row1,col1,row2,col2)


class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        
        for row in matrix:
            for i in range(1, len(row)):
                row[i] += row[i-1]
        
        self.matrix = matrix

    def update(self, row, col, val):
        """
        :type row: int
        :type col: int
        :type val: int
        :rtype: void
        """
        
        origin = self.matrix[row][col]
        if col != 0:
            origin -= self.matrix[row][col-1]
        
        diff = val-origin
        for i in range(col, len(self.matrix[0])):
            self.matrix[row][i] += diff
        
    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        
        res = 0
        for i in range(row1, row2+1):
            res += self.matrix[i][col2]
        
        if col1 > 0:
            for i in range(row1, row2+1):
                res -= self.matrix[i][col1-1]
        
        return res


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# obj.update(row,col,val)
# param_2 = obj.sumRegion(row1,col1,row2,col2)


Fenwich tree, 太烦了......
