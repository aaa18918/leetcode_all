O(n) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        
        if k < 2:
            return head
        
        def reverseLinkedList(l, r):
            p, q = l, l.next
            while p is not r:
                temp = q.next
                q.next = p
                p, q = q, temp
            
            l.next = q
            return r
        
        dummy_head = ListNode(0)
        dummy_head.next = head  #For case k > len(list)
        p = dummy_head
        cur = head
        while cur:
            right, count = cur, k-1
            while count > 0:
                if not right.next:
                    return dummy_head.next
                right, count = right.next, count-1
            
            p.next = reverseLinkedList(cur, right)
            p = cur
            cur = cur.next
        
        return dummy_head.next
