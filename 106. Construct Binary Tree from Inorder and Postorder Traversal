O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: TreeNode
        """
        
        hash_table = {}
        for idx, num in enumerate(inorder):
            hash_table[num] = idx
        
        def helper(l, r):
            if l > r: return None
            
            root = TreeNode(postorder.pop())
            idx = hash_table[root.val]
            root.right = helper(idx+1, r)
            root.left = helper(l, idx-1)
            return root
        
        return helper(0, len(inorder)-1)
