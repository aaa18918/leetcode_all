76%
class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        left, right = 0, len(height)-1
        res = 0
        
        while left <= right:
            res = max(res, (right-left)*min(height[left], height[right]))
            if height[left] < height[right]:
                left += 1
                while left < right and height[left] <= height[left-1]:
                    left += 1
            else:
                right -= 1
                while left < right and height[right] <= height[right+1]:
                    right -= 1
        
        return res

two pointers: O(n), 95%
class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        left, right = 0, len(height)-1
        min_h = min(height[left], height[right])
        max_vol = min_h*right
        
        while left < right:
            while left < right and height[left] <= min_h:
                left += 1
            while left < right and height[right] <= min_h:
                right -= 1
            if left < right:
                min_h = min(height[left], height[right])
                max_vol = max(max_vol, min_h*(right-left))
        return max_vol

class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        len_height = len(height)
        left, right = 0, len_height-1
        max_volumn = 0
        
        while left < right:
            h = min(height[left], height[right])
            max_volumn = max(max_volumn, h*(right-left))
            while left < right and height[left] <= h: left += 1
            while left < right and height[right] <= h: right -= 1
            
        return max_volumn
