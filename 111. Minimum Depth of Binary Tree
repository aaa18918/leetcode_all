Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        if not root:
            return 0
        
        my_queue = collections.deque([(root, 1)])
        while my_queue:
            node, level = my_queue.popleft()
            
            if not node.left and not node.right:
                return level
            
            if node.left:
                my_queue.append((node.left, level+1))
            
            if node.right:
                my_queue.append((node.right, level+1))
        
        return 0
       

O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        if not root:
            return 0
        
        my_stack, res = [(root, 1)], sys.maxint
        while my_stack:
            node, depth = my_stack.pop()
            
            if not node.left and not node.right:
                res = min(res, depth)
            
            if node.left:
                my_stack.append((node.left, depth+1))
                
            if node.right:
                my_stack.append((node.right, depth+1))
        
        return res
