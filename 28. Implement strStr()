class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        
        return haystack.find(needle)
 
https://leetcode.com/problems/implement-strstr/
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        
        len_h, len_n = len(haystack), len(needle)
        
        if len_n == 0:
            return 0
        elif len_h == 0:
            return -1
        
        for index in range(0, len_h-len_n+1):
            if needle[0] == haystack[index]:
                matching_succeed = True
                for index_needle in range(0, len_n):
                    if needle[index_needle] != haystack[index+index_needle]:
                        matching_succeed = False
                        break
                    
                if matching_succeed:    
                    return index
        
        return -1

https://leetcode.com/problems/implement-strstr/
83%
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        
        if not needle: return 0
        if not haystack: return -1
        len_h, len_n = len(haystack), len(needle)
        
        for i in xrange(0, len_h-len_n+1):
            if haystack[i] == needle[0]:
                j = 0
                for j in xrange(1, len_n):
                    if haystack[i+j] != needle[j]:
                        break
                if j == len_n-1 and haystack[i+j] == needle[j]: return i
        return -1

72%:
for each index in haystack, go through the needle first:
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        
        if not needle: return 0
        if not haystack: return -1
        len_h, len_n = len(haystack), len(needle)
        
        for i in xrange(len_h-len_n+1):
            j = 0
            for j in xrange(len_n):
                if haystack[i+j] != needle[j]: break
            if j == len_n-1 and haystack[i+j] == needle[j]: return i
        return -1
