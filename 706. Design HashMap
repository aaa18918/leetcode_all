O(k) time put, O(k) time get, O(k) time remove, O(10000) space
class ListNode(object):

    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class MyHashMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """

        self.nodes = [None for _ in range(10000)]

    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """

        p = self.nodes[key%10000]
        prev = None
        while p:
            if p.key == key:
                p.value = value
                return
            
            prev = p
            p = p.next

        new_node = ListNode(key, value)
        if not prev:
            self.nodes[key%10000] = new_node
        else:
            prev.next = new_node

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """

        p = self.nodes[key%10000]
        while p:
            if p.key == key:
                return p.value
            
            p = p.next
        
        return -1

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """

        p = self.nodes[key%10000]
        if not p:
            return
        elif p.key == key:
            self.nodes[key%10000] = p.next
            return

        while p.next:
            if p.next.key == key:
                p.next = p.next.next
                return

            p = p.next

# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
