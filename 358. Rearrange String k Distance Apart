Given a non-empty string s and an integer k, rearrange the string such that the same characters are at least distance k from each other.

All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string "".

Example 1:

Input: s = "aabbcc", k = 3
Output: "abcabc" 
Explanation: The same letters are at least distance 3 from each other.
Example 2:

Input: s = "aaabc", k = 3
Output: "" 
Explanation: It is not possible to rearrange the string.
Example 3:

Input: s = "aaadbbcc", k = 2
Output: "abacabcd"
Explanation: The same letters are at least distance 2 from each other.


O(nlgn) time, O(n) space
class Solution(object):
    def rearrangeString(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: str
        """
        
        if k <= 1:
            return s
        
        counter = collections.Counter(s)
        
        my_heap = []
        for char, count in counter.iteritems():
            my_heap.append((-count, char))
        
        heapq.heapify(my_heap)
        
        res = ''
        while my_heap and (my_heap[0][0] == -1 or len(my_heap) >= k):
            tmp, c = [], k
            
            while my_heap and c > 0:
                count, char = heapq.heappop(my_heap)
                res += char
                count += 1
                
                c -= 1
                
                if count < 0:
                    tmp.append((count, char))
            
            while tmp:
                heapq.heappush(my_heap, tmp.pop())
            
        return res if not my_heap else ''

