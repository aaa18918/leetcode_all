Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.

Example 1:

Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
 

Note: The merging process must start from the root nodes of both trees.


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        
        if not t1 or not t2: return t1 or t2
        
        t1.val += t2.val
        
        if t1.left and t2.left:
            t1.left = self.mergeTrees(t1.left, t2.left)
        elif t2.left:
            t1.left = t2.left
        
        if t1.right and t2.right:
            t1.right = self.mergeTrees(t1.right, t2.right)
        elif t2.right:
            t1.right = t2.right
        
        return t1


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        
        if not t1 or not t2: return t1 or t2
        
        queue = [(t1, t2)]
        
        while queue:
            tree1, tree2 = queue.pop(0)
            tree1.val += tree2.val
            
            if tree1.left and tree2.left:
                queue.append((tree1.left, tree2.left))
            elif tree2.left:
                tree1.left = tree2.left
            
            if tree1.right and tree2.right:
                queue.append((tree1.right, tree2.right))
            elif tree2.right:
                tree1.right = tree2.right
        
        return t1


