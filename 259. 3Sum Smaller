Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example:

Input: nums = [-2,0,1,3], and target = 2
Output: 2 
Explanation: Because there are two triplets which sums are less than 2:
             [-2,0,1]
             [-2,0,3]
Follow up: Could you solve it in O(n2) runtime?


O(n^2) time, O(1) space
class Solution(object):
    def threeSumSmaller(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        nums.sort()
        size, count = len(nums), 0
        for idx in range(size-2):
            left, right = idx+1, size-1
            while left < right:
                if nums[idx]+nums[left]+nums[right] < target:
                    count += right-left
                    left += 1
                else:
                    right -= 1
        return count
