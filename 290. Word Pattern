O(n) time, O(n) space
class Solution(object):
    def wordPattern(self, pattern, str):
        s = pattern
        t = str.split()
        return len(set(zip(s, t))) == len(set(s)) == len(set(t)) and len(s) == len(t)


O(n) time, O(n) space
class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        
        l = str.split(' ')
        
        if len(pattern) != len(l):
            return False
        
        p2s, s2p = {}, {}
        for idx in range(len(pattern)):
            if pattern[idx] in p2s and l[idx] in s2p:
                if p2s[pattern[idx]] != l[idx] or s2p[l[idx]] != pattern[idx]:
                    return False
            elif pattern[idx] not in p2s and l[idx] not in s2p:
                pass
            else:
                return False

            p2s[pattern[idx]] = l[idx]
            s2p[l[idx]] = pattern[idx]
        
        return True
