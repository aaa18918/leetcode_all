O(lgn) time, O(n) space
class Solution(object):
    def minMeetingRooms(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: int
        """
        
        intervals.sort(key = lambda x: x[0])
        
        heap = []
        res = 0
        
        for interval in intervals:
            while heap and interval[0] >= heap[0]:
                heapq.heappop(heap)

            heapq.heappush(heap, interval[1])
            res = max(res, len(heap))
        
        return res


O(nlgn) time, O(n) space
# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def minMeetingRooms(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        
        start, end = [], []
        for interval in intervals:
            start.append(interval.start)
            end.append(interval.end)
        
        start.sort()
        end.sort()
        
        i, j, size_s = 0, 0, len(start)
        res, available = 0, 0
        while i < size_s:
            if start[i] < end[j]:
                if available > 0:
                    available -= 1
                else:
                    res += 1
                i += 1
            else:
                available += 1
                j += 1
        return res


别的解法还没看。
