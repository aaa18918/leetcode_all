Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


O(n) time, O(n) space
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        
        if not root:
            return ''
        
        res = ''
        queue = collections.deque([root])
        while queue:
            node = queue.popleft()
            if node:
                res += str(node.val)+','
                queue.append(node.left)
                queue.append(node.right)
            else:
                res += '#'+','
        
        return res[:-1]

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        
        if not data:
            return None
        
        data = data.split(',')
        root = TreeNode(data[0])
        
        queue = collections.deque([root])
        idx, size = 1, len(data)
        while queue:
            node = queue.popleft()
            if idx < size:
                node.left = TreeNode(data[idx]) if data[idx] != '#' else None
            
            if idx+1 < size:
                node.right = TreeNode(data[idx+1]) if data[idx+1] != '#' else None
            
            if node.left:
                queue.append(node.left)
            
            if node.right:
                queue.append(node.right)
        
            idx += 2
        
        return root

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))

别的解法没看。
