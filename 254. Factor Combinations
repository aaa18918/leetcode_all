Numbers can be regarded as product of its factors. For example,

8 = 2 x 2 x 2;
  = 2 x 4.
Write a function that takes an integer n and return all possible combinations of its factors.

Note:

You may assume that n is always positive.
Factors should be greater than 1 and less than n.
Example 1:

Input: 1
Output: []
Example 2:

Input: 37
Output:[]
Example 3:

Input: 12
Output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
Example 4:

Input: 32
Output:
[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]
]


class Solution(object):
    def getFactors(self, n):
        """
        :type n: int
        :rtype: List[List[int]]
        """
        
        if n < 2:
            return []
        
        res = []
        
        def myDFS(start, n, c):
            if n == 1:
                if len(c) > 1:
                    res.append(c)
                
                return
            
            for i in range(start, n+1):
                if n%i == 0:
                    myDFS(i, n/i, c+[i])
        
        myDFS(2, n, [])
        return res


Java版本能过，我的Python内存操蛋了，不知道为什么。


class Solution(object):
    def getFactors(self, n):
        """
        :type n: int
        :rtype: List[List[int]]
        """
        
        if n <= 1:
            return []
        
        dp = [[[i]] for i in range(n/2+1)]
        
        res = []
        
        for i in range(2, n/2+1):
            for j in range(2, n/i+1):
                for p in dp[i]:
                    if j >= p[-1]:
                        if i*j < n/2+1:
                            dp[i*j].append(p+[j])
                        elif i*j == n:
                            res.append(p+[j])
            dp[i] = []
        
        return res

内存还是爆炸啦。


需要看dis解法。
