Share
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.


O(n) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        
        if k <= 1:
            return head
        
        def reverseList(head, tail):
            p, q = head, head.next
            while p is not tail:
                tmp = q.next
                q.next = p
                p, q = q, tmp
            
            return p, head
        
        dummy_head = ListNode(0)
        dummy_head.next = head
        
        pre = dummy_head
        p = pre
        
        while p:
            q, n = p, k
            while q and n > 0:
                q = q.next
                n -= 1
            
            if not q or n > 0:
                break
            
            tmp = q.next
            tmp_head, tmp_tail = reverseList(p.next, q)
            p.next, tmp_tail.next = tmp_head, tmp
            
            p = tmp_tail
        
        return dummy_head.next
