O(n) time addWord, O(26^n) time search, O(26^n) space
class WordDictionary(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.trie = {}

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: None
        """
        
        p = self.trie
        for char in word:
            if char not in p:
                p[char] = {}
            
            p = p[char]
        
        p['#'] = {}

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        
        def myHelp(root, idx):
            p = root
            
            for i in range(idx, len(word)):
                if word[i] == '.':
                    if i+1 == len(word):
                        for key, val in p.iteritems():
                            if key != '#' and '#' in val:
                                return True
                        
                        return False
                    else:
                        for key, val in p.iteritems():
                            if key != '#':
                                if myHelp(p[key], i+1):
                                    return True
                        
                        return False
                else:
                    if word[i] not in p:
                        return False
                    
                    p = p[word[i]]
            
            return '#' in p
        
        return myHelp(self.trie, 0)

# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
