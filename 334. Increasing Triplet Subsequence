Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:

Return true if there exists i, j, k
such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
Note: Your algorithm should run in O(n) time complexity and O(1) space complexity.

Example 1:

Input: [1,2,3,4,5]
Output: true
Example 2:

Input: [5,4,3,2,1]
Output: false


class Solution(object):
    def increasingTriplet(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        
        num1, num2, t = None, None, None
        
        for num in nums:
            if num1 is None:
                num1 = num
            elif num <= num1:
                if t and num > t:
                    num1, num2 = t, num
                else:
                    t = num
            elif num2 is None or num < num2:
                num2 = num
            elif num > num2:
                return True
        return False


class Solution(object):
    def increasingTriplet(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        
        num1, num2 = sys.maxint, sys.maxint
        
        for num in nums:
            if num <= num1:
                num1 = num
            elif num <= num2:
                num2 = num
            else:
                return True
        return False


只看了一种额外的解法。
