Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.


O(mn) time, O(n) space
class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        
        res = [0]*len(triangle)
        
        for i in range(len(triangle)):
            prev, res[0] = res[0], res[0]+triangle[i][0]
            
            for j in range(1, len(triangle[i])-1):
                prev, res[j] = res[j], min(prev, res[j])+triangle[i][j]
            
            res[len(triangle[i])-1] = prev+triangle[i][-1]
        
        return min(res)
