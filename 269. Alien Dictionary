There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

Example 1:

Input:
[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]

Output: "wertf"
Example 2:

Input:
[
  "z",
  "x"
]

Output: "zx"
Example 3:

Input:
[
  "z",
  "x",
  "z"
] 

Output: "" 

Explanation: The order is invalid, so return "".
Note:

You may assume all letters are in lowercase.
You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.


O(???) time, O(???) sapce
class Solution(object):
    def alienOrder(self, words):
        """
        :type words: List[str]
        :rtype: str
        """
        
        adjacency_list = collections.defaultdict(set)
        for idx in range(len(words)-1):
            size = min(len(words[idx+1]), len(words[idx]))
            for i in range(size):
                if words[idx+1][i] != words[idx][i]:
                    adjacency_list[words[idx+1][i]].add(words[idx][i])
                    break
        
        res = []
        visited = [False for _ in range(26)]
        def myDFS(char):
            if char in res: return True
            if visited[ord(char)-ord('a')] == True: return False
            
            if char not in adjacency_list or not adjacency_list[char]:
                res.append(char)
                return True
            
            visited[ord(char)-ord('a')] = True
            for prev_char in adjacency_list[char]:
                if not myDFS(prev_char):
                    return False
            
            res.append(char)
            return True
        
        for i in range(len(words)):
            for j in range(len(words[i])):
                if not myDFS(words[i][j]):
                    return ''
        return ''.join(res)

O(???) time, O(???) space
class Solution(object):
    def alienOrder(self, words):
        """
        :type words: List[str]
        :rtype: str
        """
        
        adjacent_matrix = collections.defaultdict(set)
        
        def constructAdjacenetViaWords(l, r):
            size = min(len(l), len(r))
            for i in range(size):
                if l[i] != r[i]:
                    adjacent_matrix[l[i]].add(r[i])
                    return
        
        len_words, res = len(words), set()
        for i in range(len_words-1):
            constructAdjacenetViaWords(words[i], words[i+1])
        
        for i in range(len_words):
            w = words[i]
            for c in w:
                if c not in adjacent_matrix:
                    adjacent_matrix[c] = set()

        cur = []
        for k, v in adjacent_matrix.iteritems():
            if not v:
                cur.append(k)
        
        res = []
        while adjacent_matrix:
            res += cur
            for item in cur:
                del adjacent_matrix[item]
            temp = []
            for item in cur:
                for k in adjacent_matrix.iterkeys():
                    if item in adjacent_matrix[k]:
                        adjacent_matrix[k].remove(item)
                        if not adjacent_matrix[k]:
                            temp.append(k)
            
            if not temp: break
            cur = temp
        
        return ''.join(res[::-1]) if not adjacent_matrix else ""

没看别的解法
