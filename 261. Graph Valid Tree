O(n) time, O(n) space
class Solution(object):
    def validTree(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: bool
        """
        
        edges = set(map(tuple, edges))
        
        if len(edges) != n-1: return False
        
        visited = [0 for _ in range(n)]
        adjacency_list = collections.defaultdict(list)
        for edge in edges:
            adjacency_list[edge[0]].append(edge[1])
            adjacency_list[edge[1]].append(edge[0])
        
        def myDFS(num, parent):
            if visited[num] == 1: return True
            if visited[num] == -1: return False
            
            visited[num] = -1
            for adjacent_num in adjacency_list[num]:
                if adjacent_num != parent and not myDFS(adjacent_num, num):
                    return False
            visited[num] = 1
            return True
        
        for num in adjacency_list.iterkeys():
            if not myDFS(num, -1):
                return False
        return True


O(nlgn) time, O(n) space
class Solution(object):
    def validTree(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: bool
        """
        
        if len(edges) != n-1:
            return False
        
        parent = [-1 for _ in range(n)]
        
        def find(x):
            depth = 0
            while parent[x] != -1:
                depth, x = depth+1, parent[x]
            
            return depth, x
        
        def union(left, right):
            depth_left, parent_left = find(left)
            depth_right, parent_right = find(right)
            
            if parent_left == parent_right != -1:
                return False
            
            if depth_left < depth_right:
                parent[parent_left] = parent_right
            else:
                parent[parent_right] = parent_left
            
            return True
        
        for edge in edges:
            if not union(edge[0], edge[1]):
                return False
        
        return True
