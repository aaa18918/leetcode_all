You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7


O(m+n+max(m, n)) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        l1_sum, l2_sum = 0, 0
        p, q = l1, l2
        while p:
            l1_sum = 10*l1_sum+p.val
            p = p.next
        
        while q:
            l2_sum = 10*l2_sum+q.val
            q = q.next
        
        total = l1_sum+l2_sum
        
        if total == 0: return ListNode(0)
        
        prev = None
        while total:
            p = ListNode(total%10)
            p.next = prev
            total /= 10
            prev = p
        
        return prev


O(m+n+max(m, n)) time, O(m+n) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        my_stack1, my_stack2 = [], []
        p, q = l1, l2
        while p:
            my_stack1.append(p.val)
            p = p.next
        
        while q:
            my_stack2.append(q.val)
            q = q.next
        
        cur_sum = 0
        p, prev = None, None
        while cur_sum or my_stack1 or my_stack2:
            if my_stack1:
                cur_sum += my_stack1.pop()
            
            if my_stack2:
                cur_sum += my_stack2.pop()
            
            p = ListNode(cur_sum%10)
            cur_sum /= 10
            p.next = prev
            prev = p
        
        return p
