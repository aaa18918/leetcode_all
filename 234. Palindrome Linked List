Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?


O(n) time, O(1) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        
        if not head or not head.next:
            return True
        
        slow, fast = head, head.next
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        p = slow.next
        q = slow.next.next
        while q:
            temp = q.next
            q.next = p
            p, q = q, temp
        slow.next.next = None
        
        left, right = head, p
        while left and right:
            if left.val != right.val:
                return False
            left, right = left.next, right.next
        
        return True


O(n) time, O(n) space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        
        tmp = []
        p = head
        while p:
            tmp.append(p.val)
            p = p.next
        
        left, right = 0, len(tmp)-1
        while left < right:
            if tmp[left] != tmp[right]:
                return False
            
            left, right = left+1, right-1
        
        return True
