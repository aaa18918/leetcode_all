O(n) time, O(n) space
class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        
        adjacency_list = collections.defaultdict(set)
        for pre in prerequisites:
            adjacency_list[pre[0]].add(pre[1])
        
        visited = [0 for _ in range(numCourses)]
        
        res = [c for c in range(numCourses) if c not in adjacency_list]
        def myDFS(course):
            if course not in adjacency_list: return True
            if visited[course] == 1: return True
            if visited[course] == -1: return False
            
            visited[course] = -1
            for pre_course in adjacency_list[course]:
                if not myDFS(pre_course):
                    return False
            
            res.append(course)
            visited[course] = 1
            return True
        
        for course in range(numCourses):
            if not myDFS(course):
                return []
        
        return res
