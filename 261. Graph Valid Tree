Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.


O(n) time, O(???) space
class Solution(object):
    def validTree(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: bool
        """
        
        adj = collections.defaultdict(list)
        for edge in edges:
            adj[edge[0]].append(edge[1])
            adj[edge[1]].append(edge[0])
        
        visited = [False for i in range(n)]
        
        def myDFS(cur, prev):
            if visited[cur]:
                return False
            
            visited[cur] = True
            for num in adj[cur]:
                if num != prev and not myDFS(num, cur):
                    return False
            
            return True
        
        for i in range(n):
            if not visited[i] and not myDFS(i, -1):
                return False
        
        return len(edges) == n-1
