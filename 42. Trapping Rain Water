O(n) time, O(1) space
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        left, right = 0, len(height)-1
        res = 0
        left_max, right_max = 0, 0
        while left <= right:
            if left_max < right_max:
                left_max = max(left_max, height[left])
                res += left_max-height[left]
                left += 1
            else:
                right_max = max(right_max, height[right])
                res += right_max-height[right]
                right -= 1
        
        return res


O(n) time, O(n) space
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        
        my_stack = []
        res = 0
        for idx in range(len(height)):
            if height[idx] == 0:
                continue
            
            prev = 0
            while my_stack and my_stack[-1][0] <= height[idx]:
                res += (my_stack[-1][0]-prev)*(idx-my_stack[-1][1]-1)
                prev = my_stack[-1][0]
                my_stack.pop()
            
            if my_stack:
                res += (height[idx]-prev)*(idx-my_stack[-1][1]-1)
            
            my_stack.append([height[idx], idx])
        return res
