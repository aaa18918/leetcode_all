O(mn) time, O(mn) space
class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        
        if not obstacleGrid:
            return 0
        
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        dp = [[0]*n for _ in range(m)]
        dp[m-1][n-1] = 1 if obstacleGrid[m-1][n-1] == 0 else 0
        
        for i in range(m-1, -1, -1):
            for j in range(n-1, -1, -1):
                if obstacleGrid[i][j] != 1:
                    if i < m-1:
                        dp[i][j] += dp[i+1][j]
                    
                    if j < n-1:
                        dp[i][j] += dp[i][j+1]
        
        return dp[0][0]
