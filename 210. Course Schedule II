O(n) time, O(n) space
class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        
        if not prerequisites: return [num for num in range(numCourses)]
        
        adjacency = collections.defaultdict(set)
        for pre in prerequisites:
            adjacency[pre[0]].add(pre[1])
        
        res = []
        visited = set()
        canBeFinished = set()
        def myDFS(course):
            if course in visited:
                return False
            
            if course in canBeFinished:
                return True
            
            if course not in adjacency:
                res.append(course)
                canBeFinished.add(course)
                return True
            
            visited.add(course)
            for c in adjacency[course]:
                if not myDFS(c):
                    return False
            
            visited.remove(course)
            res.append(course)
            canBeFinished.add(course)
            return True
        
        for course in adjacency:
            if not myDFS(course):
                return []
        
        resSet = set(res)
        for num in range(numCourses):
            if num not in resSet:
                res.append(num)
        
        return res
