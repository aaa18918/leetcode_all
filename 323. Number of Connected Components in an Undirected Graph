O(n) time, O(n) sapce
class Solution(object):
    def countComponents(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: int
        """
        
        adjacency_list = collections.defaultdict(list)
        for edge in edges:
            adjacency_list[edge[0]].append(edge[1])
            adjacency_list[edge[1]].append(edge[0])
        
        visited = [False for _ in range(n)]
        
        def myDFS(num):
            my_stack = [num]
            while my_stack:
                cur_num = my_stack.pop()
                visited[cur_num] = True
                for adj_num in adjacency_list[cur_num]:
                    if not visited[adj_num]:
                        my_stack.append(adj_num)
        
        res = 0
        for num in range(n):
            if not visited[num]:
                res += 1
                myDFS(num)
        
        return res


O(nlgn) time, O(n) space
class Solution(object):
    def countComponents(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: int
        """
        
        parents = [-1 for _ in range(n)]
        
        def find(x):
            depth = 0
            while parents[x] != -1:
                depth += 1
                x = parents[x]
            
            return depth, x
        
        def union(l, r):
            depth_l, root_l = find(l)
            depth_r, root_r = find(r)
            
            if root_l != root_r:
                if depth_l < depth_r:
                    parents[root_l] = root_r
                else:
                    parents[root_r] = root_l
        
        for edge in edges:
            union(edge[0], edge[1])
        
        res = 0
        for p in parents:
            if p == -1:
                res += 1
        
        return res
