Design a data structure that supports all following operations in average O(1) time.

Note: Duplicate elements are allowed.
insert(val): Inserts an item val to the collection.
remove(val): Removes an item val from the collection if present.
getRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.
Example:

// Init an empty collection.
RandomizedCollection collection = new RandomizedCollection();

// Inserts 1 to the collection. Returns true as the collection did not contain 1.
collection.insert(1);

// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].
collection.insert(1);

// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].
collection.insert(2);

// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.
collection.getRandom();

// Removes 1 from the collection, returns true. Collection now contains [1,2].
collection.remove(1);

// getRandom should return 1 and 2 both equally likely.
collection.getRandom();


O(1) time, O(1) space insert, O(1) time, O(1) space remove, O(1) time, O(1) space getRandom, O(n) space overall
class RandomizedCollection(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.hash_table = collections.defaultdict(set)
        self.data = []

    def insert(self, val):
        """
        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        
        res = True if not self.hash_table[val] else False
        
        self.hash_table[val].add(len(self.data))
        self.data.append(val)
        
        return res

    def remove(self, val):
        """
        Removes a value from the collection. Returns true if the collection contained the specified element.
        :type val: int
        :rtype: bool
        """
        
        if not self.hash_table[val]:
            return False
        
        idx = self.hash_table[val].pop()
        size = len(self.data)
        if idx != size-1:
            self.hash_table[self.data[size-1]].remove(size-1)
            self.hash_table[self.data[size-1]].add(idx)
            self.data[idx], self.data[size-1] = self.data[size-1], self.data[idx]
        
        self.data.pop()
        
        return True

    def getRandom(self):
        """
        Get a random element from the collection.
        :rtype: int
        """
        
        return self.data[random.randint(0, len(self.data)-1)]

# Your RandomizedCollection object will be instantiated and called as such:
# obj = RandomizedCollection()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
