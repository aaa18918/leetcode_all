class RandomizedSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.my_set = set()

    def insert(self, val):
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        
        if val in self.my_set:
            return False
            
        self.my_set.add(val)
        return True

    def remove(self, val):
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        :type val: int
        :rtype: bool
        """
        
        if val not in self.my_set:
            return False
        
        self.my_set.remove(val)
        return True

    def getRandom(self):
        """
        Get a random element from the set.
        :rtype: int
        """
        
        return random.choice(list(self.my_set))

# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()


class RandomizedSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.my_hash_table = {}
        self.my_list = []

    def insert(self, val):
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        
        if val in self.my_hash_table:
            return False
            
        self.my_hash_table[val] = len(self.my_list)
        self.my_list.append(val)
        return True

    def remove(self, val):
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        :type val: int
        :rtype: bool
        """
        
        if val not in self.my_hash_table:
            return False
        
        index = self.my_hash_table[val]
        tail = self.my_list.pop()
        if index < len(self.my_list):
            self.my_list[index] = tail
            self.my_hash_table[tail] = index
        del self.my_hash_table[val]
        
        return True

    def getRandom(self):
        """
        Get a random element from the set.
        :rtype: int
        """
        
        return random.choice(self.my_list)

# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()


class RandomizedSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.my_set = set()

    def insert(self, val):
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        
        if val in self.my_set:
            return False
            
        self.my_set.add(val)
        return True

    def remove(self, val):
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        :type val: int
        :rtype: bool
        """
        
        if val not in self.my_set:
            return False
        
        self.my_set.remove(val)
        return True

    def getRandom(self):
        """
        Get a random element from the set.
        :rtype: int
        """
        
        return random.sample(self.my_set, 1).pop()
