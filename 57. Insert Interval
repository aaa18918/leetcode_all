O(lgn) time, O(n) space
# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        """
        
        left, right = 0, len(intervals)
        while left < right:
            mid = (left+right)/2
            if intervals[mid].end < newInterval.start:
                left += 1
            else:
                right = mid
        
        left_side = left
        
        left, right = 0, len(intervals)
        while left < right:
            mid = (left+right)/2
            if newInterval.end > intervals[mid].end or newInterval.end >= intervals[mid].start:
                left = mid+1
            else:
                right = mid
        
        right_side = left
        
        if left_side == len(intervals):
            return intervals+[newInterval]
        elif right_side == 0:
            return [newInterval]+intervals
        else:
            return intervals[:left_side]+[Interval(min(newInterval.start, intervals[left_side].start), max(newInterval.end, intervals[right_side-1].end))]+intervals[right_side:]
