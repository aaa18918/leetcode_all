There are N children standing in a line. Each child is assigned a rating value.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?

Example 1:

Input: [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
             The third child gets 1 candy because it satisfies the above two conditions.


O(n) time, O(n) space
class Solution(object):
    def candy(self, ratings):
        """
        :type ratings: List[int]
        :rtype: int
        """
        
        nums = [1]*len(ratings)
        
        for idx in range(1, len(ratings)):
            if ratings[idx] > ratings[idx-1]:
                nums[idx] = nums[idx-1]+1
        
        for idx in range(len(ratings)-1, 0, -1):
            if ratings[idx-1] > ratings[idx]:
                nums[idx-1] = max(nums[idx]+1, nums[idx-1])
        
        return sum(nums)


O(1) space的算法太难理解了，懒得看。
