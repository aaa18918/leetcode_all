O(???) time, O(???) space
class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        
        def isPalindrome(left, right):
            while left < right and s[left] == s[right]:
                left, right = left+1, right-1
            
            return left >= right
        
        def myHelp(left, right):
            if left > right:
                return [[]]
            elif left == right:
                return [[s[left]]]
            
            res = []
            for idx in range(left, right+1):
                if idx == left or isPalindrome(left, idx):
                    res += [[s[left:idx+1]]+p for p in myHelp(idx+1, right)]
            
            return res
        
        return myHelp(0, len(s)-1) if s else []


O(???) time, O(???) space
class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        
        return [[s[:index]]+rest for index in range(1, len(s)+1) if s[:index] == s[:index][::-1] for rest in self.partition(s[index:])] or [[]]


There is a dp soliution.
